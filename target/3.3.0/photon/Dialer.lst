
/Users/catlett/Dropbox/CODE/RotaryDial/Dialer/target/3.3.0/photon/Dialer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003174  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3190  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  20000000  080a3194  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000520  200000a8  200000a8  000300a8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a3238  080a3238  00023238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3260  080a3260  00023260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d03dc  00000000  00000000  00023264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001230a  00000000  00000000  000f3640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001efc3  00000000  00000000  0010594a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002490  00000000  00000000  0012490d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005870  00000000  00000000  00126d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00029233  00000000  00000000  0012c60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00031056  00000000  00000000  00155840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000bc809  00000000  00000000  00186896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000625c  00000000  00000000  002430a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fda9 	bl	80a2b84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fdb1 	bl	80a2ba0 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3194 	.word	0x080a3194
 80a004c:	200000a4 	.word	0x200000a4
 80a0050:	200000a8 	.word	0x200000a8
 80a0054:	200005c5 	.word	0x200005c5
 80a0058:	200005c5 	.word	0x200005c5

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f903 	bl	80a2268 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a3168 	.word	0x080a3168
 80a0080:	080a3188 	.word	0x080a3188

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b976 	b.w	80a0374 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f8b9 	bl	80a0200 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 b8a1 	b.w	80a21d8 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 beb5 	b.w	80a0e04 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 beb3 	b.w	80a0e04 <malloc>

080a009e <_ZdaPv>:
 80a009e:	f000 beb9 	b.w	80a0e14 <free>

080a00a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a00a2:	f000 beb7 	b.w	80a0e14 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a00b8:	b513      	push	{r0, r1, r4, lr}
 80a00ba:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a00bc:	4b04      	ldr	r3, [pc, #16]	; (80a00d0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a00be:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00c0:	f88d 3000 	strb.w	r3, [sp]
 80a00c4:	233c      	movs	r3, #60	; 0x3c
 80a00c6:	f001 f831 	bl	80a112c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	b002      	add	sp, #8
 80a00ce:	bd10      	pop	{r4, pc}
 80a00d0:	200000a8 	.word	0x200000a8

080a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00d4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00d6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a00d8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a00da:	b17c      	cbz	r4, 80a00fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a00dc:	6863      	ldr	r3, [r4, #4]
 80a00de:	3b01      	subs	r3, #1
 80a00e0:	6063      	str	r3, [r4, #4]
 80a00e2:	b95b      	cbnz	r3, 80a00fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a00e4:	6823      	ldr	r3, [r4, #0]
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	689b      	ldr	r3, [r3, #8]
 80a00ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00ec:	68a3      	ldr	r3, [r4, #8]
 80a00ee:	3b01      	subs	r3, #1
 80a00f0:	60a3      	str	r3, [r4, #8]
 80a00f2:	b91b      	cbnz	r3, 80a00fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00f4:	6823      	ldr	r3, [r4, #0]
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	68db      	ldr	r3, [r3, #12]
 80a00fa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a00fc:	4628      	mov	r0, r5
 80a00fe:	bd38      	pop	{r3, r4, r5, pc}

080a0100 <_Z13mqtt_callbackPcPhj>:
const char *TOPIC_NUMBER = "ha/rotary/number";  // sending entire dialed sequence
#define MQTT_KEEPALIVE 30 * 60              //  sec
// MQTT functions
void timer_callback_send_mqqt_data();
 // MQTT callbacks implementation
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
 80a0100:	b5b0      	push	{r4, r5, r7, lr}
     char p[length + 1];
 80a0102:	f102 0308 	add.w	r3, r2, #8
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
 80a0106:	b084      	sub	sp, #16
     char p[length + 1];
 80a0108:	f023 0307 	bic.w	r3, r3, #7
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
 80a010c:	af02      	add	r7, sp, #8
     char p[length + 1];
 80a010e:	ebad 0d03 	sub.w	sp, sp, r3
 80a0112:	ad02      	add	r5, sp, #8
     memcpy(p, payload, length);
 80a0114:	4628      	mov	r0, r5
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
 80a0116:	4614      	mov	r4, r2
     memcpy(p, payload, length);
 80a0118:	f002 fd34 	bl	80a2b84 <memcpy>
     p[length] = 0; // was = NULL but that threw a warning
 80a011c:	2300      	movs	r3, #0
 80a011e:	552b      	strb	r3, [r5, r4]
 80a0120:	4b08      	ldr	r3, [pc, #32]	; (80a0144 <_Z13mqtt_callbackPcPhj+0x44>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0122:	462a      	mov	r2, r5
 80a0124:	781b      	ldrb	r3, [r3, #0]
 80a0126:	4638      	mov	r0, r7
 80a0128:	4907      	ldr	r1, [pc, #28]	; (80a0148 <_Z13mqtt_callbackPcPhj+0x48>)
 80a012a:	f88d 3000 	strb.w	r3, [sp]
 80a012e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a0132:	f000 fffb 	bl	80a112c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0136:	1d38      	adds	r0, r7, #4
 80a0138:	f7ff ffcc 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     Particle.publish("mqtt", p, 3600, PRIVATE);
 }
 80a013c:	3708      	adds	r7, #8
 80a013e:	46bd      	mov	sp, r7
 80a0140:	bdb0      	pop	{r4, r5, r7, pc}
 80a0142:	bf00      	nop
 80a0144:	200000a9 	.word	0x200000a9
 80a0148:	080a2e04 	.word	0x080a2e04

080a014c <_Z8tellHASSPKc6String>:
  }

}
// mqtt comms

void tellHASS(const char *ha_topic, String ha_payload) {
 80a014c:	b530      	push	{r4, r5, lr}
 80a014e:	4604      	mov	r4, r0
 80a0150:	b087      	sub	sp, #28
  int returnCode = 0;
  delay(100); // take it easy on the server
 80a0152:	2064      	movs	r0, #100	; 0x64
void tellHASS(const char *ha_topic, String ha_payload) {
 80a0154:	460d      	mov	r5, r1
  delay(100); // take it easy on the server
 80a0156:	f000 fe8d 	bl	80a0e74 <delay>
  if(client.isConnected()) {
 80a015a:	4822      	ldr	r0, [pc, #136]	; (80a01e4 <_Z8tellHASSPKc6String+0x98>)
 80a015c:	f000 fab6 	bl	80a06cc <_ZN4MQTT11isConnectedEv>
 80a0160:	b308      	cbz	r0, 80a01a6 <_Z8tellHASSPKc6String+0x5a>
    returnCode = client.publish(ha_topic, ha_payload);
 80a0162:	4621      	mov	r1, r4
 80a0164:	682a      	ldr	r2, [r5, #0]
 80a0166:	481f      	ldr	r0, [pc, #124]	; (80a01e4 <_Z8tellHASSPKc6String+0x98>)
 80a0168:	f000 fc2b 	bl	80a09c2 <_ZN4MQTT7publishEPKcS1_>
    if (returnCode != 1) {
 80a016c:	4604      	mov	r4, r0
 80a016e:	2800      	cmp	r0, #0
 80a0170:	d136      	bne.n	80a01e0 <_Z8tellHASSPKc6String+0x94>
      delay(1000);
 80a0172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0176:	f000 fe7d 	bl	80a0e74 <delay>
      Particle.publish("mqtt return code = ", String(returnCode));
 80a017a:	4621      	mov	r1, r4
 80a017c:	220a      	movs	r2, #10
 80a017e:	a802      	add	r0, sp, #8
 80a0180:	f001 fb5b 	bl	80a183a <_ZN6StringC1Eih>
 80a0184:	9a02      	ldr	r2, [sp, #8]
 80a0186:	4918      	ldr	r1, [pc, #96]	; (80a01e8 <_Z8tellHASSPKc6String+0x9c>)
 80a0188:	4668      	mov	r0, sp
 80a018a:	f7ff ff95 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a018e:	a801      	add	r0, sp, #4
 80a0190:	f7ff ffa0 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0194:	a802      	add	r0, sp, #8
 80a0196:	f001 fac8 	bl	80a172a <_ZN6StringD1Ev>
      client.disconnect();
 80a019a:	4812      	ldr	r0, [pc, #72]	; (80a01e4 <_Z8tellHASSPKc6String+0x98>)
    delay(1000);
    Particle.publish("mqtt", "Connection dropped");
    client.connect(CLIENT_NAME, HA_USR, HA_PWD);
    client.publish(ha_topic, ha_payload);
  }
 80a019c:	b007      	add	sp, #28
 80a019e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      client.disconnect();
 80a01a2:	f000 ba5b 	b.w	80a065c <_ZN4MQTT10disconnectEv>
    delay(1000);
 80a01a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01aa:	f000 fe63 	bl	80a0e74 <delay>
    Particle.publish("mqtt", "Connection dropped");
 80a01ae:	4a0f      	ldr	r2, [pc, #60]	; (80a01ec <_Z8tellHASSPKc6String+0xa0>)
 80a01b0:	490f      	ldr	r1, [pc, #60]	; (80a01f0 <_Z8tellHASSPKc6String+0xa4>)
 80a01b2:	a802      	add	r0, sp, #8
 80a01b4:	f7ff ff80 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a01b8:	a803      	add	r0, sp, #12
 80a01ba:	f7ff ff8b 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    client.connect(CLIENT_NAME, HA_USR, HA_PWD);
 80a01be:	4b0d      	ldr	r3, [pc, #52]	; (80a01f4 <_Z8tellHASSPKc6String+0xa8>)
 80a01c0:	4a0d      	ldr	r2, [pc, #52]	; (80a01f8 <_Z8tellHASSPKc6String+0xac>)
 80a01c2:	490e      	ldr	r1, [pc, #56]	; (80a01fc <_Z8tellHASSPKc6String+0xb0>)
 80a01c4:	681b      	ldr	r3, [r3, #0]
 80a01c6:	6812      	ldr	r2, [r2, #0]
 80a01c8:	6809      	ldr	r1, [r1, #0]
 80a01ca:	4806      	ldr	r0, [pc, #24]	; (80a01e4 <_Z8tellHASSPKc6String+0x98>)
 80a01cc:	f000 fb6e 	bl	80a08ac <_ZN4MQTT7connectEPKcS1_S1_>
    client.publish(ha_topic, ha_payload);
 80a01d0:	4621      	mov	r1, r4
 80a01d2:	682a      	ldr	r2, [r5, #0]
 80a01d4:	4803      	ldr	r0, [pc, #12]	; (80a01e4 <_Z8tellHASSPKc6String+0x98>)
 80a01d6:	b007      	add	sp, #28
 80a01d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    client.publish(ha_topic, ha_payload);
 80a01dc:	f000 bbf1 	b.w	80a09c2 <_ZN4MQTT7publishEPKcS1_>
 80a01e0:	b007      	add	sp, #28
 80a01e2:	bd30      	pop	{r4, r5, pc}
 80a01e4:	200000b0 	.word	0x200000b0
 80a01e8:	080a2d5c 	.word	0x080a2d5c
 80a01ec:	080a2d70 	.word	0x080a2d70
 80a01f0:	080a2e04 	.word	0x080a2e04
 80a01f4:	20000004 	.word	0x20000004
 80a01f8:	20000008 	.word	0x20000008
 80a01fc:	20000000 	.word	0x20000000

080a0200 <loop>:
void loop() {
 80a0200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  delay(25);
 80a0204:	2019      	movs	r0, #25
void loop() {
 80a0206:	b086      	sub	sp, #24
  delay(25);
 80a0208:	f000 fe34 	bl	80a0e74 <delay>
  reading = digitalRead(in);
 80a020c:	4b48      	ldr	r3, [pc, #288]	; (80a0330 <loop+0x130>)
 80a020e:	4c49      	ldr	r4, [pc, #292]	; (80a0334 <loop+0x134>)
 80a0210:	8818      	ldrh	r0, [r3, #0]
 80a0212:	f002 f8b6 	bl	80a2382 <digitalRead>
      if ((millis() - lastStateChangeTime) > userHasFinishedDialingAfterMs) {  // finished dialing 
 80a0216:	4d48      	ldr	r5, [pc, #288]	; (80a0338 <loop+0x138>)
  reading = digitalRead(in);
 80a0218:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a021a:	f000 fc15 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
      if ((millis() - lastStateChangeTime) > userHasFinishedDialingAfterMs) {  // finished dialing 
 80a021e:	f002 fba9 	bl	80a2974 <__aeabi_ui2d>
 80a0222:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a0226:	f002 fa67 	bl	80a26f8 <__aeabi_dsub>
 80a022a:	4b44      	ldr	r3, [pc, #272]	; (80a033c <loop+0x13c>)
 80a022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0230:	f002 fc98 	bl	80a2b64 <__aeabi_dcmpgt>
 80a0234:	b348      	cbz	r0, 80a028a <loop+0x8a>
        if (dialing) {
 80a0236:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80a0340 <loop+0x140>
 80a023a:	f898 3000 	ldrb.w	r3, [r8]
 80a023e:	b323      	cbz	r3, 80a028a <loop+0x8a>
          dialedNumber = "";
 80a0240:	4940      	ldr	r1, [pc, #256]	; (80a0344 <loop+0x144>)
 80a0242:	4841      	ldr	r0, [pc, #260]	; (80a0348 <loop+0x148>)
 80a0244:	f001 fae8 	bl	80a1818 <_ZN6StringaSEPKc>
          for (int d=0; d<phoneNumberDigits; d++) {
 80a0248:	2600      	movs	r6, #0
 80a024a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80a034c <loop+0x14c>
 80a024e:	4f40      	ldr	r7, [pc, #256]	; (80a0350 <loop+0x150>)
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
 80a0250:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80a0348 <loop+0x148>
 80a0254:	683b      	ldr	r3, [r7, #0]
 80a0256:	42b3      	cmp	r3, r6
 80a0258:	dd06      	ble.n	80a0268 <loop+0x68>
 80a025a:	4650      	mov	r0, sl
 80a025c:	f859 1b04 	ldr.w	r1, [r9], #4
 80a0260:	f001 fb15 	bl	80a188e <_ZN6String6concatEi>
 80a0264:	3601      	adds	r6, #1
 80a0266:	e7f5      	b.n	80a0254 <loop+0x54>
          tellHASS(TOPIC_NUMBER, dialedNumber);
 80a0268:	4b3a      	ldr	r3, [pc, #232]	; (80a0354 <loop+0x154>)
 80a026a:	4937      	ldr	r1, [pc, #220]	; (80a0348 <loop+0x148>)
 80a026c:	681e      	ldr	r6, [r3, #0]
 80a026e:	a802      	add	r0, sp, #8
 80a0270:	f001 fac7 	bl	80a1802 <_ZN6StringC1ERKS_>
 80a0274:	4630      	mov	r0, r6
 80a0276:	a902      	add	r1, sp, #8
 80a0278:	f7ff ff68 	bl	80a014c <_Z8tellHASSPKc6String>
 80a027c:	a802      	add	r0, sp, #8
 80a027e:	f001 fa54 	bl	80a172a <_ZN6StringD1Ev>
          dialing=FALSE;
 80a0282:	2300      	movs	r3, #0
 80a0284:	f888 3000 	strb.w	r3, [r8]
          phoneNumberDigits = 0;
 80a0288:	603b      	str	r3, [r7, #0]
 80a028a:	f000 fbdd 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastStateChangeTime) > dialHasFinishedRotatingAfterMs) { // no action or end of digit rotation
 80a028e:	f002 fb71 	bl	80a2974 <__aeabi_ui2d>
 80a0292:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a0296:	f002 fa2f 	bl	80a26f8 <__aeabi_dsub>
 80a029a:	4b2f      	ldr	r3, [pc, #188]	; (80a0358 <loop+0x158>)
 80a029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02a0:	f002 fc60 	bl	80a2b64 <__aeabi_dcmpgt>
 80a02a4:	b320      	cbz	r0, 80a02f0 <loop+0xf0>
    if (digitComplete) {
 80a02a6:	4f2d      	ldr	r7, [pc, #180]	; (80a035c <loop+0x15c>)
 80a02a8:	783b      	ldrb	r3, [r7, #0]
 80a02aa:	b30b      	cbz	r3, 80a02f0 <loop+0xf0>
      Particle.publish("Dialed ", String(count%10));
 80a02ac:	220a      	movs	r2, #10
 80a02ae:	4e2c      	ldr	r6, [pc, #176]	; (80a0360 <loop+0x160>)
 80a02b0:	a802      	add	r0, sp, #8
 80a02b2:	6833      	ldr	r3, [r6, #0]
 80a02b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80a02b8:	fb02 3111 	mls	r1, r2, r1, r3
 80a02bc:	f001 fabd 	bl	80a183a <_ZN6StringC1Eih>
 80a02c0:	9a02      	ldr	r2, [sp, #8]
 80a02c2:	4928      	ldr	r1, [pc, #160]	; (80a0364 <loop+0x164>)
 80a02c4:	4668      	mov	r0, sp
 80a02c6:	f7ff fef7 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a02ca:	a801      	add	r0, sp, #4
 80a02cc:	f7ff ff02 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02d0:	a802      	add	r0, sp, #8
 80a02d2:	f001 fa2a 	bl	80a172a <_ZN6StringD1Ev>
      phoneNumber[phoneNumberDigits] = count;
 80a02d6:	4a1e      	ldr	r2, [pc, #120]	; (80a0350 <loop+0x150>)
 80a02d8:	6830      	ldr	r0, [r6, #0]
 80a02da:	6813      	ldr	r3, [r2, #0]
 80a02dc:	491b      	ldr	r1, [pc, #108]	; (80a034c <loop+0x14c>)
 80a02de:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      phoneNumberDigits++;
 80a02e2:	3301      	adds	r3, #1
 80a02e4:	6013      	str	r3, [r2, #0]
      digitComplete = FALSE;
 80a02e6:	2300      	movs	r3, #0
      cleared = 0;
 80a02e8:	4a1f      	ldr	r2, [pc, #124]	; (80a0368 <loop+0x168>)
      digitComplete = FALSE;
 80a02ea:	703b      	strb	r3, [r7, #0]
      count = 0;
 80a02ec:	6033      	str	r3, [r6, #0]
      cleared = 0;
 80a02ee:	6013      	str	r3, [r2, #0]
  if (reading != lastState) {
 80a02f0:	4e1e      	ldr	r6, [pc, #120]	; (80a036c <loop+0x16c>)
 80a02f2:	6822      	ldr	r2, [r4, #0]
 80a02f4:	6833      	ldr	r3, [r6, #0]
 80a02f6:	429a      	cmp	r2, r3
 80a02f8:	d017      	beq.n	80a032a <loop+0x12a>
 80a02fa:	f000 fba5 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
      lastStateChangeTime = millis();
 80a02fe:	f002 fb39 	bl	80a2974 <__aeabi_ui2d>
      dialing=TRUE;
 80a0302:	2201      	movs	r2, #1
 80a0304:	4b0e      	ldr	r3, [pc, #56]	; (80a0340 <loop+0x140>)
      lastStateChangeTime = millis();
 80a0306:	e9c5 0100 	strd	r0, r1, [r5]
      dialing=TRUE;
 80a030a:	701a      	strb	r2, [r3, #0]
    if (reading != trueState) {     //  switch has either just gone from closed->open or vice versa.
 80a030c:	4a18      	ldr	r2, [pc, #96]	; (80a0370 <loop+0x170>)
 80a030e:	6823      	ldr	r3, [r4, #0]
 80a0310:	6811      	ldr	r1, [r2, #0]
 80a0312:	428b      	cmp	r3, r1
 80a0314:	d008      	beq.n	80a0328 <loop+0x128>
      if (trueState == HIGH) {        // increment the pulse count if it's gone high.
 80a0316:	2b01      	cmp	r3, #1
      trueState = reading;
 80a0318:	6013      	str	r3, [r2, #0]
      if (trueState == HIGH) {        // increment the pulse count if it's gone high.
 80a031a:	d105      	bne.n	80a0328 <loop+0x128>
          count++;
 80a031c:	4910      	ldr	r1, [pc, #64]	; (80a0360 <loop+0x160>)
 80a031e:	680a      	ldr	r2, [r1, #0]
 80a0320:	3201      	adds	r2, #1
 80a0322:	600a      	str	r2, [r1, #0]
          digitComplete = TRUE;              // we'll need to print this number (once the dial has finished rotating)
 80a0324:	4a0d      	ldr	r2, [pc, #52]	; (80a035c <loop+0x15c>)
 80a0326:	7013      	strb	r3, [r2, #0]
    lastState = reading;
 80a0328:	6033      	str	r3, [r6, #0]
}
 80a032a:	b006      	add	sp, #24
 80a032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0330:	20000020 	.word	0x20000020
 80a0334:	20000160 	.word	0x20000160
 80a0338:	20000128 	.word	0x20000128
 80a033c:	20000030 	.word	0x20000030
 80a0340:	20000124 	.word	0x20000124
 80a0344:	080a2d6f 	.word	0x080a2d6f
 80a0348:	20000114 	.word	0x20000114
 80a034c:	20000134 	.word	0x20000134
 80a0350:	2000015c 	.word	0x2000015c
 80a0354:	20000010 	.word	0x20000010
 80a0358:	20000018 	.word	0x20000018
 80a035c:	20000125 	.word	0x20000125
 80a0360:	20000110 	.word	0x20000110
 80a0364:	080a2d83 	.word	0x080a2d83
 80a0368:	200000ac 	.word	0x200000ac
 80a036c:	20000024 	.word	0x20000024
 80a0370:	20000028 	.word	0x20000028

080a0374 <setup>:
void setup()  {
 80a0374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  pinMode(in, INPUT_PULLUP);
 80a0376:	4b19      	ldr	r3, [pc, #100]	; (80a03dc <setup+0x68>)
 80a0378:	2102      	movs	r1, #2
 80a037a:	8818      	ldrh	r0, [r3, #0]
 80a037c:	f001 fff0 	bl	80a2360 <pinMode>
  pinMode(out, OUTPUT);
 80a0380:	4b17      	ldr	r3, [pc, #92]	; (80a03e0 <setup+0x6c>)
 80a0382:	2101      	movs	r1, #1
 80a0384:	8818      	ldrh	r0, [r3, #0]
 80a0386:	f001 ffeb 	bl	80a2360 <pinMode>
 80a038a:	4b16      	ldr	r3, [pc, #88]	; (80a03e4 <setup+0x70>)
 80a038c:	4a16      	ldr	r2, [pc, #88]	; (80a03e8 <setup+0x74>)
 80a038e:	781b      	ldrb	r3, [r3, #0]
 80a0390:	4916      	ldr	r1, [pc, #88]	; (80a03ec <setup+0x78>)
 80a0392:	f88d 3000 	strb.w	r3, [sp]
 80a0396:	a802      	add	r0, sp, #8
 80a0398:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a039c:	f000 fec6 	bl	80a112c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a03a0:	a803      	add	r0, sp, #12
 80a03a2:	f7ff fe97 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  client.connect(CLIENT_NAME, HA_USR, HA_PWD); //see secrets.h
 80a03a6:	4b12      	ldr	r3, [pc, #72]	; (80a03f0 <setup+0x7c>)
 80a03a8:	4a12      	ldr	r2, [pc, #72]	; (80a03f4 <setup+0x80>)
 80a03aa:	4913      	ldr	r1, [pc, #76]	; (80a03f8 <setup+0x84>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6812      	ldr	r2, [r2, #0]
 80a03b0:	6809      	ldr	r1, [r1, #0]
 80a03b2:	4812      	ldr	r0, [pc, #72]	; (80a03fc <setup+0x88>)
 80a03b4:	f000 fa7a 	bl	80a08ac <_ZN4MQTT7connectEPKcS1_S1_>
  if (client.isConnected()) { Particle.publish("MQTT", "Connected to HA");
 80a03b8:	4810      	ldr	r0, [pc, #64]	; (80a03fc <setup+0x88>)
 80a03ba:	f000 f987 	bl	80a06cc <_ZN4MQTT11isConnectedEv>
 80a03be:	b150      	cbz	r0, 80a03d6 <setup+0x62>
 80a03c0:	4a0f      	ldr	r2, [pc, #60]	; (80a0400 <setup+0x8c>)
    } else {  Particle.publish("MQTT", "Failed connect HA - check secrets.h"); }
 80a03c2:	4910      	ldr	r1, [pc, #64]	; (80a0404 <setup+0x90>)
 80a03c4:	a802      	add	r0, sp, #8
 80a03c6:	f7ff fe77 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a03ca:	a803      	add	r0, sp, #12
 80a03cc:	f7ff fe82 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a03d0:	b005      	add	sp, #20
 80a03d2:	f85d fb04 	ldr.w	pc, [sp], #4
    } else {  Particle.publish("MQTT", "Failed connect HA - check secrets.h"); }
 80a03d6:	4a0c      	ldr	r2, [pc, #48]	; (80a0408 <setup+0x94>)
 80a03d8:	e7f3      	b.n	80a03c2 <setup+0x4e>
 80a03da:	bf00      	nop
 80a03dc:	20000020 	.word	0x20000020
 80a03e0:	20000130 	.word	0x20000130
 80a03e4:	200000a9 	.word	0x200000a9
 80a03e8:	080a2d8b 	.word	0x080a2d8b
 80a03ec:	080a2d9a 	.word	0x080a2d9a
 80a03f0:	20000004 	.word	0x20000004
 80a03f4:	20000008 	.word	0x20000008
 80a03f8:	20000000 	.word	0x20000000
 80a03fc:	200000b0 	.word	0x200000b0
 80a0400:	080a2d9f 	.word	0x080a2d9f
 80a0404:	080a2daf 	.word	0x080a2daf
 80a0408:	080a2db4 	.word	0x080a2db4

080a040c <_GLOBAL__sub_I_HA_USR>:
 80a040c:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
 80a040e:	2400      	movs	r4, #0
 80a0410:	2201      	movs	r2, #1
 80a0412:	4b0a      	ldr	r3, [pc, #40]	; (80a043c <_GLOBAL__sub_I_HA_USR+0x30>)
String dialedNumber;
 80a0414:	490a      	ldr	r1, [pc, #40]	; (80a0440 <_GLOBAL__sub_I_HA_USR+0x34>)
 80a0416:	701c      	strb	r4, [r3, #0]
 80a0418:	4b0a      	ldr	r3, [pc, #40]	; (80a0444 <_GLOBAL__sub_I_HA_USR+0x38>)
 80a041a:	480b      	ldr	r0, [pc, #44]	; (80a0448 <_GLOBAL__sub_I_HA_USR+0x3c>)
 80a041c:	701a      	strb	r2, [r3, #0]
 80a041e:	f001 f9ce 	bl	80a17be <_ZN6StringC1EPK19__FlashStringHelper>
MQTT client(MY_SERVER, 1883, MQTT_KEEPALIVE, mqtt_callback);
 80a0422:	4b0a      	ldr	r3, [pc, #40]	; (80a044c <_GLOBAL__sub_I_HA_USR+0x40>)
 80a0424:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0428:	9300      	str	r3, [sp, #0]
 80a042a:	4909      	ldr	r1, [pc, #36]	; (80a0450 <_GLOBAL__sub_I_HA_USR+0x44>)
 80a042c:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80a0430:	9401      	str	r4, [sp, #4]
 80a0432:	4808      	ldr	r0, [pc, #32]	; (80a0454 <_GLOBAL__sub_I_HA_USR+0x48>)
 80a0434:	f000 f854 	bl	80a04e0 <_ZN4MQTTC1EPKhtiPFvPcPhjEb>
 80a0438:	b002      	add	sp, #8
 80a043a:	bd10      	pop	{r4, pc}
 80a043c:	200000a8 	.word	0x200000a8
 80a0440:	080a2d6f 	.word	0x080a2d6f
 80a0444:	200000a9 	.word	0x200000a9
 80a0448:	20000114 	.word	0x20000114
 80a044c:	080a0101 	.word	0x080a0101
 80a0450:	2000000c 	.word	0x2000000c
 80a0454:	200000b0 	.word	0x200000b0

080a0458 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 80a0458:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 80a045c:	b510      	push	{r4, lr}
 80a045e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 80a0460:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 80a0462:	b113      	cbz	r3, 80a046a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 80a0464:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80a0466:	f000 fac7 	bl	80a09f8 <os_mutex_lock>
#endif
#endif
#endif
        }
 80a046a:	4620      	mov	r0, r4
 80a046c:	bd10      	pop	{r4, pc}

080a046e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 80a046e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 80a0470:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 80a0472:	4604      	mov	r4, r0
            if (mqtt->thread)
 80a0474:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80a0478:	b112      	cbz	r2, 80a0480 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 80a047a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80a047c:	f000 fac4 	bl	80a0a08 <os_mutex_unlock>
#endif
#endif
#endif
        }
 80a0480:	4620      	mov	r0, r4
 80a0482:	bd10      	pop	{r4, pc}

080a0484 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 80a0484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0486:	461f      	mov	r7, r3
 80a0488:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a048c:	4604      	mov	r4, r0
 80a048e:	460d      	mov	r5, r1
 80a0490:	4616      	mov	r6, r2
    if (thread) {
 80a0492:	b123      	cbz	r3, 80a049e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 80a0494:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 80a0496:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 80a0498:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 80a049a:	f000 faa5 	bl	80a09e8 <os_mutex_create>
    }
    this->callback = callback;
 80a049e:	9b08      	ldr	r3, [sp, #32]
 80a04a0:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 80a04a2:	2300      	movs	r3, #0
 80a04a4:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 80a04a6:	b106      	cbz	r6, 80a04aa <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 80a04a8:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 80a04aa:	b125      	cbz	r5, 80a04b6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 80a04ac:	4629      	mov	r1, r5
 80a04ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a04b2:	f001 f9b1 	bl	80a1818 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a04b6:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a04b8:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a04ba:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a04bc:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 80a04be:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a04c2:	2bff      	cmp	r3, #255	; 0xff
 80a04c4:	bfb8      	it	lt
 80a04c6:	23ff      	movlt	r3, #255	; 0xff
 80a04c8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a04cc:	b108      	cbz	r0, 80a04d2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 80a04ce:	f7ff fde6 	bl	80a009e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a04d2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a04d6:	f7ff fde0 	bl	80a009a <_Znaj>
 80a04da:	61e0      	str	r0, [r4, #28]
}
 80a04dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a04e0 <_ZN4MQTTC1EPKhtiPFvPcPhjEb>:
MQTT::MQTT(const uint8_t *ip, uint16_t port, int maxpacketsize, void (*callback)(char*,uint8_t*,unsigned int),
 80a04e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a04e4:	4604      	mov	r4, r0
            bool thread) {
 80a04e6:	2500      	movs	r5, #0
MQTT::MQTT(const uint8_t *ip, uint16_t port, int maxpacketsize, void (*callback)(char*,uint8_t*,unsigned int),
 80a04e8:	4698      	mov	r8, r3
 80a04ea:	4617      	mov	r7, r2
 80a04ec:	460e      	mov	r6, r1
            bool thread) {
 80a04ee:	f001 fc23 	bl	80a1d38 <_ZN9TCPClientC1Ev>
 80a04f2:	490d      	ldr	r1, [pc, #52]	; (80a0528 <_ZN4MQTTC1EPKhtiPFvPcPhjEb+0x48>)
 80a04f4:	61e5      	str	r5, [r4, #28]
 80a04f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a04fa:	f001 f960 	bl	80a17be <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, maxpacketsize, callback, thread);
 80a04fe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80a0502:	4620      	mov	r0, r4
 80a0504:	9303      	str	r3, [sp, #12]
 80a0506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0508:	4632      	mov	r2, r6
 80a050a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80a050e:	230f      	movs	r3, #15
 80a0510:	4629      	mov	r1, r5
 80a0512:	9300      	str	r3, [sp, #0]
            bool thread) {
 80a0514:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, maxpacketsize, callback, thread);
 80a0516:	463b      	mov	r3, r7
            bool thread) {
 80a0518:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, maxpacketsize, callback, thread);
 80a051c:	f7ff ffb2 	bl	80a0484 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 80a0520:	4620      	mov	r0, r4
 80a0522:	b004      	add	sp, #16
 80a0524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0528:	080a2d6f 	.word	0x080a2d6f

080a052c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a052c:	b510      	push	{r4, lr}
 80a052e:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0530:	4620      	mov	r0, r4
 80a0532:	f001 fb17 	bl	80a1b64 <_ZN9TCPClient9availableEv>
 80a0536:	2800      	cmp	r0, #0
 80a0538:	d0fa      	beq.n	80a0530 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a053a:	4620      	mov	r0, r4
 80a053c:	f001 f9eb 	bl	80a1916 <_ZN9TCPClient4readEv>
}
 80a0540:	b2c0      	uxtb	r0, r0
 80a0542:	bd10      	pop	{r4, pc}

080a0544 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t len = 0;
    buffer[len++] = readByte();
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0548:	f04f 0801 	mov.w	r8, #1
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a054c:	4605      	mov	r5, r0
 80a054e:	4689      	mov	r9, r1
    buffer[len++] = readByte();
 80a0550:	f7ff ffec 	bl	80a052c <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a0554:	2700      	movs	r7, #0
    buffer[len++] = readByte();
 80a0556:	4644      	mov	r4, r8
 80a0558:	69eb      	ldr	r3, [r5, #28]
 80a055a:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a055c:	69eb      	ldr	r3, [r5, #28]
 80a055e:	f893 a000 	ldrb.w	sl, [r3]
 80a0562:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0566:	4628      	mov	r0, r5
 80a0568:	f7ff ffe0 	bl	80a052c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a056c:	4626      	mov	r6, r4
 80a056e:	69eb      	ldr	r3, [r5, #28]
 80a0570:	3401      	adds	r4, #1
 80a0572:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0574:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0578:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a057c:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a057e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0580:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0582:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0586:	d4ee      	bmi.n	80a0566 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a0588:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a058a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a058e:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a0592:	d11e      	bne.n	80a05d2 <_ZN4MQTT10readPacketEPh+0x8e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0594:	4628      	mov	r0, r5
 80a0596:	f7ff ffc9 	bl	80a052c <_ZN4MQTT8readByteEv>
 80a059a:	69eb      	ldr	r3, [r5, #28]
 80a059c:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
 80a059e:	4628      	mov	r0, r5
 80a05a0:	f7ff ffc4 	bl	80a052c <_ZN4MQTT8readByteEv>
 80a05a4:	1cf4      	adds	r4, r6, #3
 80a05a6:	69eb      	ldr	r3, [r5, #28]
        buffer[len++] = readByte();
 80a05a8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a05aa:	b2b6      	uxth	r6, r6
 80a05ac:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a05ae:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a05b0:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a05b2:	b2b6      	uxth	r6, r6
 80a05b4:	42be      	cmp	r6, r7
 80a05b6:	d20e      	bcs.n	80a05d6 <_ZN4MQTT10readPacketEPh+0x92>
        digit = readByte();
 80a05b8:	4628      	mov	r0, r5
 80a05ba:	f7ff ffb7 	bl	80a052c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a05be:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a05c2:	3601      	adds	r6, #1
        if (len < this->maxpacketsize) {
 80a05c4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a05c6:	bf84      	itt	hi
 80a05c8:	69eb      	ldrhi	r3, [r5, #28]
 80a05ca:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a05cc:	3401      	adds	r4, #1
 80a05ce:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
 80a05d0:	e7ef      	b.n	80a05b2 <_ZN4MQTT10readPacketEPh+0x6e>
    uint8_t start = 0;
 80a05d2:	2600      	movs	r6, #0
 80a05d4:	e7ed      	b.n	80a05b2 <_ZN4MQTT10readPacketEPh+0x6e>
    }

    if (len > this->maxpacketsize) {
 80a05d6:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a05da:	42a3      	cmp	r3, r4
 80a05dc:	bf2c      	ite	cs
 80a05de:	4620      	movcs	r0, r4
 80a05e0:	2000      	movcc	r0, #0
 80a05e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a05e6 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a05e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a05ea:	4615      	mov	r5, r2
 80a05ec:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a05ee:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a05f0:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a05f2:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a05f4:	4696      	mov	lr, r2
 80a05f6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a05fa:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a05fe:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a0600:	bf88      	it	hi
 80a0602:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        lenBuf[pos++] = digit;
 80a0606:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a0608:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a060c:	4403      	add	r3, r0
        len = len / 128;
 80a060e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
 80a0612:	b2e4      	uxtb	r4, r4
 80a0614:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
 80a0618:	d81e      	bhi.n	80a0658 <_ZN4MQTT5writeEhPht+0x72>

    buf[4-llen] = header;
 80a061a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
 80a061e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
 80a0622:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
 80a0624:	4622      	mov	r2, r4
 80a0626:	a901      	add	r1, sp, #4
 80a0628:	4428      	add	r0, r5
    buf[4-llen] = header;
 80a062a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
 80a062e:	f002 faa9 	bl	80a2b84 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0632:	1c72      	adds	r2, r6, #1
 80a0634:	4422      	add	r2, r4
 80a0636:	4641      	mov	r1, r8
 80a0638:	4638      	mov	r0, r7
 80a063a:	f001 f958 	bl	80a18ee <_ZN9TCPClient5writeEPKhj>
 80a063e:	4605      	mov	r5, r0
 80a0640:	f000 fa02 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0644:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a0646:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0648:	4434      	add	r4, r6
 80a064a:	b2a8      	uxth	r0, r5
}
 80a064c:	1a23      	subs	r3, r4, r0
 80a064e:	4258      	negs	r0, r3
 80a0650:	4158      	adcs	r0, r3
 80a0652:	b002      	add	sp, #8
 80a0654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
 80a0658:	4623      	mov	r3, r4
 80a065a:	e7cb      	b.n	80a05f4 <_ZN4MQTT5writeEhPht+0xe>

080a065c <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a065c:	b513      	push	{r0, r1, r4, lr}
 80a065e:	4604      	mov	r4, r0
    MutexLocker lock(this);
 80a0660:	4601      	mov	r1, r0
 80a0662:	a801      	add	r0, sp, #4
 80a0664:	f7ff fef8 	bl	80a0458 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
 80a0668:	22e0      	movs	r2, #224	; 0xe0
 80a066a:	69e3      	ldr	r3, [r4, #28]
    buffer[1] = 0;
    _client.write(buffer,2);
 80a066c:	4620      	mov	r0, r4
    buffer[0] = MQTTDISCONNECT;
 80a066e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0670:	2200      	movs	r2, #0
 80a0672:	69e3      	ldr	r3, [r4, #28]
 80a0674:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0676:	69e1      	ldr	r1, [r4, #28]
 80a0678:	2202      	movs	r2, #2
 80a067a:	f001 f938 	bl	80a18ee <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a067e:	4620      	mov	r0, r4
 80a0680:	f001 faaa 	bl	80a1bd8 <_ZN9TCPClient4stopEv>
 80a0684:	f000 f9e0 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0688:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
 80a068c:	a801      	add	r0, sp, #4
 80a068e:	f7ff feee 	bl	80a046e <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0692:	b002      	add	sp, #8
 80a0694:	bd10      	pop	{r4, pc}

080a0696 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0696:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0698:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a069a:	4605      	mov	r5, r0
    pos += 2;
 80a069c:	b298      	uxth	r0, r3
 80a069e:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a06a0:	5cce      	ldrb	r6, [r1, r3]
 80a06a2:	b29c      	uxth	r4, r3
 80a06a4:	b14e      	cbz	r6, 80a06ba <_ZN4MQTT11writeStringEPKcPht+0x24>
 80a06a6:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
 80a06aa:	1c5f      	adds	r7, r3, #1
 80a06ac:	4584      	cmp	ip, r0
 80a06ae:	d904      	bls.n	80a06ba <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
 80a06b0:	1c44      	adds	r4, r0, #1
 80a06b2:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a06b4:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a06b6:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
 80a06b8:	e7f2      	b.n	80a06a0 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a06ba:	b299      	uxth	r1, r3
 80a06bc:	1a41      	subs	r1, r0, r1
 80a06be:	440a      	add	r2, r1
 80a06c0:	0a21      	lsrs	r1, r4, #8
 80a06c2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a06c6:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a06ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a06cc <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a06cc:	b538      	push	{r3, r4, r5, lr}
 80a06ce:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a06d0:	f001 fad9 	bl	80a1c86 <_ZN9TCPClient9connectedEv>
 80a06d4:	2800      	cmp	r0, #0
 80a06d6:	bf14      	ite	ne
 80a06d8:	2501      	movne	r5, #1
 80a06da:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a06dc:	d102      	bne.n	80a06e4 <_ZN4MQTT11isConnectedEv+0x18>
 80a06de:	4620      	mov	r0, r4
 80a06e0:	f001 fa7a 	bl	80a1bd8 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a06e4:	4628      	mov	r0, r5
 80a06e6:	bd38      	pop	{r3, r4, r5, pc}

080a06e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a06e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a06ec:	b088      	sub	sp, #32
 80a06ee:	4604      	mov	r4, r0
 80a06f0:	4689      	mov	r9, r1
 80a06f2:	4617      	mov	r7, r2
 80a06f4:	461e      	mov	r6, r3
 80a06f6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80a06fa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    if (!isConnected()) {
 80a06fe:	f7ff ffe5 	bl	80a06cc <_ZN4MQTT11isConnectedEv>
 80a0702:	4605      	mov	r5, r0
 80a0704:	2800      	cmp	r0, #0
 80a0706:	f040 80cd 	bne.w	80a08a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
 80a070a:	4621      	mov	r1, r4
 80a070c:	a801      	add	r0, sp, #4
 80a070e:	f7ff fea3 	bl	80a0458 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
 80a0712:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0714:	2900      	cmp	r1, #0
 80a0716:	f040 8088 	bne.w	80a082a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
 80a071a:	462b      	mov	r3, r5
 80a071c:	4620      	mov	r0, r4
 80a071e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0722:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0724:	f001 fb20 	bl	80a1d68 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a0728:	2800      	cmp	r0, #0
 80a072a:	d07a      	beq.n	80a0822 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
 80a072c:	2301      	movs	r3, #1
 80a072e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a0730:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0734:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
 80a0736:	2b04      	cmp	r3, #4
 80a0738:	4b5b      	ldr	r3, [pc, #364]	; (80a08a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
 80a073a:	f040 8081 	bne.w	80a0840 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a073e:	6818      	ldr	r0, [r3, #0]
 80a0740:	8899      	ldrh	r1, [r3, #4]
 80a0742:	799b      	ldrb	r3, [r3, #6]
 80a0744:	f8ad 100c 	strh.w	r1, [sp, #12]
 80a0748:	f88d 300e 	strb.w	r3, [sp, #14]
 80a074c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a074e:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0752:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80a0756:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80a075a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a075c:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a075e:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a0762:	f1b8 0f00 	cmp.w	r8, #0
 80a0766:	f000 8081 	beq.w	80a086c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a076a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80a076e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80a0772:	0140      	lsls	r0, r0, #5
 80a0774:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a0778:	f040 0006 	orr.w	r0, r0, #6
 80a077c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a077e:	f1ba 0f00 	cmp.w	sl, #0
 80a0782:	d101      	bne.n	80a0788 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
 80a0784:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a0788:	b11f      	cbz	r7, 80a0792 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
 80a078a:	2e00      	cmp	r6, #0
 80a078c:	d170      	bne.n	80a0870 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
 80a078e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a0792:	69e2      	ldr	r2, [r4, #28]
 80a0794:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a0796:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0798:	69e1      	ldr	r1, [r4, #28]
 80a079a:	1c58      	adds	r0, r3, #1
 80a079c:	1212      	asrs	r2, r2, #8
 80a079e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a07a0:	69e1      	ldr	r1, [r4, #28]
 80a07a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a07a4:	1c9a      	adds	r2, r3, #2
 80a07a6:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a07a8:	3303      	adds	r3, #3
 80a07aa:	4649      	mov	r1, r9
 80a07ac:	4620      	mov	r0, r4
 80a07ae:	69e2      	ldr	r2, [r4, #28]
 80a07b0:	f7ff ff71 	bl	80a0696 <_ZN4MQTT11writeStringEPKcPht>
 80a07b4:	4603      	mov	r3, r0
            if (willTopic) {
 80a07b6:	f1b8 0f00 	cmp.w	r8, #0
 80a07ba:	d00b      	beq.n	80a07d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
 80a07bc:	4641      	mov	r1, r8
 80a07be:	69e2      	ldr	r2, [r4, #28]
 80a07c0:	4620      	mov	r0, r4
 80a07c2:	f7ff ff68 	bl	80a0696 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a07c6:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a07c8:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a07ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a07cc:	4620      	mov	r0, r4
 80a07ce:	f7ff ff62 	bl	80a0696 <_ZN4MQTT11writeStringEPKcPht>
 80a07d2:	4603      	mov	r3, r0
            if(user != NULL) {
 80a07d4:	b167      	cbz	r7, 80a07f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
 80a07d6:	4639      	mov	r1, r7
 80a07d8:	4620      	mov	r0, r4
 80a07da:	69e2      	ldr	r2, [r4, #28]
 80a07dc:	f7ff ff5b 	bl	80a0696 <_ZN4MQTT11writeStringEPKcPht>
 80a07e0:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a07e2:	b12e      	cbz	r6, 80a07f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
 80a07e4:	4631      	mov	r1, r6
 80a07e6:	4620      	mov	r0, r4
 80a07e8:	69e2      	ldr	r2, [r4, #28]
 80a07ea:	f7ff ff54 	bl	80a0696 <_ZN4MQTT11writeStringEPKcPht>
 80a07ee:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a07f0:	3b05      	subs	r3, #5
 80a07f2:	2110      	movs	r1, #16
 80a07f4:	69e2      	ldr	r2, [r4, #28]
 80a07f6:	b29b      	uxth	r3, r3
 80a07f8:	4620      	mov	r0, r4
 80a07fa:	f7ff fef4 	bl	80a05e6 <_ZN4MQTT5writeEhPht>
 80a07fe:	f000 f923 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0802:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a0806:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a080a:	4620      	mov	r0, r4
 80a080c:	f001 f9aa 	bl	80a1b64 <_ZN9TCPClient9availableEv>
 80a0810:	bb88      	cbnz	r0, 80a0876 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
 80a0812:	f000 f919 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0818:	1ac0      	subs	r0, r0, r3
 80a081a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a081c:	4373      	muls	r3, r6
 80a081e:	4298      	cmp	r0, r3
 80a0820:	d9f3      	bls.n	80a080a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
 80a0822:	4620      	mov	r0, r4
 80a0824:	f001 f9d8 	bl	80a1bd8 <_ZN9TCPClient4stopEv>
 80a0828:	e035      	b.n	80a0896 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
 80a082a:	a802      	add	r0, sp, #8
 80a082c:	f000 fe90 	bl	80a1550 <_ZN9IPAddressC1EPKh>
 80a0830:	462b      	mov	r3, r5
 80a0832:	4620      	mov	r0, r4
 80a0834:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0838:	a902      	add	r1, sp, #8
 80a083a:	f001 f923 	bl	80a1a84 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a083e:	e773      	b.n	80a0728 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0840:	f8d3 0007 	ldr.w	r0, [r3, #7]
 80a0844:	f8d3 100b 	ldr.w	r1, [r3, #11]
 80a0848:	f10d 0c08 	add.w	ip, sp, #8
 80a084c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a0850:	7bdb      	ldrb	r3, [r3, #15]
 80a0852:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0856:	ab02      	add	r3, sp, #8
 80a0858:	cb03      	ldmia	r3!, {r0, r1}
 80a085a:	f8c2 0005 	str.w	r0, [r2, #5]
 80a085e:	f8c2 1009 	str.w	r1, [r2, #9]
 80a0862:	f89c 3000 	ldrb.w	r3, [ip]
 80a0866:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0868:	230e      	movs	r3, #14
 80a086a:	e77a      	b.n	80a0762 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
 80a086c:	2002      	movs	r0, #2
 80a086e:	e786      	b.n	80a077e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
 80a0870:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a0874:	e78d      	b.n	80a0792 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
 80a0876:	4620      	mov	r0, r4
 80a0878:	a902      	add	r1, sp, #8
 80a087a:	f7ff fe63 	bl	80a0544 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a087e:	2804      	cmp	r0, #4
 80a0880:	d1cf      	bne.n	80a0822 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
 80a0882:	69e3      	ldr	r3, [r4, #28]
 80a0884:	78de      	ldrb	r6, [r3, #3]
 80a0886:	2e00      	cmp	r6, #0
 80a0888:	d1cb      	bne.n	80a0822 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
 80a088a:	f000 f8dd 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a088e:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a0890:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0892:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
 80a0896:	a801      	add	r0, sp, #4
 80a0898:	f7ff fde9 	bl	80a046e <_ZN4MQTT11MutexLockerD1Ev>
}
 80a089c:	4628      	mov	r0, r5
 80a089e:	b008      	add	sp, #32
 80a08a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a08a4:	2500      	movs	r5, #0
 80a08a6:	e7f9      	b.n	80a089c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
 80a08a8:	080a2e13 	.word	0x080a2e13

080a08ac <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
 80a08ac:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
 80a08ae:	f04f 0c04 	mov.w	ip, #4
 80a08b2:	2401      	movs	r4, #1
bool MQTT::connect(const char *id, const char *user, const char *pass) {
 80a08b4:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
 80a08b6:	e9cd 4c04 	strd	r4, ip, [sp, #16]
 80a08ba:	2400      	movs	r4, #0
 80a08bc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80a08c0:	e9cd 4400 	strd	r4, r4, [sp]
 80a08c4:	f7ff ff10 	bl	80a06e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a08c8:	b006      	add	sp, #24
 80a08ca:	bd10      	pop	{r4, pc}

080a08cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a08cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a08d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80a08d4:	4604      	mov	r4, r0
 80a08d6:	468b      	mov	fp, r1
 80a08d8:	4616      	mov	r6, r2
 80a08da:	461f      	mov	r7, r3
 80a08dc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80a08e0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    if (isConnected()) {
 80a08e4:	f7ff fef2 	bl	80a06cc <_ZN4MQTT11isConnectedEv>
 80a08e8:	4682      	mov	sl, r0
 80a08ea:	2800      	cmp	r0, #0
 80a08ec:	d051      	beq.n	80a0992 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
 80a08ee:	4621      	mov	r1, r4
 80a08f0:	a801      	add	r0, sp, #4
 80a08f2:	f7ff fdb1 	bl	80a0458 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
 80a08f6:	2100      	movs	r1, #0
 80a08f8:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a08fc:	69e0      	ldr	r0, [r4, #28]
 80a08fe:	f002 f94f 	bl	80a2ba0 <memset>
        length = writeString(topic, buffer, length);
 80a0902:	2305      	movs	r3, #5
 80a0904:	4659      	mov	r1, fp
 80a0906:	4620      	mov	r0, r4
 80a0908:	69e2      	ldr	r2, [r4, #28]
 80a090a:	f7ff fec4 	bl	80a0696 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a090e:	1e6b      	subs	r3, r5, #1
 80a0910:	2b01      	cmp	r3, #1
 80a0912:	d815      	bhi.n	80a0940 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
 80a0914:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0916:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
 80a0918:	3101      	adds	r1, #1
 80a091a:	b289      	uxth	r1, r1
 80a091c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a091e:	0a09      	lsrs	r1, r1, #8
 80a0920:	5419      	strb	r1, [r3, r0]
 80a0922:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0924:	69e3      	ldr	r3, [r4, #28]
 80a0926:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0928:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
 80a092a:	3002      	adds	r0, #2
 80a092c:	b280      	uxth	r0, r0
 80a092e:	5499      	strb	r1, [r3, r2]
            if (messageid != NULL)
 80a0930:	f1b8 0f00 	cmp.w	r8, #0
 80a0934:	d004      	beq.n	80a0940 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
 80a0936:	8c23      	ldrh	r3, [r4, #32]
 80a0938:	1c5a      	adds	r2, r3, #1
 80a093a:	8422      	strh	r2, [r4, #32]
 80a093c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0940:	2100      	movs	r1, #0
 80a0942:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0944:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
 80a0946:	69e2      	ldr	r2, [r4, #28]
 80a0948:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a094a:	d90a      	bls.n	80a0962 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
 80a094c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a0950:	459c      	cmp	ip, r3
 80a0952:	d906      	bls.n	80a0962 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
 80a0954:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0958:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a095a:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a095e:	b289      	uxth	r1, r1
 80a0960:	e7ef      	b.n	80a0942 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
 80a0962:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80a0966:	2900      	cmp	r1, #0
 80a0968:	bf0c      	ite	eq
 80a096a:	2130      	moveq	r1, #48	; 0x30
 80a096c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a096e:	f1b9 0f00 	cmp.w	r9, #0
 80a0972:	d001      	beq.n	80a0978 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
 80a0974:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a0978:	2d02      	cmp	r5, #2
 80a097a:	d10e      	bne.n	80a099a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
 80a097c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a0980:	3b05      	subs	r3, #5
 80a0982:	4620      	mov	r0, r4
 80a0984:	b29b      	uxth	r3, r3
 80a0986:	f7ff fe2e 	bl	80a05e6 <_ZN4MQTT5writeEhPht>
 80a098a:	4682      	mov	sl, r0
        MutexLocker lock(this);
 80a098c:	a801      	add	r0, sp, #4
 80a098e:	f7ff fd6e 	bl	80a046e <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0992:	4650      	mov	r0, sl
 80a0994:	b003      	add	sp, #12
 80a0996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
 80a099a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a099c:	bf08      	it	eq
 80a099e:	f041 0102 	orreq.w	r1, r1, #2
 80a09a2:	e7ed      	b.n	80a0980 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

080a09a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a09a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a09a6:	9c08      	ldr	r4, [sp, #32]
 80a09a8:	9403      	str	r4, [sp, #12]
 80a09aa:	2400      	movs	r4, #0
 80a09ac:	9402      	str	r4, [sp, #8]
 80a09ae:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a09b2:	9401      	str	r4, [sp, #4]
 80a09b4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a09b8:	9400      	str	r4, [sp, #0]
 80a09ba:	f7ff ff87 	bl	80a08cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a09be:	b004      	add	sp, #16
 80a09c0:	bd10      	pop	{r4, pc}

080a09c2 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a09c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a09c4:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a09c6:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a09c8:	4614      	mov	r4, r2
 80a09ca:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a09cc:	f002 f94b 	bl	80a2c66 <strlen>
 80a09d0:	2200      	movs	r2, #0
 80a09d2:	4603      	mov	r3, r0
 80a09d4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a09d8:	9200      	str	r2, [sp, #0]
 80a09da:	4631      	mov	r1, r6
 80a09dc:	4622      	mov	r2, r4
 80a09de:	4628      	mov	r0, r5
 80a09e0:	f7ff ffe0 	bl	80a09a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a09e4:	b004      	add	sp, #16
 80a09e6:	bd70      	pop	{r4, r5, r6, pc}

080a09e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <os_mutex_create+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601d0 	.word	0x080601d0

080a09f8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <os_mutex_lock+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601d0 	.word	0x080601d0

080a0a08 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <os_mutex_unlock+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	080601d0 	.word	0x080601d0

080a0a18 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <os_mutex_recursive_create+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	080601d0 	.word	0x080601d0

080a0a28 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <os_mutex_recursive_destroy+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601d0 	.word	0x080601d0

080a0a38 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <HAL_RNG_GetRandomNumber+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	685b      	ldr	r3, [r3, #4]
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	0806019c 	.word	0x0806019c

080a0a48 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	695b      	ldr	r3, [r3, #20]
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	0806019c 	.word	0x0806019c

080a0a58 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <HAL_Pin_Mode+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	689b      	ldr	r3, [r3, #8]
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601b0 	.word	0x080601b0

080a0a68 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <HAL_Get_Pin_Mode+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	68db      	ldr	r3, [r3, #12]
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601b0 	.word	0x080601b0

080a0a78 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b02      	ldr	r3, [pc, #8]	; (80a0a84 <HAL_GPIO_Read+0xc>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	695b      	ldr	r3, [r3, #20]
 80a0a80:	9301      	str	r3, [sp, #4]
 80a0a82:	bd08      	pop	{r3, pc}
 80a0a84:	080601b0 	.word	0x080601b0

080a0a88 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <hal_i2c_write+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601ac 	.word	0x080601ac

080a0a98 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <hal_i2c_available+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601ac 	.word	0x080601ac

080a0aa8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <hal_i2c_read+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601ac 	.word	0x080601ac

080a0ab8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <hal_i2c_peek+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601ac 	.word	0x080601ac

080a0ac8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <hal_i2c_flush+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601ac 	.word	0x080601ac

080a0ad8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <hal_i2c_is_enabled+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601ac 	.word	0x080601ac

080a0ae8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b03      	ldr	r3, [pc, #12]	; (80a0af8 <hal_i2c_init+0x10>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0af2:	9301      	str	r3, [sp, #4]
 80a0af4:	bd08      	pop	{r3, pc}
 80a0af6:	0000      	.short	0x0000
 80a0af8:	080601ac 	.word	0x080601ac

080a0afc <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0afc:	b508      	push	{r3, lr}
 80a0afe:	4b02      	ldr	r3, [pc, #8]	; (80a0b08 <socket_active_status+0xc>)
 80a0b00:	681b      	ldr	r3, [r3, #0]
 80a0b02:	681b      	ldr	r3, [r3, #0]
 80a0b04:	9301      	str	r3, [sp, #4]
 80a0b06:	bd08      	pop	{r3, pc}
 80a0b08:	080601bc 	.word	0x080601bc

080a0b0c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0b0c:	b508      	push	{r3, lr}
 80a0b0e:	4b02      	ldr	r3, [pc, #8]	; (80a0b18 <socket_handle_valid+0xc>)
 80a0b10:	681b      	ldr	r3, [r3, #0]
 80a0b12:	685b      	ldr	r3, [r3, #4]
 80a0b14:	9301      	str	r3, [sp, #4]
 80a0b16:	bd08      	pop	{r3, pc}
 80a0b18:	080601bc 	.word	0x080601bc

080a0b1c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0b1c:	b508      	push	{r3, lr}
 80a0b1e:	4b02      	ldr	r3, [pc, #8]	; (80a0b28 <socket_create+0xc>)
 80a0b20:	681b      	ldr	r3, [r3, #0]
 80a0b22:	689b      	ldr	r3, [r3, #8]
 80a0b24:	9301      	str	r3, [sp, #4]
 80a0b26:	bd08      	pop	{r3, pc}
 80a0b28:	080601bc 	.word	0x080601bc

080a0b2c <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0b2c:	b508      	push	{r3, lr}
 80a0b2e:	4b02      	ldr	r3, [pc, #8]	; (80a0b38 <socket_connect+0xc>)
 80a0b30:	681b      	ldr	r3, [r3, #0]
 80a0b32:	68db      	ldr	r3, [r3, #12]
 80a0b34:	9301      	str	r3, [sp, #4]
 80a0b36:	bd08      	pop	{r3, pc}
 80a0b38:	080601bc 	.word	0x080601bc

080a0b3c <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0b3c:	b508      	push	{r3, lr}
 80a0b3e:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <socket_receive+0xc>)
 80a0b40:	681b      	ldr	r3, [r3, #0]
 80a0b42:	691b      	ldr	r3, [r3, #16]
 80a0b44:	9301      	str	r3, [sp, #4]
 80a0b46:	bd08      	pop	{r3, pc}
 80a0b48:	080601bc 	.word	0x080601bc

080a0b4c <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <socket_close+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	6a1b      	ldr	r3, [r3, #32]
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601bc 	.word	0x080601bc

080a0b5c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b02      	ldr	r3, [pc, #8]	; (80a0b68 <socket_handle_invalid+0xc>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b64:	9301      	str	r3, [sp, #4]
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	080601bc 	.word	0x080601bc

080a0b6c <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <socket_send_ex+0xc>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0b74:	9301      	str	r3, [sp, #4]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	080601bc 	.word	0x080601bc

080a0b7c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0b7c:	b508      	push	{r3, lr}
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <hal_spi_init+0xc>)
 80a0b80:	681b      	ldr	r3, [r3, #0]
 80a0b82:	69db      	ldr	r3, [r3, #28]
 80a0b84:	9301      	str	r3, [sp, #4]
 80a0b86:	bd08      	pop	{r3, pc}
 80a0b88:	080601b4 	.word	0x080601b4

080a0b8c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <hal_spi_is_enabled+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	6a1b      	ldr	r3, [r3, #32]
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	080601b4 	.word	0x080601b4

080a0b9c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <hal_usart_write+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	080601c4 	.word	0x080601c4

080a0bac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <hal_usart_available+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	080601c4 	.word	0x080601c4

080a0bbc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <hal_usart_read+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601c4 	.word	0x080601c4

080a0bcc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <hal_usart_peek+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601c4 	.word	0x080601c4

080a0bdc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <hal_usart_flush+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601c4 	.word	0x080601c4

080a0bec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <hal_usart_is_enabled+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601c4 	.word	0x080601c4

080a0bfc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <hal_usart_available_data_for_write+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601c4 	.word	0x080601c4

080a0c0c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <hal_usart_init_ex+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601c4 	.word	0x080601c4

080a0c1c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <HAL_USB_USART_Init+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	681b      	ldr	r3, [r3, #0]
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601d8 	.word	0x080601d8

080a0c2c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <HAL_USB_USART_Available_Data+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	691b      	ldr	r3, [r3, #16]
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601d8 	.word	0x080601d8

080a0c3c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	695b      	ldr	r3, [r3, #20]
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601d8 	.word	0x080601d8

080a0c4c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <HAL_USB_USART_Receive_Data+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	699b      	ldr	r3, [r3, #24]
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601d8 	.word	0x080601d8

080a0c5c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <HAL_USB_USART_Send_Data+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	69db      	ldr	r3, [r3, #28]
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601d8 	.word	0x080601d8

080a0c6c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <HAL_USB_USART_Flush_Data+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6a1b      	ldr	r3, [r3, #32]
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601d8 	.word	0x080601d8

080a0c7c <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <HAL_NET_SetNetWatchDog+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601c0 	.word	0x080601c0

080a0c8c <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <inet_gethostbyname+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601c0 	.word	0x080601c0

080a0c9c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ca8 <log_message+0xc>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0ca4:	9301      	str	r3, [sp, #4]
 80a0ca6:	bd08      	pop	{r3, pc}
 80a0ca8:	080201a8 	.word	0x080201a8

080a0cac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <set_system_mode+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	685b      	ldr	r3, [r3, #4]
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	080601a4 	.word	0x080601a4

080a0cbc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <system_delay_ms+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	695b      	ldr	r3, [r3, #20]
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601a4 	.word	0x080601a4

080a0ccc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <application_thread_current+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601a4 	.word	0x080601a4

080a0cdc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <application_thread_invoke+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601a4 	.word	0x080601a4

080a0cec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b03      	ldr	r3, [pc, #12]	; (80a0cfc <system_ctrl_set_app_request_handler+0x10>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0cf6:	9301      	str	r3, [sp, #4]
 80a0cf8:	bd08      	pop	{r3, pc}
 80a0cfa:	0000      	.short	0x0000
 80a0cfc:	080601a4 	.word	0x080601a4

080a0d00 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0d00:	b508      	push	{r3, lr}
 80a0d02:	4b03      	ldr	r3, [pc, #12]	; (80a0d10 <system_ctrl_set_result+0x10>)
 80a0d04:	681b      	ldr	r3, [r3, #0]
 80a0d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0d0a:	9301      	str	r3, [sp, #4]
 80a0d0c:	bd08      	pop	{r3, pc}
 80a0d0e:	0000      	.short	0x0000
 80a0d10:	080601a4 	.word	0x080601a4

080a0d14 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b02      	ldr	r3, [pc, #8]	; (80a0d20 <spark_cloud_flag_connected+0xc>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	695b      	ldr	r3, [r3, #20]
 80a0d1c:	9301      	str	r3, [sp, #4]
 80a0d1e:	bd08      	pop	{r3, pc}
 80a0d20:	080601cc 	.word	0x080601cc

080a0d24 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0d24:	b508      	push	{r3, lr}
 80a0d26:	4b02      	ldr	r3, [pc, #8]	; (80a0d30 <spark_send_event+0xc>)
 80a0d28:	681b      	ldr	r3, [r3, #0]
 80a0d2a:	6a1b      	ldr	r3, [r3, #32]
 80a0d2c:	9301      	str	r3, [sp, #4]
 80a0d2e:	bd08      	pop	{r3, pc}
 80a0d30:	080601cc 	.word	0x080601cc

080a0d34 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0d3c:	9301      	str	r3, [sp, #4]
 80a0d3e:	bd08      	pop	{r3, pc}
 80a0d40:	080601cc 	.word	0x080601cc

080a0d44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d44:	b508      	push	{r3, lr}
 80a0d46:	4b02      	ldr	r3, [pc, #8]	; (80a0d50 <network_connect+0xc>)
 80a0d48:	681b      	ldr	r3, [r3, #0]
 80a0d4a:	685b      	ldr	r3, [r3, #4]
 80a0d4c:	9301      	str	r3, [sp, #4]
 80a0d4e:	bd08      	pop	{r3, pc}
 80a0d50:	080601c8 	.word	0x080601c8

080a0d54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0d54:	b508      	push	{r3, lr}
 80a0d56:	4b02      	ldr	r3, [pc, #8]	; (80a0d60 <network_connecting+0xc>)
 80a0d58:	681b      	ldr	r3, [r3, #0]
 80a0d5a:	689b      	ldr	r3, [r3, #8]
 80a0d5c:	9301      	str	r3, [sp, #4]
 80a0d5e:	bd08      	pop	{r3, pc}
 80a0d60:	080601c8 	.word	0x080601c8

080a0d64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <network_disconnect+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	68db      	ldr	r3, [r3, #12]
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601c8 	.word	0x080601c8

080a0d74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <network_ready+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	691b      	ldr	r3, [r3, #16]
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601c8 	.word	0x080601c8

080a0d84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <network_on+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	695b      	ldr	r3, [r3, #20]
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601c8 	.word	0x080601c8

080a0d94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d94:	b508      	push	{r3, lr}
 80a0d96:	4b02      	ldr	r3, [pc, #8]	; (80a0da0 <network_off+0xc>)
 80a0d98:	681b      	ldr	r3, [r3, #0]
 80a0d9a:	699b      	ldr	r3, [r3, #24]
 80a0d9c:	9301      	str	r3, [sp, #4]
 80a0d9e:	bd08      	pop	{r3, pc}
 80a0da0:	080601c8 	.word	0x080601c8

080a0da4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0da4:	b508      	push	{r3, lr}
 80a0da6:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <network_listen+0xc>)
 80a0da8:	681b      	ldr	r3, [r3, #0]
 80a0daa:	69db      	ldr	r3, [r3, #28]
 80a0dac:	9301      	str	r3, [sp, #4]
 80a0dae:	bd08      	pop	{r3, pc}
 80a0db0:	080601c8 	.word	0x080601c8

080a0db4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0db4:	b508      	push	{r3, lr}
 80a0db6:	4b02      	ldr	r3, [pc, #8]	; (80a0dc0 <network_listening+0xc>)
 80a0db8:	681b      	ldr	r3, [r3, #0]
 80a0dba:	6a1b      	ldr	r3, [r3, #32]
 80a0dbc:	9301      	str	r3, [sp, #4]
 80a0dbe:	bd08      	pop	{r3, pc}
 80a0dc0:	080601c8 	.word	0x080601c8

080a0dc4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0dc4:	b508      	push	{r3, lr}
 80a0dc6:	4b02      	ldr	r3, [pc, #8]	; (80a0dd0 <network_set_listen_timeout+0xc>)
 80a0dc8:	681b      	ldr	r3, [r3, #0]
 80a0dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0dcc:	9301      	str	r3, [sp, #4]
 80a0dce:	bd08      	pop	{r3, pc}
 80a0dd0:	080601c8 	.word	0x080601c8

080a0dd4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0dd4:	b508      	push	{r3, lr}
 80a0dd6:	4b02      	ldr	r3, [pc, #8]	; (80a0de0 <network_get_listen_timeout+0xc>)
 80a0dd8:	681b      	ldr	r3, [r3, #0]
 80a0dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ddc:	9301      	str	r3, [sp, #4]
 80a0dde:	bd08      	pop	{r3, pc}
 80a0de0:	080601c8 	.word	0x080601c8

080a0de4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0de4:	b508      	push	{r3, lr}
 80a0de6:	4b02      	ldr	r3, [pc, #8]	; (80a0df0 <network_is_on+0xc>)
 80a0de8:	681b      	ldr	r3, [r3, #0]
 80a0dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0dec:	9301      	str	r3, [sp, #4]
 80a0dee:	bd08      	pop	{r3, pc}
 80a0df0:	080601c8 	.word	0x080601c8

080a0df4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0df4:	b508      	push	{r3, lr}
 80a0df6:	4b02      	ldr	r3, [pc, #8]	; (80a0e00 <network_is_off+0xc>)
 80a0df8:	681b      	ldr	r3, [r3, #0]
 80a0dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0dfc:	9301      	str	r3, [sp, #4]
 80a0dfe:	bd08      	pop	{r3, pc}
 80a0e00:	080601c8 	.word	0x080601c8

080a0e04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0e04:	b508      	push	{r3, lr}
 80a0e06:	4b02      	ldr	r3, [pc, #8]	; (80a0e10 <malloc+0xc>)
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	681b      	ldr	r3, [r3, #0]
 80a0e0c:	9301      	str	r3, [sp, #4]
 80a0e0e:	bd08      	pop	{r3, pc}
 80a0e10:	080601a0 	.word	0x080601a0

080a0e14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0e14:	b508      	push	{r3, lr}
 80a0e16:	4b02      	ldr	r3, [pc, #8]	; (80a0e20 <free+0xc>)
 80a0e18:	681b      	ldr	r3, [r3, #0]
 80a0e1a:	685b      	ldr	r3, [r3, #4]
 80a0e1c:	9301      	str	r3, [sp, #4]
 80a0e1e:	bd08      	pop	{r3, pc}
 80a0e20:	080601a0 	.word	0x080601a0

080a0e24 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0e24:	b508      	push	{r3, lr}
 80a0e26:	4b02      	ldr	r3, [pc, #8]	; (80a0e30 <realloc+0xc>)
 80a0e28:	681b      	ldr	r3, [r3, #0]
 80a0e2a:	689b      	ldr	r3, [r3, #8]
 80a0e2c:	9301      	str	r3, [sp, #4]
 80a0e2e:	bd08      	pop	{r3, pc}
 80a0e30:	080601a0 	.word	0x080601a0

080a0e34 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0e34:	b508      	push	{r3, lr}
 80a0e36:	4b02      	ldr	r3, [pc, #8]	; (80a0e40 <abort+0xc>)
 80a0e38:	681b      	ldr	r3, [r3, #0]
 80a0e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e3c:	9301      	str	r3, [sp, #4]
 80a0e3e:	bd08      	pop	{r3, pc}
 80a0e40:	080601a0 	.word	0x080601a0

080a0e44 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0e44:	b508      	push	{r3, lr}
 80a0e46:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <_malloc_r+0xc>)
 80a0e48:	681b      	ldr	r3, [r3, #0]
 80a0e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e4c:	9301      	str	r3, [sp, #4]
 80a0e4e:	bd08      	pop	{r3, pc}
 80a0e50:	080601a0 	.word	0x080601a0

080a0e54 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0e54:	b508      	push	{r3, lr}
 80a0e56:	4b02      	ldr	r3, [pc, #8]	; (80a0e60 <__assert_func+0xc>)
 80a0e58:	681b      	ldr	r3, [r3, #0]
 80a0e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0e5c:	9301      	str	r3, [sp, #4]
 80a0e5e:	bd08      	pop	{r3, pc}
 80a0e60:	080601a0 	.word	0x080601a0

080a0e64 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0e64:	b508      	push	{r3, lr}
 80a0e66:	4b02      	ldr	r3, [pc, #8]	; (80a0e70 <newlib_impure_ptr_callback+0xc>)
 80a0e68:	681b      	ldr	r3, [r3, #0]
 80a0e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e6c:	9301      	str	r3, [sp, #4]
 80a0e6e:	bd08      	pop	{r3, pc}
 80a0e70:	080601a0 	.word	0x080601a0

080a0e74 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0e74:	2100      	movs	r1, #0
 80a0e76:	f7ff bf21 	b.w	80a0cbc <system_delay_ms>

080a0e7a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0e7a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e7c:	6883      	ldr	r3, [r0, #8]
 80a0e7e:	4604      	mov	r4, r0
 80a0e80:	b90b      	cbnz	r3, 80a0e86 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0e82:	f001 fb1d 	bl	80a24c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e86:	68c3      	ldr	r3, [r0, #12]
 80a0e88:	4798      	blx	r3
      if (_M_manager)
 80a0e8a:	68a3      	ldr	r3, [r4, #8]
 80a0e8c:	b11b      	cbz	r3, 80a0e96 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e8e:	2203      	movs	r2, #3
 80a0e90:	4621      	mov	r1, r4
 80a0e92:	4620      	mov	r0, r4
 80a0e94:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0e96:	4620      	mov	r0, r4
}
 80a0e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a0e9c:	2110      	movs	r1, #16
 80a0e9e:	f7ff b900 	b.w	80a00a2 <_ZdlPvj>

080a0ea2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ea2:	4770      	bx	lr

080a0ea4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0ea4:	2000      	movs	r0, #0
 80a0ea6:	4770      	bx	lr

080a0ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ea8:	b510      	push	{r4, lr}
 80a0eaa:	4604      	mov	r4, r0
 80a0eac:	2110      	movs	r1, #16
 80a0eae:	f7ff f8f8 	bl	80a00a2 <_ZdlPvj>
 80a0eb2:	4620      	mov	r0, r4
 80a0eb4:	bd10      	pop	{r4, pc}

080a0eb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0eb6:	b508      	push	{r3, lr}
      { delete this; }
 80a0eb8:	f7ff fff6 	bl	80a0ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0ebc:	bd08      	pop	{r3, pc}

080a0ebe <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0ebe:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0ec0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0ec2:	4604      	mov	r4, r0
      if (_M_manager)
 80a0ec4:	b113      	cbz	r3, 80a0ecc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ec6:	2203      	movs	r2, #3
 80a0ec8:	4601      	mov	r1, r0
 80a0eca:	4798      	blx	r3
    }
 80a0ecc:	4620      	mov	r0, r4
 80a0ece:	bd10      	pop	{r4, pc}

080a0ed0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0ed0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0ed2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0ed4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0ed8:	6002      	str	r2, [r0, #0]
 80a0eda:	8084      	strh	r4, [r0, #4]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0edc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ede:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0ee0:	680c      	ldr	r4, [r1, #0]
 80a0ee2:	8085      	strh	r5, [r0, #4]
 80a0ee4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ee6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0ee8:	bd30      	pop	{r4, r5, pc}

080a0eea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0eea:	b510      	push	{r4, lr}
 80a0eec:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0eee:	6800      	ldr	r0, [r0, #0]
 80a0ef0:	f7ff ff90 	bl	80a0e14 <free>
}
 80a0ef4:	4620      	mov	r0, r4
 80a0ef6:	bd10      	pop	{r4, pc}

080a0ef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0ef8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0efa:	68c4      	ldr	r4, [r0, #12]
 80a0efc:	b1f4      	cbz	r4, 80a0f3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a0efe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0f00:	2b02      	cmp	r3, #2
 80a0f02:	d103      	bne.n	80a0f0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0f04:	f104 000c 	add.w	r0, r4, #12
 80a0f08:	f7ff ffef 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0f0c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0f0e:	b135      	cbz	r5, 80a0f1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a0f10:	4628      	mov	r0, r5
 80a0f12:	f7ff ffd4 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
 80a0f16:	2110      	movs	r1, #16
 80a0f18:	4628      	mov	r0, r5
 80a0f1a:	f7ff f8c2 	bl	80a00a2 <_ZdlPvj>
 80a0f1e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0f20:	b135      	cbz	r5, 80a0f30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0f22:	4628      	mov	r0, r5
 80a0f24:	f7ff ffcb 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
 80a0f28:	2110      	movs	r1, #16
 80a0f2a:	4628      	mov	r0, r5
 80a0f2c:	f7ff f8b9 	bl	80a00a2 <_ZdlPvj>
 80a0f30:	4620      	mov	r0, r4
 80a0f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0f36:	2114      	movs	r1, #20
 80a0f38:	f7ff b8b3 	b.w	80a00a2 <_ZdlPvj>
 80a0f3c:	bd38      	pop	{r3, r4, r5, pc}

080a0f3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0f3e:	680b      	ldr	r3, [r1, #0]
 80a0f40:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a0f42:	684b      	ldr	r3, [r1, #4]
 80a0f44:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a0f46:	b113      	cbz	r3, 80a0f4e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a0f48:	685a      	ldr	r2, [r3, #4]
 80a0f4a:	3201      	adds	r2, #1
 80a0f4c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0f4e:	4770      	bx	lr

080a0f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f52:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a0f54:	4668      	mov	r0, sp
 80a0f56:	460d      	mov	r5, r1
 80a0f58:	f7ff fff1 	bl	80a0f3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0f5c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0f5e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0f60:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0f62:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0f64:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0f66:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0f68:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0f6a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0f6c:	f7ff f8b2 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0f70:	b135      	cbz	r5, 80a0f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a0f72:	1d28      	adds	r0, r5, #4
 80a0f74:	f7ff f8ae 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0f78:	2108      	movs	r1, #8
 80a0f7a:	4628      	mov	r0, r5
 80a0f7c:	f7ff f891 	bl	80a00a2 <_ZdlPvj>
        return p;
    }
 80a0f80:	4620      	mov	r0, r4
 80a0f82:	b003      	add	sp, #12
 80a0f84:	bd30      	pop	{r4, r5, pc}

080a0f86 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a0f86:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f88:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0f8a:	460b      	mov	r3, r1
 80a0f8c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f8e:	c803      	ldmia	r0, {r0, r1}
 80a0f90:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0f94:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0f98:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0fa0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0fa4:	b002      	add	sp, #8
 80a0fa6:	bd10      	pop	{r4, pc}

080a0fa8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a0fa8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0faa:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0fac:	b90a      	cbnz	r2, 80a0fb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0fae:	f001 fa87 	bl	80a24c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fb2:	68c3      	ldr	r3, [r0, #12]
    }
 80a0fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fb8:	4718      	bx	r3

080a0fba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0fba:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0fbc:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0fbe:	f100 0110 	add.w	r1, r0, #16
 80a0fc2:	f7ff fff1 	bl	80a0fa8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a0fc6:	bd08      	pop	{r3, pc}

080a0fc8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a0fc8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0fca:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0fcc:	b90a      	cbnz	r2, 80a0fd2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0fce:	f001 fa77 	bl	80a24c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fd2:	68c3      	ldr	r3, [r0, #12]
    }
 80a0fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fd8:	4718      	bx	r3

080a0fda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0fda:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0fdc:	6800      	ldr	r0, [r0, #0]
 80a0fde:	f100 0110 	add.w	r1, r0, #16
 80a0fe2:	f7ff fff1 	bl	80a0fc8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a0fe6:	bd08      	pop	{r3, pc}

080a0fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0fe8:	b538      	push	{r3, r4, r5, lr}
 80a0fea:	2300      	movs	r3, #0
 80a0fec:	4604      	mov	r4, r0
 80a0fee:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0ff0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0ff2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0ff4:	f7ff f84f 	bl	80a0096 <_Znwj>
 80a0ff8:	b128      	cbz	r0, 80a1006 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0ffa:	2301      	movs	r3, #1
 80a0ffc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a1000:	4b02      	ldr	r3, [pc, #8]	; (80a100c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1002:	60c5      	str	r5, [r0, #12]
 80a1004:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1006:	6020      	str	r0, [r4, #0]
	}
 80a1008:	4620      	mov	r0, r4
 80a100a:	bd38      	pop	{r3, r4, r5, pc}
 80a100c:	080a2e2c 	.word	0x080a2e2c

080a1010 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a1010:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a1012:	2300      	movs	r3, #0
 80a1014:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a1016:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a1018:	4604      	mov	r4, r0
 80a101a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a101c:	b12b      	cbz	r3, 80a102a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a101e:	2202      	movs	r2, #2
 80a1020:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1022:	68eb      	ldr	r3, [r5, #12]
 80a1024:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1026:	68ab      	ldr	r3, [r5, #8]
 80a1028:	60a3      	str	r3, [r4, #8]
    }
 80a102a:	4620      	mov	r0, r4
 80a102c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a1030:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1032:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a1034:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1036:	4668      	mov	r0, sp
 80a1038:	f7ff ff4a 	bl	80a0ed0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a103c:	f04f 0302 	mov.w	r3, #2
 80a1040:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a1044:	2a00      	cmp	r2, #0
 80a1046:	d103      	bne.n	80a1050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1048:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a104c:	2900      	cmp	r1, #0
 80a104e:	d1f7      	bne.n	80a1040 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a1050:	d125      	bne.n	80a109e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a1052:	f104 050c 	add.w	r5, r4, #12
 80a1056:	4669      	mov	r1, sp
 80a1058:	4628      	mov	r0, r5
 80a105a:	f7ff ff39 	bl	80a0ed0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a105e:	2301      	movs	r3, #1
 80a1060:	f3bf 8f5b 	dmb	ish
 80a1064:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1066:	2000      	movs	r0, #0
 80a1068:	f3bf 8f5b 	dmb	ish
 80a106c:	f104 0308 	add.w	r3, r4, #8
 80a1070:	e853 6f00 	ldrex	r6, [r3]
 80a1074:	e843 0200 	strex	r2, r0, [r3]
 80a1078:	2a00      	cmp	r2, #0
 80a107a:	d1f9      	bne.n	80a1070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a107c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1080:	b16e      	cbz	r6, 80a109e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a1082:	f7ff fe23 	bl	80a0ccc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1086:	b178      	cbz	r0, 80a10a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1088:	4629      	mov	r1, r5
 80a108a:	4630      	mov	r0, r6
 80a108c:	f7ff ff8c 	bl	80a0fa8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a1090:	4630      	mov	r0, r6
 80a1092:	f7ff ff14 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a1096:	2110      	movs	r1, #16
 80a1098:	4630      	mov	r0, r6
 80a109a:	f7ff f802 	bl	80a00a2 <_ZdlPvj>
        p_->setError(std::move(error));
 80a109e:	4668      	mov	r0, sp
 80a10a0:	f7ff ff23 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
    }
 80a10a4:	b009      	add	sp, #36	; 0x24
 80a10a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a10a8:	4631      	mov	r1, r6
 80a10aa:	a802      	add	r0, sp, #8
 80a10ac:	f7ff ffb0 	bl	80a1010 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a10b0:	68e0      	ldr	r0, [r4, #12]
 80a10b2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a10b6:	b108      	cbz	r0, 80a10bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a10b8:	f001 fdba 	bl	80a2c30 <strdup>
        type_(type) {
 80a10bc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a10be:	2010      	movs	r0, #16
 80a10c0:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a10c4:	f7fe ffe7 	bl	80a0096 <_Znwj>
 80a10c8:	4605      	mov	r5, r0
 80a10ca:	b1e8      	cbz	r0, 80a1108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a10cc:	2700      	movs	r7, #0
 80a10ce:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a10d0:	2018      	movs	r0, #24
 80a10d2:	f7fe ffe0 	bl	80a0096 <_Znwj>
 80a10d6:	4604      	mov	r4, r0
 80a10d8:	b188      	cbz	r0, 80a10fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a10da:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a10dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a10de:	a802      	add	r0, sp, #8
 80a10e0:	f7ff ff51 	bl	80a0f86 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a10e4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a10e6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10e8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a10ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a10ec:	9204      	str	r2, [sp, #16]
 80a10ee:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a10f0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a10f2:	60e3      	str	r3, [r4, #12]
 80a10f4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a10f8:	9205      	str	r2, [sp, #20]
 80a10fa:	f7ff fee9 	bl	80a0ed0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a10fe:	4b08      	ldr	r3, [pc, #32]	; (80a1120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1100:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1102:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1104:	4b07      	ldr	r3, [pc, #28]	; (80a1124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a1106:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a1108:	a806      	add	r0, sp, #24
 80a110a:	f7ff feee 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a110e:	a802      	add	r0, sp, #8
 80a1110:	f7ff fed5 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1114:	2200      	movs	r2, #0
 80a1116:	4629      	mov	r1, r5
 80a1118:	4803      	ldr	r0, [pc, #12]	; (80a1128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a111a:	f7ff fddf 	bl	80a0cdc <application_thread_invoke>
 80a111e:	e7b7      	b.n	80a1090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a1120:	080a0fbb 	.word	0x080a0fbb
 80a1124:	080a1245 	.word	0x080a1245
 80a1128:	080a0e7b 	.word	0x080a0e7b

080a112c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1130:	b08a      	sub	sp, #40	; 0x28
 80a1132:	4605      	mov	r5, r0
 80a1134:	460c      	mov	r4, r1
 80a1136:	4617      	mov	r7, r2
 80a1138:	4698      	mov	r8, r3
 80a113a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a113e:	f7ff fde9 	bl	80a0d14 <spark_cloud_flag_connected>
 80a1142:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a1144:	4682      	mov	sl, r0
 80a1146:	bb38      	cbnz	r0, 80a1198 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a1148:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a114c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a114e:	a905      	add	r1, sp, #20
 80a1150:	4630      	mov	r0, r6
 80a1152:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1156:	f7ff febb 	bl	80a0ed0 <_ZN8particle5ErrorC1EOS0_>
 80a115a:	2014      	movs	r0, #20
 80a115c:	f7fe ff9b 	bl	80a0096 <_Znwj>
 80a1160:	4604      	mov	r4, r0
 80a1162:	b148      	cbz	r0, 80a1178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1164:	2302      	movs	r3, #2
 80a1166:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1168:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a116a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a116e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a1170:	4631      	mov	r1, r6
 80a1172:	300c      	adds	r0, #12
 80a1174:	f7ff feac 	bl	80a0ed0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a1178:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a117a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a117c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a1180:	f7ff ff32 	bl	80a0fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1184:	4630      	mov	r0, r6
 80a1186:	f7ff feb0 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a118a:	a805      	add	r0, sp, #20
 80a118c:	f7ff fead 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a1190:	4628      	mov	r0, r5
 80a1192:	b00a      	add	sp, #40	; 0x28
 80a1194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a1198:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a119a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a119e:	2014      	movs	r0, #20
 80a11a0:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a11a4:	9307      	str	r3, [sp, #28]
 80a11a6:	f7fe ff76 	bl	80a0096 <_Znwj>
 80a11aa:	4601      	mov	r1, r0
 80a11ac:	b128      	cbz	r0, 80a11ba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a11ae:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a11b2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a11b6:	f880 a001 	strb.w	sl, [r0, #1]
 80a11ba:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a11bc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a11be:	f7ff ff13 	bl	80a0fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a11c2:	4b1f      	ldr	r3, [pc, #124]	; (80a1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a11c4:	2008      	movs	r0, #8
 80a11c6:	9308      	str	r3, [sp, #32]
 80a11c8:	f7fe ff65 	bl	80a0096 <_Znwj>
 80a11cc:	4682      	mov	sl, r0
 80a11ce:	b110      	cbz	r0, 80a11d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a11d0:	a903      	add	r1, sp, #12
 80a11d2:	f7ff feb4 	bl	80a0f3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a11d6:	4642      	mov	r2, r8
 80a11d8:	4639      	mov	r1, r7
 80a11da:	4620      	mov	r0, r4
 80a11dc:	9600      	str	r6, [sp, #0]
 80a11de:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a11e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a11e6:	f7ff fd9d 	bl	80a0d24 <spark_send_event>
 80a11ea:	b9b8      	cbnz	r0, 80a121c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a11ec:	9b03      	ldr	r3, [sp, #12]
 80a11ee:	785b      	ldrb	r3, [r3, #1]
 80a11f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a11f4:	b993      	cbnz	r3, 80a121c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a11f6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a11fa:	a905      	add	r1, sp, #20
 80a11fc:	a803      	add	r0, sp, #12
 80a11fe:	9205      	str	r2, [sp, #20]
 80a1200:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1204:	f7ff ff14 	bl	80a1030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1208:	a805      	add	r0, sp, #20
 80a120a:	f7ff fe6e 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a120e:	a805      	add	r0, sp, #20
 80a1210:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1212:	f7ff fe9d 	bl	80a0f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1216:	a806      	add	r0, sp, #24
 80a1218:	f7fe ff5c 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a121c:	a903      	add	r1, sp, #12
 80a121e:	a805      	add	r0, sp, #20
 80a1220:	f7ff fe8d 	bl	80a0f3e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1224:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1226:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1228:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a122a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a122c:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a122e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a1230:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1232:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1234:	f7fe ff4e 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1238:	a804      	add	r0, sp, #16
 80a123a:	f7fe ff4b 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a123e:	e7a7      	b.n	80a1190 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a1240:	080a12c1 	.word	0x080a12c1

080a1244 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a1244:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1248:	4605      	mov	r5, r0
	switch (__op)
 80a124a:	d103      	bne.n	80a1254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a124c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a124e:	6003      	str	r3, [r0, #0]
      }
 80a1250:	2000      	movs	r0, #0
 80a1252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a1254:	2a02      	cmp	r2, #2
 80a1256:	d010      	beq.n	80a127a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a1258:	2a03      	cmp	r2, #3
 80a125a:	d1f9      	bne.n	80a1250 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a125c:	6804      	ldr	r4, [r0, #0]
 80a125e:	2c00      	cmp	r4, #0
 80a1260:	d0f6      	beq.n	80a1250 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a1262:	f104 0010 	add.w	r0, r4, #16
 80a1266:	f7ff fe40 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a126a:	4620      	mov	r0, r4
 80a126c:	f7ff fe27 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1270:	2118      	movs	r1, #24
 80a1272:	4620      	mov	r0, r4
 80a1274:	f7fe ff15 	bl	80a00a2 <_ZdlPvj>
 80a1278:	e7ea      	b.n	80a1250 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a127a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a127c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a127e:	f7fe ff0a 	bl	80a0096 <_Znwj>
 80a1282:	4604      	mov	r4, r0
 80a1284:	b150      	cbz	r0, 80a129c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1286:	4631      	mov	r1, r6
 80a1288:	f7ff fec2 	bl	80a1010 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a128c:	6930      	ldr	r0, [r6, #16]
 80a128e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1292:	b108      	cbz	r0, 80a1298 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a1294:	f001 fccc 	bl	80a2c30 <strdup>
        type_(type) {
 80a1298:	6120      	str	r0, [r4, #16]
 80a129a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a129c:	602c      	str	r4, [r5, #0]
	}
 80a129e:	e7d7      	b.n	80a1250 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a12a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a12a0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a12a2:	2300      	movs	r3, #0
 80a12a4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a12a6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a12a8:	4604      	mov	r4, r0
 80a12aa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a12ac:	b12b      	cbz	r3, 80a12ba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a12ae:	2202      	movs	r2, #2
 80a12b0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a12b2:	68eb      	ldr	r3, [r5, #12]
 80a12b4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a12b6:	68ab      	ldr	r3, [r5, #8]
 80a12b8:	60a3      	str	r3, [r4, #8]
    }
 80a12ba:	4620      	mov	r0, r4
 80a12bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a12c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a12c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12c2:	4604      	mov	r4, r0
 80a12c4:	b089      	sub	sp, #36	; 0x24
 80a12c6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a12c8:	a801      	add	r0, sp, #4
 80a12ca:	4611      	mov	r1, r2
 80a12cc:	f7ff fe40 	bl	80a0f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a12d0:	b1a4      	cbz	r4, 80a12fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a12d2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a12d4:	b11d      	cbz	r5, 80a12de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a12d6:	4628      	mov	r0, r5
 80a12d8:	f001 fcaa 	bl	80a2c30 <strdup>
 80a12dc:	4605      	mov	r5, r0
 80a12de:	a801      	add	r0, sp, #4
 80a12e0:	a903      	add	r1, sp, #12
        type_(type) {
 80a12e2:	9503      	str	r5, [sp, #12]
 80a12e4:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a12e8:	f7ff fea2 	bl	80a1030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a12ec:	a803      	add	r0, sp, #12
 80a12ee:	f7ff fdfc 	bl	80a0eea <_ZN8particle5ErrorD1Ev>
 80a12f2:	a802      	add	r0, sp, #8
 80a12f4:	f7fe feee 	bl	80a00d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a12f8:	b009      	add	sp, #36	; 0x24
 80a12fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a12fc:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a12fe:	9d01      	ldr	r5, [sp, #4]
 80a1300:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1304:	2a00      	cmp	r2, #0
 80a1306:	d103      	bne.n	80a1310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1308:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a130c:	2900      	cmp	r1, #0
 80a130e:	d1f7      	bne.n	80a1300 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a1310:	d1ef      	bne.n	80a12f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a1312:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1314:	f3bf 8f5b 	dmb	ish
 80a1318:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a131a:	f3bf 8f5b 	dmb	ish
 80a131e:	1d2b      	adds	r3, r5, #4
 80a1320:	e853 6f00 	ldrex	r6, [r3]
 80a1324:	e843 4200 	strex	r2, r4, [r3]
 80a1328:	2a00      	cmp	r2, #0
 80a132a:	d1f9      	bne.n	80a1320 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a132c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a1330:	2e00      	cmp	r6, #0
 80a1332:	d0de      	beq.n	80a12f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1334:	4620      	mov	r0, r4
 80a1336:	f7ff fcc9 	bl	80a0ccc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a133a:	4607      	mov	r7, r0
 80a133c:	b160      	cbz	r0, 80a1358 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a133e:	4630      	mov	r0, r6
 80a1340:	f105 010c 	add.w	r1, r5, #12
 80a1344:	f7ff fe40 	bl	80a0fc8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a1348:	4630      	mov	r0, r6
 80a134a:	f7ff fdb8 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a134e:	2110      	movs	r1, #16
 80a1350:	4630      	mov	r0, r6
 80a1352:	f7fe fea6 	bl	80a00a2 <_ZdlPvj>
 80a1356:	e7cc      	b.n	80a12f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1358:	4631      	mov	r1, r6
 80a135a:	a803      	add	r0, sp, #12
 80a135c:	f7ff ffa0 	bl	80a12a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1360:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1362:	2010      	movs	r0, #16
 80a1364:	f88d 301c 	strb.w	r3, [sp, #28]
 80a1368:	f7fe fe95 	bl	80a0096 <_Znwj>
 80a136c:	4605      	mov	r5, r0
 80a136e:	b1d0      	cbz	r0, 80a13a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a1370:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1372:	2014      	movs	r0, #20
 80a1374:	f7fe fe8f 	bl	80a0096 <_Znwj>
 80a1378:	4604      	mov	r4, r0
 80a137a:	b178      	cbz	r0, 80a139c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a137c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a137e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a1380:	a803      	add	r0, sp, #12
 80a1382:	f7ff fe00 	bl	80a0f86 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1386:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1388:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a138a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a138c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a138e:	9205      	str	r2, [sp, #20]
 80a1390:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1392:	60e3      	str	r3, [r4, #12]
 80a1394:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a1398:	9206      	str	r2, [sp, #24]
 80a139a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a139c:	4b06      	ldr	r3, [pc, #24]	; (80a13b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a139e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a13a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a13a2:	4b06      	ldr	r3, [pc, #24]	; (80a13bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a13a4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a13a6:	a803      	add	r0, sp, #12
 80a13a8:	f7ff fd89 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a13ac:	2200      	movs	r2, #0
 80a13ae:	4629      	mov	r1, r5
 80a13b0:	4803      	ldr	r0, [pc, #12]	; (80a13c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a13b2:	f7ff fc93 	bl	80a0cdc <application_thread_invoke>
 80a13b6:	e7c7      	b.n	80a1348 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a13b8:	080a0fdb 	.word	0x080a0fdb
 80a13bc:	080a13c5 	.word	0x080a13c5
 80a13c0:	080a0e7b 	.word	0x080a0e7b

080a13c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a13c4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a13c6:	b570      	push	{r4, r5, r6, lr}
 80a13c8:	4604      	mov	r4, r0
	switch (__op)
 80a13ca:	d103      	bne.n	80a13d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a13cc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a13ce:	6003      	str	r3, [r0, #0]
      }
 80a13d0:	2000      	movs	r0, #0
 80a13d2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a13d4:	2a02      	cmp	r2, #2
 80a13d6:	d00c      	beq.n	80a13f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a13d8:	2a03      	cmp	r2, #3
 80a13da:	d1f9      	bne.n	80a13d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a13dc:	6804      	ldr	r4, [r0, #0]
 80a13de:	2c00      	cmp	r4, #0
 80a13e0:	d0f6      	beq.n	80a13d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a13e2:	4620      	mov	r0, r4
 80a13e4:	f7ff fd6b 	bl	80a0ebe <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a13e8:	2114      	movs	r1, #20
 80a13ea:	4620      	mov	r0, r4
 80a13ec:	f7fe fe59 	bl	80a00a2 <_ZdlPvj>
 80a13f0:	e7ee      	b.n	80a13d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a13f2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a13f4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a13f6:	f7fe fe4e 	bl	80a0096 <_Znwj>
 80a13fa:	4605      	mov	r5, r0
 80a13fc:	b120      	cbz	r0, 80a1408 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a13fe:	4631      	mov	r1, r6
 80a1400:	f7ff ff4e 	bl	80a12a0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1404:	7c33      	ldrb	r3, [r6, #16]
 80a1406:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1408:	6025      	str	r5, [r4, #0]
	}
 80a140a:	e7e1      	b.n	80a13d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a140c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a140c:	4770      	bx	lr

080a140e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a140e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1410:	4606      	mov	r6, r0
 80a1412:	4615      	mov	r5, r2
 80a1414:	460c      	mov	r4, r1
 80a1416:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1418:	42bc      	cmp	r4, r7
 80a141a:	d006      	beq.n	80a142a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a141c:	6833      	ldr	r3, [r6, #0]
 80a141e:	4630      	mov	r0, r6
 80a1420:	689b      	ldr	r3, [r3, #8]
 80a1422:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1426:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1428:	e7f6      	b.n	80a1418 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a142a:	4628      	mov	r0, r5
 80a142c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a142e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a142e:	2200      	movs	r2, #0
 80a1430:	7c00      	ldrb	r0, [r0, #16]
 80a1432:	f7ff bb29 	b.w	80a0a88 <hal_i2c_write>

080a1436 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1436:	2100      	movs	r1, #0
 80a1438:	7c00      	ldrb	r0, [r0, #16]
 80a143a:	f7ff bb2d 	b.w	80a0a98 <hal_i2c_available>

080a143e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a143e:	2100      	movs	r1, #0
 80a1440:	7c00      	ldrb	r0, [r0, #16]
 80a1442:	f7ff bb31 	b.w	80a0aa8 <hal_i2c_read>

080a1446 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1446:	2100      	movs	r1, #0
 80a1448:	7c00      	ldrb	r0, [r0, #16]
 80a144a:	f7ff bb35 	b.w	80a0ab8 <hal_i2c_peek>

080a144e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a144e:	2100      	movs	r1, #0
 80a1450:	7c00      	ldrb	r0, [r0, #16]
 80a1452:	f7ff bb39 	b.w	80a0ac8 <hal_i2c_flush>

080a1456 <_ZN7TwoWireD0Ev>:
 80a1456:	b510      	push	{r4, lr}
 80a1458:	4604      	mov	r4, r0
 80a145a:	2114      	movs	r1, #20
 80a145c:	f7fe fe21 	bl	80a00a2 <_ZdlPvj>
 80a1460:	4620      	mov	r0, r4
 80a1462:	bd10      	pop	{r4, pc}

080a1464 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1464:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a146a:	4604      	mov	r4, r0
 80a146c:	4608      	mov	r0, r1
 80a146e:	2100      	movs	r1, #0
 80a1470:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1474:	4b03      	ldr	r3, [pc, #12]	; (80a1484 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1476:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1478:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a147a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a147c:	f7ff fb34 	bl	80a0ae8 <hal_i2c_init>
}
 80a1480:	4620      	mov	r0, r4
 80a1482:	bd10      	pop	{r4, pc}
 80a1484:	080a2e48 	.word	0x080a2e48

080a1488 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1488:	4770      	bx	lr

080a148a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a148a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a148c:	460e      	mov	r6, r1
 80a148e:	2400      	movs	r4, #0
 80a1490:	f100 0708 	add.w	r7, r0, #8
 80a1494:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1496:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a149a:	220a      	movs	r2, #10
 80a149c:	4630      	mov	r0, r6
 80a149e:	f000 f912 	bl	80a16c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a14a2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a14a4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a14a6:	d101      	bne.n	80a14ac <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a14ac:	2c00      	cmp	r4, #0
 80a14ae:	d0f2      	beq.n	80a1496 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a14b0:	212e      	movs	r1, #46	; 0x2e
 80a14b2:	4630      	mov	r0, r6
 80a14b4:	f000 f904 	bl	80a16c0 <_ZN5Print5printEc>
 80a14b8:	4404      	add	r4, r0
 80a14ba:	e7ec      	b.n	80a1496 <_ZNK9IPAddress7printToER5Print+0xc>

080a14bc <_ZN9IPAddressD0Ev>:
 80a14bc:	b510      	push	{r4, lr}
 80a14be:	4604      	mov	r4, r0
 80a14c0:	2118      	movs	r1, #24
 80a14c2:	f7fe fdee 	bl	80a00a2 <_ZdlPvj>
 80a14c6:	4620      	mov	r0, r4
 80a14c8:	bd10      	pop	{r4, pc}
	...

080a14cc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a14cc:	b510      	push	{r4, lr}
 80a14ce:	4604      	mov	r4, r0
 80a14d0:	4b04      	ldr	r3, [pc, #16]	; (80a14e4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a14d2:	2211      	movs	r2, #17
 80a14d4:	2100      	movs	r1, #0
 80a14d6:	f840 3b04 	str.w	r3, [r0], #4
 80a14da:	f001 fb61 	bl	80a2ba0 <memset>
}
 80a14de:	4620      	mov	r0, r4
 80a14e0:	bd10      	pop	{r4, pc}
 80a14e2:	bf00      	nop
 80a14e4:	080a2e70 	.word	0x080a2e70

080a14e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a14e8:	4603      	mov	r3, r0
 80a14ea:	4a07      	ldr	r2, [pc, #28]	; (80a1508 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a14ec:	b510      	push	{r4, lr}
 80a14ee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a14f2:	f101 0210 	add.w	r2, r1, #16
 80a14f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a14fa:	4291      	cmp	r1, r2
 80a14fc:	f843 4b04 	str.w	r4, [r3], #4
 80a1500:	d1f9      	bne.n	80a14f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1502:	780a      	ldrb	r2, [r1, #0]
 80a1504:	701a      	strb	r2, [r3, #0]
}
 80a1506:	bd10      	pop	{r4, pc}
 80a1508:	080a2e70 	.word	0x080a2e70

080a150c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a150c:	4a02      	ldr	r2, [pc, #8]	; (80a1518 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a150e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1512:	2204      	movs	r2, #4
 80a1514:	7502      	strb	r2, [r0, #20]
}
 80a1516:	4770      	bx	lr
 80a1518:	080a2e70 	.word	0x080a2e70

080a151c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a151c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a151e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1522:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1526:	2304      	movs	r3, #4
 80a1528:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a152c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1530:	6044      	str	r4, [r0, #4]
 80a1532:	7503      	strb	r3, [r0, #20]
}
 80a1534:	bd10      	pop	{r4, pc}
	...

080a1538 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1538:	b513      	push	{r0, r1, r4, lr}
 80a153a:	4c04      	ldr	r4, [pc, #16]	; (80a154c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a153c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a153e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a1542:	9400      	str	r4, [sp, #0]
 80a1544:	f7ff ffea 	bl	80a151c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1548:	b002      	add	sp, #8
 80a154a:	bd10      	pop	{r4, pc}
 80a154c:	080a2e70 	.word	0x080a2e70

080a1550 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 80a1550:	b507      	push	{r0, r1, r2, lr}
 80a1552:	4b06      	ldr	r3, [pc, #24]	; (80a156c <_ZN9IPAddressC1EPKh+0x1c>)
 80a1554:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 80a1556:	78cb      	ldrb	r3, [r1, #3]
 80a1558:	9300      	str	r3, [sp, #0]
 80a155a:	788b      	ldrb	r3, [r1, #2]
 80a155c:	784a      	ldrb	r2, [r1, #1]
 80a155e:	7809      	ldrb	r1, [r1, #0]
 80a1560:	f7ff ffdc 	bl	80a151c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1564:	b003      	add	sp, #12
 80a1566:	f85d fb04 	ldr.w	pc, [sp], #4
 80a156a:	bf00      	nop
 80a156c:	080a2e70 	.word	0x080a2e70

080a1570 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1570:	4b01      	ldr	r3, [pc, #4]	; (80a1578 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1572:	4a02      	ldr	r2, [pc, #8]	; (80a157c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1574:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1576:	4770      	bx	lr
 80a1578:	20000164 	.word	0x20000164
 80a157c:	080a2e7c 	.word	0x080a2e7c

080a1580 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1580:	2300      	movs	r3, #0
 80a1582:	6840      	ldr	r0, [r0, #4]
 80a1584:	461a      	mov	r2, r3
 80a1586:	f7ff bbdd 	b.w	80a0d44 <network_connect>

080a158a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a158a:	2200      	movs	r2, #0
 80a158c:	2102      	movs	r1, #2
 80a158e:	6840      	ldr	r0, [r0, #4]
 80a1590:	f7ff bbe8 	b.w	80a0d64 <network_disconnect>

080a1594 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1594:	2200      	movs	r2, #0
 80a1596:	6840      	ldr	r0, [r0, #4]
 80a1598:	4611      	mov	r1, r2
 80a159a:	f7ff bbdb 	b.w	80a0d54 <network_connecting>

080a159e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a159e:	2200      	movs	r2, #0
 80a15a0:	6840      	ldr	r0, [r0, #4]
 80a15a2:	4611      	mov	r1, r2
 80a15a4:	f7ff bbe6 	b.w	80a0d74 <network_ready>

080a15a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a15a8:	2300      	movs	r3, #0
 80a15aa:	6840      	ldr	r0, [r0, #4]
 80a15ac:	461a      	mov	r2, r3
 80a15ae:	4619      	mov	r1, r3
 80a15b0:	f7ff bbe8 	b.w	80a0d84 <network_on>

080a15b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a15b4:	2300      	movs	r3, #0
 80a15b6:	6840      	ldr	r0, [r0, #4]
 80a15b8:	461a      	mov	r2, r3
 80a15ba:	4619      	mov	r1, r3
 80a15bc:	f7ff bbea 	b.w	80a0d94 <network_off>

080a15c0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a15c0:	2100      	movs	r1, #0
 80a15c2:	6840      	ldr	r0, [r0, #4]
 80a15c4:	f7ff bc0e 	b.w	80a0de4 <network_is_on>

080a15c8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a15c8:	2100      	movs	r1, #0
 80a15ca:	6840      	ldr	r0, [r0, #4]
 80a15cc:	f7ff bc12 	b.w	80a0df4 <network_is_off>

080a15d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a15d0:	2200      	movs	r2, #0
 80a15d2:	6840      	ldr	r0, [r0, #4]
 80a15d4:	f081 0101 	eor.w	r1, r1, #1
 80a15d8:	f7ff bbe4 	b.w	80a0da4 <network_listen>

080a15dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a15dc:	2200      	movs	r2, #0
 80a15de:	6840      	ldr	r0, [r0, #4]
 80a15e0:	f7ff bbf0 	b.w	80a0dc4 <network_set_listen_timeout>

080a15e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a15e4:	2200      	movs	r2, #0
 80a15e6:	6840      	ldr	r0, [r0, #4]
 80a15e8:	4611      	mov	r1, r2
 80a15ea:	f7ff bbf3 	b.w	80a0dd4 <network_get_listen_timeout>

080a15ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a15ee:	2200      	movs	r2, #0
 80a15f0:	6840      	ldr	r0, [r0, #4]
 80a15f2:	4611      	mov	r1, r2
 80a15f4:	f7ff bbde 	b.w	80a0db4 <network_listening>

080a15f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a15f8:	b570      	push	{r4, r5, r6, lr}
 80a15fa:	4615      	mov	r5, r2
 80a15fc:	b08e      	sub	sp, #56	; 0x38
 80a15fe:	4604      	mov	r4, r0
    IPAddress addr;
 80a1600:	a808      	add	r0, sp, #32
 80a1602:	f7ff ff63 	bl	80a14cc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1606:	2211      	movs	r2, #17
 80a1608:	2100      	movs	r1, #0
 80a160a:	a803      	add	r0, sp, #12
 80a160c:	f001 fac8 	bl	80a2ba0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1610:	2600      	movs	r6, #0
 80a1612:	4628      	mov	r0, r5
 80a1614:	f001 fb27 	bl	80a2c66 <strlen>
 80a1618:	4b0a      	ldr	r3, [pc, #40]	; (80a1644 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a161a:	9600      	str	r6, [sp, #0]
 80a161c:	b281      	uxth	r1, r0
 80a161e:	685b      	ldr	r3, [r3, #4]
 80a1620:	4628      	mov	r0, r5
 80a1622:	aa03      	add	r2, sp, #12
 80a1624:	f7ff fb32 	bl	80a0c8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1628:	b130      	cbz	r0, 80a1638 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a162a:	4631      	mov	r1, r6
 80a162c:	4620      	mov	r0, r4
 80a162e:	f7ff ff6d 	bl	80a150c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1632:	4620      	mov	r0, r4
 80a1634:	b00e      	add	sp, #56	; 0x38
 80a1636:	bd70      	pop	{r4, r5, r6, pc}
 80a1638:	4620      	mov	r0, r4
 80a163a:	a903      	add	r1, sp, #12
 80a163c:	f7ff ff54 	bl	80a14e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1640:	e7f7      	b.n	80a1632 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1642:	bf00      	nop
 80a1644:	200004c8 	.word	0x200004c8

080a1648 <_ZN5spark12NetworkClass4fromEm>:
}
 80a1648:	4a03      	ldr	r2, [pc, #12]	; (80a1658 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a164a:	4b04      	ldr	r3, [pc, #16]	; (80a165c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a164c:	2804      	cmp	r0, #4
 80a164e:	bf14      	ite	ne
 80a1650:	4610      	movne	r0, r2
 80a1652:	4618      	moveq	r0, r3
 80a1654:	4770      	bx	lr
 80a1656:	bf00      	nop
 80a1658:	20000168 	.word	0x20000168
 80a165c:	200004c8 	.word	0x200004c8

080a1660 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1660:	4b02      	ldr	r3, [pc, #8]	; (80a166c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1662:	4a03      	ldr	r2, [pc, #12]	; (80a1670 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1664:	601a      	str	r2, [r3, #0]
 80a1666:	2200      	movs	r2, #0
 80a1668:	605a      	str	r2, [r3, #4]

} // spark
 80a166a:	4770      	bx	lr
 80a166c:	20000168 	.word	0x20000168
 80a1670:	080a2e88 	.word	0x080a2e88

080a1674 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1676:	4606      	mov	r6, r0
 80a1678:	460d      	mov	r5, r1
  size_t n = 0;
 80a167a:	2400      	movs	r4, #0
 80a167c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a167e:	42bd      	cmp	r5, r7
 80a1680:	d00c      	beq.n	80a169c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1682:	6833      	ldr	r3, [r6, #0]
 80a1684:	4630      	mov	r0, r6
 80a1686:	689b      	ldr	r3, [r3, #8]
 80a1688:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a168c:	4798      	blx	r3
     if (chunk>=0)
 80a168e:	1e03      	subs	r3, r0, #0
 80a1690:	db01      	blt.n	80a1696 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1692:	441c      	add	r4, r3
  while (size--) {
 80a1694:	e7f3      	b.n	80a167e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1696:	2c00      	cmp	r4, #0
 80a1698:	bf08      	it	eq
 80a169a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a169c:	4620      	mov	r0, r4
 80a169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a16a0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a16a0:	b570      	push	{r4, r5, r6, lr}
 80a16a2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a16a4:	460c      	mov	r4, r1
    }
 80a16a6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a16a8:	b149      	cbz	r1, 80a16be <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a16aa:	f001 fadc 	bl	80a2c66 <strlen>
 80a16ae:	682b      	ldr	r3, [r5, #0]
 80a16b0:	4602      	mov	r2, r0
 80a16b2:	4621      	mov	r1, r4
 80a16b4:	4628      	mov	r0, r5
    }
 80a16b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a16ba:	68db      	ldr	r3, [r3, #12]
 80a16bc:	4718      	bx	r3
    }
 80a16be:	bd70      	pop	{r4, r5, r6, pc}

080a16c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a16c0:	6803      	ldr	r3, [r0, #0]
 80a16c2:	689b      	ldr	r3, [r3, #8]
 80a16c4:	4718      	bx	r3

080a16c6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a16c6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a16c8:	2a01      	cmp	r2, #1
 80a16ca:	bf98      	it	ls
 80a16cc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a16ce:	b530      	push	{r4, r5, lr}
 80a16d0:	b08b      	sub	sp, #44	; 0x2c
 80a16d2:	460c      	mov	r4, r1
  *str = '\0';
 80a16d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a16d8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a16da:	4625      	mov	r5, r4
 80a16dc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a16e0:	fb04 5312 	mls	r3, r4, r2, r5
 80a16e4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a16e6:	2b09      	cmp	r3, #9
 80a16e8:	bf94      	ite	ls
 80a16ea:	3330      	addls	r3, #48	; 0x30
 80a16ec:	3337      	addhi	r3, #55	; 0x37
 80a16ee:	b2db      	uxtb	r3, r3
  } while(n);
 80a16f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a16f2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a16f6:	d9f0      	bls.n	80a16da <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a16f8:	f7ff ffd2 	bl	80a16a0 <_ZN5Print5writeEPKc>
}
 80a16fc:	b00b      	add	sp, #44	; 0x2c
 80a16fe:	bd30      	pop	{r4, r5, pc}

080a1700 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1700:	2200      	movs	r2, #0
 80a1702:	4b01      	ldr	r3, [pc, #4]	; (80a1708 <_GLOBAL__sub_I_RGB+0x8>)
 80a1704:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1706:	4770      	bx	lr
 80a1708:	20000170 	.word	0x20000170

080a170c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a170c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a170e:	2600      	movs	r6, #0
 80a1710:	4604      	mov	r4, r0
 80a1712:	460d      	mov	r5, r1
 80a1714:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1718:	f7ff f97e 	bl	80a0a18 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a171c:	4628      	mov	r0, r5
    _spi = spi;
 80a171e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1720:	f7ff fa2c 	bl	80a0b7c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1724:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1726:	6066      	str	r6, [r4, #4]
}
 80a1728:	bd70      	pop	{r4, r5, r6, pc}

080a172a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a172a:	b510      	push	{r4, lr}
 80a172c:	4604      	mov	r4, r0
{
	free(buffer);
 80a172e:	6800      	ldr	r0, [r0, #0]
 80a1730:	f7ff fb70 	bl	80a0e14 <free>
}
 80a1734:	4620      	mov	r0, r4
 80a1736:	bd10      	pop	{r4, pc}

080a1738 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1738:	b510      	push	{r4, lr}
 80a173a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a173c:	6800      	ldr	r0, [r0, #0]
 80a173e:	b108      	cbz	r0, 80a1744 <_ZN6String10invalidateEv+0xc>
 80a1740:	f7ff fb68 	bl	80a0e14 <free>
	buffer = NULL;
 80a1744:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1746:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a174a:	6023      	str	r3, [r4, #0]
}
 80a174c:	bd10      	pop	{r4, pc}

080a174e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a174e:	b538      	push	{r3, r4, r5, lr}
 80a1750:	4604      	mov	r4, r0
 80a1752:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1754:	6800      	ldr	r0, [r0, #0]
 80a1756:	3101      	adds	r1, #1
 80a1758:	f7ff fb64 	bl	80a0e24 <realloc>
	if (newbuffer) {
 80a175c:	b110      	cbz	r0, 80a1764 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a175e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1762:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1764:	bd38      	pop	{r3, r4, r5, pc}

080a1766 <_ZN6String7reserveEj>:
{
 80a1766:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1768:	6803      	ldr	r3, [r0, #0]
{
 80a176a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a176c:	b123      	cbz	r3, 80a1778 <_ZN6String7reserveEj+0x12>
 80a176e:	6843      	ldr	r3, [r0, #4]
 80a1770:	428b      	cmp	r3, r1
 80a1772:	d301      	bcc.n	80a1778 <_ZN6String7reserveEj+0x12>
 80a1774:	2001      	movs	r0, #1
}
 80a1776:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1778:	4620      	mov	r0, r4
 80a177a:	f7ff ffe8 	bl	80a174e <_ZN6String12changeBufferEj>
 80a177e:	2800      	cmp	r0, #0
 80a1780:	d0f9      	beq.n	80a1776 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1782:	68a3      	ldr	r3, [r4, #8]
 80a1784:	2b00      	cmp	r3, #0
 80a1786:	d1f5      	bne.n	80a1774 <_ZN6String7reserveEj+0xe>
 80a1788:	6822      	ldr	r2, [r4, #0]
 80a178a:	7013      	strb	r3, [r2, #0]
 80a178c:	e7f2      	b.n	80a1774 <_ZN6String7reserveEj+0xe>

080a178e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a178e:	b570      	push	{r4, r5, r6, lr}
 80a1790:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1792:	4611      	mov	r1, r2
{
 80a1794:	4604      	mov	r4, r0
 80a1796:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1798:	f7ff ffe5 	bl	80a1766 <_ZN6String7reserveEj>
 80a179c:	b920      	cbnz	r0, 80a17a8 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a179e:	4620      	mov	r0, r4
 80a17a0:	f7ff ffca 	bl	80a1738 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a17a4:	4620      	mov	r0, r4
 80a17a6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a17a8:	462a      	mov	r2, r5
 80a17aa:	4631      	mov	r1, r6
 80a17ac:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a17ae:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a17b0:	f001 f9e8 	bl	80a2b84 <memcpy>
	buffer[len] = 0;
 80a17b4:	2100      	movs	r1, #0
 80a17b6:	6822      	ldr	r2, [r4, #0]
 80a17b8:	68a3      	ldr	r3, [r4, #8]
 80a17ba:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a17bc:	e7f2      	b.n	80a17a4 <_ZN6String4copyEPKcj+0x16>

080a17be <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a17be:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a17c0:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a17c2:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a17c4:	460d      	mov	r5, r1
	capacity = 0;
 80a17c6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a17ca:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a17cc:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a17ce:	b139      	cbz	r1, 80a17e0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a17d0:	4608      	mov	r0, r1
 80a17d2:	f001 fa48 	bl	80a2c66 <strlen>
 80a17d6:	4629      	mov	r1, r5
 80a17d8:	4602      	mov	r2, r0
 80a17da:	4620      	mov	r0, r4
 80a17dc:	f7ff ffd7 	bl	80a178e <_ZN6String4copyEPKcj>
}
 80a17e0:	4620      	mov	r0, r4
 80a17e2:	bd38      	pop	{r3, r4, r5, pc}

080a17e4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a17e4:	4288      	cmp	r0, r1
{
 80a17e6:	b510      	push	{r4, lr}
 80a17e8:	460b      	mov	r3, r1
 80a17ea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a17ec:	d004      	beq.n	80a17f8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a17ee:	6809      	ldr	r1, [r1, #0]
 80a17f0:	b121      	cbz	r1, 80a17fc <_ZN6StringaSERKS_+0x18>
 80a17f2:	689a      	ldr	r2, [r3, #8]
 80a17f4:	f7ff ffcb 	bl	80a178e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a17f8:	4620      	mov	r0, r4
 80a17fa:	bd10      	pop	{r4, pc}
	else invalidate();
 80a17fc:	f7ff ff9c 	bl	80a1738 <_ZN6String10invalidateEv>
 80a1800:	e7fa      	b.n	80a17f8 <_ZN6StringaSERKS_+0x14>

080a1802 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1802:	2300      	movs	r3, #0
String::String(const String &value)
 80a1804:	b510      	push	{r4, lr}
 80a1806:	4604      	mov	r4, r0
	capacity = 0;
 80a1808:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a180c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a180e:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1810:	f7ff ffe8 	bl	80a17e4 <_ZN6StringaSERKS_>
}
 80a1814:	4620      	mov	r0, r4
 80a1816:	bd10      	pop	{r4, pc}

080a1818 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1818:	b538      	push	{r3, r4, r5, lr}
 80a181a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a181c:	460c      	mov	r4, r1
 80a181e:	b149      	cbz	r1, 80a1834 <_ZN6StringaSEPKc+0x1c>
 80a1820:	4608      	mov	r0, r1
 80a1822:	f001 fa20 	bl	80a2c66 <strlen>
 80a1826:	4621      	mov	r1, r4
 80a1828:	4602      	mov	r2, r0
 80a182a:	4628      	mov	r0, r5
 80a182c:	f7ff ffaf 	bl	80a178e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1830:	4628      	mov	r0, r5
 80a1832:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1834:	f7ff ff80 	bl	80a1738 <_ZN6String10invalidateEv>
 80a1838:	e7fa      	b.n	80a1830 <_ZN6StringaSEPKc+0x18>

080a183a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a183a:	b510      	push	{r4, lr}
	buffer = NULL;
 80a183c:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a183e:	4604      	mov	r4, r0
 80a1840:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1842:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1846:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1848:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a184a:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a184c:	a901      	add	r1, sp, #4
 80a184e:	f000 fc77 	bl	80a2140 <itoa>
	*this = buf;
 80a1852:	4620      	mov	r0, r4
 80a1854:	a901      	add	r1, sp, #4
 80a1856:	f7ff ffdf 	bl	80a1818 <_ZN6StringaSEPKc>
}
 80a185a:	4620      	mov	r0, r4
 80a185c:	b00a      	add	sp, #40	; 0x28
 80a185e:	bd10      	pop	{r4, pc}

080a1860 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1860:	b570      	push	{r4, r5, r6, lr}
 80a1862:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1864:	460e      	mov	r6, r1
 80a1866:	b909      	cbnz	r1, 80a186c <_ZN6String6concatEPKcj+0xc>
 80a1868:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a186a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a186c:	b16a      	cbz	r2, 80a188a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a186e:	6884      	ldr	r4, [r0, #8]
 80a1870:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1872:	4621      	mov	r1, r4
 80a1874:	f7ff ff77 	bl	80a1766 <_ZN6String7reserveEj>
 80a1878:	2800      	cmp	r0, #0
 80a187a:	d0f5      	beq.n	80a1868 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a187c:	6828      	ldr	r0, [r5, #0]
 80a187e:	68ab      	ldr	r3, [r5, #8]
 80a1880:	4631      	mov	r1, r6
 80a1882:	4418      	add	r0, r3
 80a1884:	f001 f9cc 	bl	80a2c20 <strcpy>
	len = newlen;
 80a1888:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a188a:	2001      	movs	r0, #1
 80a188c:	e7ed      	b.n	80a186a <_ZN6String6concatEPKcj+0xa>

080a188e <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a188e:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a1890:	220a      	movs	r2, #10
{
 80a1892:	4604      	mov	r4, r0
 80a1894:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 80a1896:	4669      	mov	r1, sp
 80a1898:	f000 fc52 	bl	80a2140 <itoa>
	return concat(buf, strlen(buf));
 80a189c:	4668      	mov	r0, sp
 80a189e:	f001 f9e2 	bl	80a2c66 <strlen>
 80a18a2:	4669      	mov	r1, sp
 80a18a4:	4602      	mov	r2, r0
 80a18a6:	4620      	mov	r0, r4
 80a18a8:	f7ff ffda 	bl	80a1860 <_ZN6String6concatEPKcj>
}
 80a18ac:	b002      	add	sp, #8
 80a18ae:	bd10      	pop	{r4, pc}

080a18b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a18b0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a18b2:	2000      	movs	r0, #0
 80a18b4:	4b04      	ldr	r3, [pc, #16]	; (80a18c8 <_GLOBAL__sub_I_System+0x18>)
 80a18b6:	601a      	str	r2, [r3, #0]
 80a18b8:	4b04      	ldr	r3, [pc, #16]	; (80a18cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a18ba:	4a05      	ldr	r2, [pc, #20]	; (80a18d0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a18bc:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a18c0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a18c2:	f7ff b9f3 	b.w	80a0cac <set_system_mode>
 80a18c6:	bf00      	nop
 80a18c8:	2000018c 	.word	0x2000018c
 80a18cc:	20000180 	.word	0x20000180
 80a18d0:	ffff0000 	.word	0xffff0000

080a18d4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a18d4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a18d6:	6803      	ldr	r3, [r0, #0]
{
 80a18d8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a18dc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a18de:	2201      	movs	r2, #1
 80a18e0:	f247 5330 	movw	r3, #30000	; 0x7530
 80a18e4:	f10d 0107 	add.w	r1, sp, #7
 80a18e8:	47a0      	blx	r4
}
 80a18ea:	b002      	add	sp, #8
 80a18ec:	bd10      	pop	{r4, pc}

080a18ee <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a18ee:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a18f0:	6803      	ldr	r3, [r0, #0]
 80a18f2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a18f4:	f247 5330 	movw	r3, #30000	; 0x7530
 80a18f8:	46a4      	mov	ip, r4
}
 80a18fa:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a18fc:	4760      	bx	ip

080a18fe <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a18fe:	b513      	push	{r0, r1, r4, lr}
 80a1900:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a1902:	6802      	ldr	r2, [r0, #0]
{
 80a1904:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a1908:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a190a:	f10d 0107 	add.w	r1, sp, #7
 80a190e:	2201      	movs	r2, #1
 80a1910:	47a0      	blx	r4
}
 80a1912:	b002      	add	sp, #8
 80a1914:	bd10      	pop	{r4, pc}

080a1916 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1916:	b510      	push	{r4, lr}
 80a1918:	6943      	ldr	r3, [r0, #20]
 80a191a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a191c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1920:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1924:	429a      	cmp	r2, r3
 80a1926:	d008      	beq.n	80a193a <_ZN9TCPClient4readEv+0x24>
 80a1928:	6963      	ldr	r3, [r4, #20]
 80a192a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a192e:	1c51      	adds	r1, r2, #1
 80a1930:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a1934:	4413      	add	r3, r2
 80a1936:	7918      	ldrb	r0, [r3, #4]
}
 80a1938:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a193a:	6803      	ldr	r3, [r0, #0]
 80a193c:	691b      	ldr	r3, [r3, #16]
 80a193e:	4798      	blx	r3
 80a1940:	2800      	cmp	r0, #0
 80a1942:	d1f1      	bne.n	80a1928 <_ZN9TCPClient4readEv+0x12>
 80a1944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1948:	e7f6      	b.n	80a1938 <_ZN9TCPClient4readEv+0x22>

080a194a <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a194a:	4770      	bx	lr

080a194c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a194c:	4770      	bx	lr
	...

080a1950 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1950:	b510      	push	{r4, lr}
 80a1952:	4604      	mov	r4, r0
	    ||
 80a1954:	4b06      	ldr	r3, [pc, #24]	; (80a1970 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a1956:	4608      	mov	r0, r1
	    ||
 80a1958:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a195a:	f104 040c 	add.w	r4, r4, #12
 80a195e:	d004      	beq.n	80a196a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a1960:	f000 fdb2 	bl	80a24c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 80a1964:	2800      	cmp	r0, #0
 80a1966:	bf08      	it	eq
 80a1968:	2400      	moveq	r4, #0
      }
 80a196a:	4620      	mov	r0, r4
 80a196c:	bd10      	pop	{r4, pc}
 80a196e:	bf00      	nop
 80a1970:	080a2ef4 	.word	0x080a2ef4

080a1974 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a1974:	b510      	push	{r4, lr}
 80a1976:	4604      	mov	r4, r0
 80a1978:	21ac      	movs	r1, #172	; 0xac
 80a197a:	f7fe fb92 	bl	80a00a2 <_ZdlPvj>
 80a197e:	4620      	mov	r0, r4
 80a1980:	bd10      	pop	{r4, pc}

080a1982 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80a1982:	21ac      	movs	r1, #172	; 0xac
 80a1984:	f7fe bb8d 	b.w	80a00a2 <_ZdlPvj>

080a1988 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a1988:	b538      	push	{r3, r4, r5, lr}
 80a198a:	4b0b      	ldr	r3, [pc, #44]	; (80a19b8 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a198c:	6984      	ldr	r4, [r0, #24]
 80a198e:	4605      	mov	r5, r0
 80a1990:	6003      	str	r3, [r0, #0]
 80a1992:	b17c      	cbz	r4, 80a19b4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a1994:	6863      	ldr	r3, [r4, #4]
 80a1996:	3b01      	subs	r3, #1
 80a1998:	6063      	str	r3, [r4, #4]
 80a199a:	b95b      	cbnz	r3, 80a19b4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a199c:	6823      	ldr	r3, [r4, #0]
 80a199e:	4620      	mov	r0, r4
 80a19a0:	689b      	ldr	r3, [r3, #8]
 80a19a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a19a4:	68a3      	ldr	r3, [r4, #8]
 80a19a6:	3b01      	subs	r3, #1
 80a19a8:	60a3      	str	r3, [r4, #8]
 80a19aa:	b91b      	cbnz	r3, 80a19b4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a19ac:	6823      	ldr	r3, [r4, #0]
 80a19ae:	4620      	mov	r0, r4
 80a19b0:	68db      	ldr	r3, [r3, #12]
 80a19b2:	4798      	blx	r3
 80a19b4:	4628      	mov	r0, r5
 80a19b6:	bd38      	pop	{r3, r4, r5, pc}
 80a19b8:	080a2f04 	.word	0x080a2f04

080a19bc <_ZN9TCPClientD0Ev>:
 80a19bc:	b510      	push	{r4, lr}
 80a19be:	4604      	mov	r4, r0
 80a19c0:	f7ff ffe2 	bl	80a1988 <_ZN9TCPClientD1Ev>
 80a19c4:	4620      	mov	r0, r4
 80a19c6:	211c      	movs	r1, #28
 80a19c8:	f7fe fb6b 	bl	80a00a2 <_ZdlPvj>
 80a19cc:	4620      	mov	r0, r4
 80a19ce:	bd10      	pop	{r4, pc}

080a19d0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a19d0:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 80a19d2:	4604      	mov	r4, r0
 80a19d4:	4606      	mov	r6, r0
      { return _M_ptr; }
 80a19d6:	694d      	ldr	r5, [r1, #20]
 80a19d8:	4b04      	ldr	r3, [pc, #16]	; (80a19ec <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a19da:	358c      	adds	r5, #140	; 0x8c
 80a19dc:	f844 3b04 	str.w	r3, [r4], #4
 80a19e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a19e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a19e4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a19e6:	4630      	mov	r0, r6
 80a19e8:	7023      	strb	r3, [r4, #0]
 80a19ea:	bd70      	pop	{r4, r5, r6, pc}
 80a19ec:	080a2e70 	.word	0x080a2e70

080a19f0 <_ZN9TCPClient4peekEv>:
{
 80a19f0:	b510      	push	{r4, lr}
 80a19f2:	6943      	ldr	r3, [r0, #20]
 80a19f4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a19f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a19fa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a19fe:	429a      	cmp	r2, r3
 80a1a00:	d005      	beq.n	80a1a0e <_ZN9TCPClient4peekEv+0x1e>
 80a1a02:	6963      	ldr	r3, [r4, #20]
 80a1a04:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1a08:	4413      	add	r3, r2
 80a1a0a:	7918      	ldrb	r0, [r3, #4]
}
 80a1a0c:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1a0e:	6803      	ldr	r3, [r0, #0]
 80a1a10:	691b      	ldr	r3, [r3, #16]
 80a1a12:	4798      	blx	r3
 80a1a14:	2800      	cmp	r0, #0
 80a1a16:	d1f4      	bne.n	80a1a02 <_ZN9TCPClient4peekEv+0x12>
 80a1a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1a1c:	e7f6      	b.n	80a1a0c <_ZN9TCPClient4peekEv+0x1c>

080a1a1e <_ZN9TCPClient4readEPhj>:
{
 80a1a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a20:	6943      	ldr	r3, [r0, #20]
 80a1a22:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a1a24:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1a28:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a1a2c:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a1a2e:	429a      	cmp	r2, r3
{
 80a1a30:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a1a32:	d016      	beq.n	80a1a62 <_ZN9TCPClient4readEPhj+0x44>
 80a1a34:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1a36:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a1a38:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1a3c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a1a40:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1a42:	42bc      	cmp	r4, r7
 80a1a44:	bf28      	it	cs
 80a1a46:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1a48:	3304      	adds	r3, #4
 80a1a4a:	4622      	mov	r2, r4
 80a1a4c:	4419      	add	r1, r3
 80a1a4e:	f001 f899 	bl	80a2b84 <memcpy>
 80a1a52:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1a54:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1a58:	4423      	add	r3, r4
 80a1a5a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a1a5e:	4620      	mov	r0, r4
 80a1a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a1a62:	6803      	ldr	r3, [r0, #0]
 80a1a64:	691b      	ldr	r3, [r3, #16]
 80a1a66:	4798      	blx	r3
 80a1a68:	2800      	cmp	r0, #0
 80a1a6a:	d1e3      	bne.n	80a1a34 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a1a6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1a70:	e7f5      	b.n	80a1a5e <_ZN9TCPClient4readEPhj+0x40>

080a1a72 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a1a72:	2300      	movs	r3, #0
 80a1a74:	6942      	ldr	r2, [r0, #20]
 80a1a76:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1a7a:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1a7c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a1a80:	4770      	bx	lr
	...

080a1a84 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a1a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1a88:	461f      	mov	r7, r3
    stop();
 80a1a8a:	6803      	ldr	r3, [r0, #0]
{
 80a1a8c:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a1a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1a90:	4605      	mov	r5, r0
 80a1a92:	460c      	mov	r4, r1
 80a1a94:	4616      	mov	r6, r2
    stop();
 80a1a96:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a1a98:	4638      	mov	r0, r7
 80a1a9a:	f7ff fdd5 	bl	80a1648 <_ZN5spark12NetworkClass4fromEm>
 80a1a9e:	6803      	ldr	r3, [r0, #0]
 80a1aa0:	68db      	ldr	r3, [r3, #12]
 80a1aa2:	4798      	blx	r3
 80a1aa4:	2800      	cmp	r0, #0
 80a1aa6:	d054      	beq.n	80a1b52 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1aa8:	4633      	mov	r3, r6
 80a1aaa:	2206      	movs	r2, #6
 80a1aac:	2101      	movs	r1, #1
 80a1aae:	2002      	movs	r0, #2
 80a1ab0:	9700      	str	r7, [sp, #0]
 80a1ab2:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a1ab6:	f7ff f831 	bl	80a0b1c <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1aba:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1abc:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1ac0:	f04f 0800 	mov.w	r8, #0
 80a1ac4:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a1ac8:	696b      	ldr	r3, [r5, #20]
 80a1aca:	2001      	movs	r0, #1
 80a1acc:	681b      	ldr	r3, [r3, #0]
 80a1ace:	4923      	ldr	r1, [pc, #140]	; (80a1b5c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1ad0:	9301      	str	r3, [sp, #4]
 80a1ad2:	4b23      	ldr	r3, [pc, #140]	; (80a1b60 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1ad4:	aa02      	add	r2, sp, #8
 80a1ad6:	9300      	str	r3, [sp, #0]
 80a1ad8:	4643      	mov	r3, r8
 80a1ada:	f7ff f8df 	bl	80a0c9c <log_message>
          if (socket_handle_valid(d_->sock))
 80a1ade:	696b      	ldr	r3, [r5, #20]
 80a1ae0:	6818      	ldr	r0, [r3, #0]
 80a1ae2:	f7ff f813 	bl	80a0b0c <socket_handle_valid>
 80a1ae6:	2800      	cmp	r0, #0
 80a1ae8:	d033      	beq.n	80a1b52 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a1aea:	4628      	mov	r0, r5
 80a1aec:	f7ff ffc1 	bl	80a1a72 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a1af0:	2302      	movs	r3, #2
 80a1af2:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1af6:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1af8:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1afa:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1afe:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1b00:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a1b04:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1b08:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1b0a:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a1b0e:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1b12:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1b16:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1b1a:	f7ff f8af 	bl	80a0c7c <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1b1e:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1b20:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1b22:	2210      	movs	r2, #16
 80a1b24:	6818      	ldr	r0, [r3, #0]
 80a1b26:	a902      	add	r1, sp, #8
 80a1b28:	f7ff f800 	bl	80a0b2c <socket_connect>
 80a1b2c:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a1b2e:	4630      	mov	r0, r6
 80a1b30:	f7ff f8a4 	bl	80a0c7c <HAL_NET_SetNetWatchDog>
 80a1b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1b36:	696e      	ldr	r6, [r5, #20]
 80a1b38:	368c      	adds	r6, #140	; 0x8c
 80a1b3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a1b3c:	6823      	ldr	r3, [r4, #0]
 80a1b3e:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a1b40:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a1b42:	f1b9 0f00 	cmp.w	r9, #0
 80a1b46:	d007      	beq.n	80a1b58 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a1b48:	682b      	ldr	r3, [r5, #0]
 80a1b4a:	4628      	mov	r0, r5
 80a1b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1b4e:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1b50:	4640      	mov	r0, r8
}
 80a1b52:	b00b      	add	sp, #44	; 0x2c
 80a1b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1b58:	2001      	movs	r0, #1
 80a1b5a:	e7fa      	b.n	80a1b52 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a1b5c:	080a2ebc 	.word	0x080a2ebc
 80a1b60:	080a2ec3 	.word	0x080a2ec3

080a1b64 <_ZN9TCPClient9availableEv>:
{
 80a1b64:	b538      	push	{r3, r4, r5, lr}
 80a1b66:	6942      	ldr	r2, [r0, #20]
 80a1b68:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a1b6a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1b6e:	b12b      	cbz	r3, 80a1b7c <_ZN9TCPClient9availableEv+0x18>
 80a1b70:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1b74:	429a      	cmp	r2, r3
 80a1b76:	d101      	bne.n	80a1b7c <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a1b78:	f7ff ff7b 	bl	80a1a72 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1b7c:	6920      	ldr	r0, [r4, #16]
 80a1b7e:	f7ff fd63 	bl	80a1648 <_ZN5spark12NetworkClass4fromEm>
 80a1b82:	6803      	ldr	r3, [r0, #0]
 80a1b84:	68db      	ldr	r3, [r3, #12]
 80a1b86:	4798      	blx	r3
 80a1b88:	b1f8      	cbz	r0, 80a1bca <_ZN9TCPClient9availableEv+0x66>
 80a1b8a:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a1b8c:	6818      	ldr	r0, [r3, #0]
 80a1b8e:	f7fe ffbd 	bl	80a0b0c <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a1b92:	b1d0      	cbz	r0, 80a1bca <_ZN9TCPClient9availableEv+0x66>
 80a1b94:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a1b96:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1b9a:	297f      	cmp	r1, #127	; 0x7f
 80a1b9c:	d815      	bhi.n	80a1bca <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1b9e:	1d05      	adds	r5, r0, #4
 80a1ba0:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1ba4:	2300      	movs	r3, #0
 80a1ba6:	6800      	ldr	r0, [r0, #0]
 80a1ba8:	4429      	add	r1, r5
 80a1baa:	f7fe ffc7 	bl	80a0b3c <socket_receive>
            if (ret > 0)
 80a1bae:	2800      	cmp	r0, #0
 80a1bb0:	dd0b      	ble.n	80a1bca <_ZN9TCPClient9availableEv+0x66>
 80a1bb2:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a1bb4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1bb8:	b90a      	cbnz	r2, 80a1bbe <_ZN9TCPClient9availableEv+0x5a>
 80a1bba:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1bbe:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a1bc0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1bc4:	4410      	add	r0, r2
 80a1bc6:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a1bca:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a1bcc:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a1bd0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a1bd4:	1ac0      	subs	r0, r0, r3
 80a1bd6:	bd38      	pop	{r3, r4, r5, pc}

080a1bd8 <_ZN9TCPClient4stopEv>:
{
 80a1bd8:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a1bda:	6943      	ldr	r3, [r0, #20]
{
 80a1bdc:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a1bde:	6818      	ldr	r0, [r3, #0]
 80a1be0:	f7fe ff94 	bl	80a0b0c <socket_handle_valid>
  if (isOpen(d_->sock))
 80a1be4:	b118      	cbz	r0, 80a1bee <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1be6:	6963      	ldr	r3, [r4, #20]
 80a1be8:	6818      	ldr	r0, [r3, #0]
 80a1bea:	f7fe ffaf 	bl	80a0b4c <socket_close>
 80a1bee:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1bf0:	f7fe ffb4 	bl	80a0b5c <socket_handle_invalid>
 80a1bf4:	6028      	str	r0, [r5, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
 80a1bf6:	6960      	ldr	r0, [r4, #20]
 80a1bf8:	2211      	movs	r2, #17
 80a1bfa:	2100      	movs	r1, #0
 80a1bfc:	308c      	adds	r0, #140	; 0x8c
 80a1bfe:	f000 ffcf 	bl	80a2ba0 <memset>
  flush_buffer();
 80a1c02:	4620      	mov	r0, r4
}
 80a1c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a1c08:	f7ff bf33 	b.w	80a1a72 <_ZN9TCPClient12flush_bufferEv>

080a1c0c <_ZN9TCPClient6statusEv>:
{
 80a1c0c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1c0e:	6943      	ldr	r3, [r0, #20]
{
 80a1c10:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a1c12:	6818      	ldr	r0, [r3, #0]
 80a1c14:	f7fe ff7a 	bl	80a0b0c <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1c18:	b908      	cbnz	r0, 80a1c1e <_ZN9TCPClient6statusEv+0x12>
 80a1c1a:	2000      	movs	r0, #0
}
 80a1c1c:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1c1e:	6920      	ldr	r0, [r4, #16]
 80a1c20:	f7ff fd12 	bl	80a1648 <_ZN5spark12NetworkClass4fromEm>
 80a1c24:	6803      	ldr	r3, [r0, #0]
 80a1c26:	68db      	ldr	r3, [r3, #12]
 80a1c28:	4798      	blx	r3
 80a1c2a:	2800      	cmp	r0, #0
 80a1c2c:	d0f5      	beq.n	80a1c1a <_ZN9TCPClient6statusEv+0xe>
 80a1c2e:	6963      	ldr	r3, [r4, #20]
 80a1c30:	6818      	ldr	r0, [r3, #0]
 80a1c32:	f7fe ff63 	bl	80a0afc <socket_active_status>
 80a1c36:	fab0 f080 	clz	r0, r0
 80a1c3a:	0940      	lsrs	r0, r0, #5
 80a1c3c:	e7ee      	b.n	80a1c1c <_ZN9TCPClient6statusEv+0x10>

080a1c3e <_ZN9TCPClientcvbEv>:
{
 80a1c3e:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1c40:	f7ff ffe4 	bl	80a1c0c <_ZN9TCPClient6statusEv>
}
 80a1c44:	3800      	subs	r0, #0
 80a1c46:	bf18      	it	ne
 80a1c48:	2001      	movne	r0, #1
 80a1c4a:	bd08      	pop	{r3, pc}

080a1c4c <_ZN9TCPClient5writeEPKhjm>:
{
 80a1c4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 80a1c50:	2700      	movs	r7, #0
 80a1c52:	6047      	str	r7, [r0, #4]
 80a1c54:	4604      	mov	r4, r0
 80a1c56:	460d      	mov	r5, r1
 80a1c58:	4616      	mov	r6, r2
 80a1c5a:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1c5c:	f7ff ffd6 	bl	80a1c0c <_ZN9TCPClient6statusEv>
 80a1c60:	b170      	cbz	r0, 80a1c80 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a1c62:	e9cd 8700 	strd	r8, r7, [sp]
 80a1c66:	6960      	ldr	r0, [r4, #20]
 80a1c68:	463b      	mov	r3, r7
 80a1c6a:	4632      	mov	r2, r6
 80a1c6c:	4629      	mov	r1, r5
 80a1c6e:	6800      	ldr	r0, [r0, #0]
 80a1c70:	f7fe ff7c 	bl	80a0b6c <socket_send_ex>
    if (ret < 0) {
 80a1c74:	2800      	cmp	r0, #0
 80a1c76:	da00      	bge.n	80a1c7a <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a1c78:	6060      	str	r0, [r4, #4]
}
 80a1c7a:	b002      	add	sp, #8
 80a1c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1c84:	e7f8      	b.n	80a1c78 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a1c86 <_ZN9TCPClient9connectedEv>:
{
 80a1c86:	b570      	push	{r4, r5, r6, lr}
 80a1c88:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a1c8a:	f7ff ffbf 	bl	80a1c0c <_ZN9TCPClient6statusEv>
 80a1c8e:	b9e8      	cbnz	r0, 80a1ccc <_ZN9TCPClient9connectedEv+0x46>
 80a1c90:	696b      	ldr	r3, [r5, #20]
 80a1c92:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1c96:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1c9a:	4291      	cmp	r1, r2
 80a1c9c:	d116      	bne.n	80a1ccc <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a1c9e:	6818      	ldr	r0, [r3, #0]
 80a1ca0:	f7fe ff34 	bl	80a0b0c <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1ca4:	b908      	cbnz	r0, 80a1caa <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a1ca6:	2000      	movs	r0, #0
}
 80a1ca8:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1caa:	696b      	ldr	r3, [r5, #20]
 80a1cac:	6818      	ldr	r0, [r3, #0]
 80a1cae:	f7fe ff25 	bl	80a0afc <socket_active_status>
 80a1cb2:	2801      	cmp	r0, #1
 80a1cb4:	4604      	mov	r4, r0
 80a1cb6:	d1f6      	bne.n	80a1ca6 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a1cb8:	682b      	ldr	r3, [r5, #0]
 80a1cba:	4628      	mov	r0, r5
 80a1cbc:	691b      	ldr	r3, [r3, #16]
 80a1cbe:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1cc0:	b930      	cbnz	r0, 80a1cd0 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a1cc2:	682b      	ldr	r3, [r5, #0]
 80a1cc4:	4628      	mov	r0, r5
 80a1cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1cc8:	4798      	blx	r3
 80a1cca:	e7ec      	b.n	80a1ca6 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a1ccc:	2001      	movs	r0, #1
 80a1cce:	e7eb      	b.n	80a1ca8 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a1cd0:	4620      	mov	r0, r4
 80a1cd2:	e7e9      	b.n	80a1ca8 <_ZN9TCPClient9connectedEv+0x22>

080a1cd4 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a1cd4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a1cd6:	b510      	push	{r4, lr}
 80a1cd8:	4604      	mov	r4, r0
          total(0) {
 80a1cda:	6001      	str	r1, [r0, #0]
 80a1cdc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a1ce0:	3088      	adds	r0, #136	; 0x88
 80a1ce2:	f7ff fbf3 	bl	80a14cc <_ZN9IPAddressC1Ev>
}
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	bd10      	pop	{r4, pc}
	...

080a1cec <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a1cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1cf2:	2300      	movs	r3, #0
 80a1cf4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a1cf8:	4a0d      	ldr	r2, [pc, #52]	; (80a1d30 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a1cfa:	6103      	str	r3, [r0, #16]
 80a1cfc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a1cfe:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a1d00:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1d02:	20ac      	movs	r0, #172	; 0xac
 80a1d04:	460e      	mov	r6, r1
 80a1d06:	f7fe f9c6 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a1d0a:	1e05      	subs	r5, r0, #0
 80a1d0c:	f105 070c 	add.w	r7, r5, #12
 80a1d10:	d008      	beq.n	80a1d24 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a1d12:	2301      	movs	r3, #1
 80a1d14:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a1d18:	4b06      	ldr	r3, [pc, #24]	; (80a1d34 <_ZN9TCPClientC1Em+0x48>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1d1a:	4631      	mov	r1, r6
 80a1d1c:	4638      	mov	r0, r7
 80a1d1e:	602b      	str	r3, [r5, #0]
 80a1d20:	f7ff ffd8 	bl	80a1cd4 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a1d24:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a1d26:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a1d2a:	f7ff fea2 	bl	80a1a72 <_ZN9TCPClient12flush_bufferEv>
}
 80a1d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1d30:	080a2f04 	.word	0x080a2f04
 80a1d34:	080a2ee0 	.word	0x080a2ee0

080a1d38 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1d38:	b510      	push	{r4, lr}
 80a1d3a:	4604      	mov	r4, r0
 80a1d3c:	f7fe ff0e 	bl	80a0b5c <socket_handle_invalid>
 80a1d40:	4601      	mov	r1, r0
 80a1d42:	4620      	mov	r0, r4
 80a1d44:	f7ff ffd2 	bl	80a1cec <_ZN9TCPClientC1Em>
}
 80a1d48:	4620      	mov	r0, r4
 80a1d4a:	bd10      	pop	{r4, pc}

080a1d4c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a1d4c:	b510      	push	{r4, lr}
 80a1d4e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1d50:	6800      	ldr	r0, [r0, #0]
 80a1d52:	f7fe fedb 	bl	80a0b0c <socket_handle_valid>
 80a1d56:	b110      	cbz	r0, 80a1d5e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1d58:	6820      	ldr	r0, [r4, #0]
 80a1d5a:	f7fe fef7 	bl	80a0b4c <socket_close>
    }
}
 80a1d5e:	4620      	mov	r0, r4
 80a1d60:	bd10      	pop	{r4, pc}

080a1d62 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80a1d62:	300c      	adds	r0, #12
 80a1d64:	f7ff bff2 	b.w	80a1d4c <_ZN9TCPClient4DataD1Ev>

080a1d68 <_ZN9TCPClient7connectEPKctm>:
{
 80a1d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1d6c:	461f      	mov	r7, r3
    stop();
 80a1d6e:	6803      	ldr	r3, [r0, #0]
{
 80a1d70:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a1d74:	4606      	mov	r6, r0
 80a1d76:	460d      	mov	r5, r1
 80a1d78:	4690      	mov	r8, r2
    stop();
 80a1d7a:	4798      	blx	r3
    if (Network.ready())
 80a1d7c:	4813      	ldr	r0, [pc, #76]	; (80a1dcc <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1d7e:	f7ff fc0e 	bl	80a159e <_ZN5spark12NetworkClass5readyEv>
 80a1d82:	b1f0      	cbz	r0, 80a1dc2 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a1d84:	a802      	add	r0, sp, #8
 80a1d86:	f7ff fba1 	bl	80a14cc <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1d8a:	4628      	mov	r0, r5
 80a1d8c:	f000 ff6b 	bl	80a2c66 <strlen>
 80a1d90:	2400      	movs	r4, #0
 80a1d92:	b281      	uxth	r1, r0
 80a1d94:	463b      	mov	r3, r7
 80a1d96:	4628      	mov	r0, r5
 80a1d98:	9400      	str	r4, [sp, #0]
 80a1d9a:	aa03      	add	r2, sp, #12
 80a1d9c:	f7fe ff76 	bl	80a0c8c <inet_gethostbyname>
 80a1da0:	b990      	cbnz	r0, 80a1dc8 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a1da2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a1da4:	ad09      	add	r5, sp, #36	; 0x24
 80a1da6:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1daa:	4b09      	ldr	r3, [pc, #36]	; (80a1dd0 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1dac:	ac03      	add	r4, sp, #12
 80a1dae:	9308      	str	r3, [sp, #32]
 80a1db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1db4:	6823      	ldr	r3, [r4, #0]
 80a1db6:	4642      	mov	r2, r8
 80a1db8:	702b      	strb	r3, [r5, #0]
 80a1dba:	4630      	mov	r0, r6
 80a1dbc:	463b      	mov	r3, r7
 80a1dbe:	a908      	add	r1, sp, #32
 80a1dc0:	47c8      	blx	r9
}
 80a1dc2:	b00f      	add	sp, #60	; 0x3c
 80a1dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a1dc8:	4620      	mov	r0, r4
 80a1dca:	e7fa      	b.n	80a1dc2 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a1dcc:	20000168 	.word	0x20000168
 80a1dd0:	080a2e70 	.word	0x080a2e70

080a1dd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1dd4:	4b02      	ldr	r3, [pc, #8]	; (80a1de0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1dd6:	681a      	ldr	r2, [r3, #0]
 80a1dd8:	4b02      	ldr	r3, [pc, #8]	; (80a1de4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1dda:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1ddc:	4770      	bx	lr
 80a1dde:	bf00      	nop
 80a1de0:	20000038 	.word	0x20000038
 80a1de4:	20000190 	.word	0x20000190

080a1de8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a1de8:	4770      	bx	lr

080a1dea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1dea:	7441      	strb	r1, [r0, #17]
}
 80a1dec:	4770      	bx	lr

080a1dee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1dee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1df0:	7c00      	ldrb	r0, [r0, #16]
 80a1df2:	f7fe ff03 	bl	80a0bfc <hal_usart_available_data_for_write>
}
 80a1df6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1dfa:	bd08      	pop	{r3, pc}

080a1dfc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1dfc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1dfe:	7c00      	ldrb	r0, [r0, #16]
 80a1e00:	f7fe fed4 	bl	80a0bac <hal_usart_available>
}
 80a1e04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e08:	bd08      	pop	{r3, pc}

080a1e0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1e0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1e0c:	7c00      	ldrb	r0, [r0, #16]
 80a1e0e:	f7fe fedd 	bl	80a0bcc <hal_usart_peek>
}
 80a1e12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e16:	bd08      	pop	{r3, pc}

080a1e18 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1e18:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1e1a:	7c00      	ldrb	r0, [r0, #16]
 80a1e1c:	f7fe fece 	bl	80a0bbc <hal_usart_read>
}
 80a1e20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e24:	bd08      	pop	{r3, pc}

080a1e26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1e26:	7c00      	ldrb	r0, [r0, #16]
 80a1e28:	f7fe bed8 	b.w	80a0bdc <hal_usart_flush>

080a1e2c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1e2c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e2e:	7c46      	ldrb	r6, [r0, #17]
{
 80a1e30:	4604      	mov	r4, r0
 80a1e32:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e34:	b12e      	cbz	r6, 80a1e42 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1e36:	4629      	mov	r1, r5
 80a1e38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1e3e:	f7fe bead 	b.w	80a0b9c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1e42:	7c00      	ldrb	r0, [r0, #16]
 80a1e44:	f7fe feda 	bl	80a0bfc <hal_usart_available_data_for_write>
 80a1e48:	2800      	cmp	r0, #0
 80a1e4a:	dcf4      	bgt.n	80a1e36 <_ZN11USARTSerial5writeEh+0xa>
}
 80a1e4c:	4630      	mov	r0, r6
 80a1e4e:	bd70      	pop	{r4, r5, r6, pc}

080a1e50 <_ZN11USARTSerialD0Ev>:
 80a1e50:	b510      	push	{r4, lr}
 80a1e52:	4604      	mov	r4, r0
 80a1e54:	2114      	movs	r1, #20
 80a1e56:	f7fe f924 	bl	80a00a2 <_ZdlPvj>
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	bd10      	pop	{r4, pc}
	...

080a1e60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a1e60:	b510      	push	{r4, lr}
 80a1e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e66:	4604      	mov	r4, r0
 80a1e68:	4608      	mov	r0, r1
 80a1e6a:	4611      	mov	r1, r2
 80a1e6c:	2200      	movs	r2, #0
 80a1e6e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a1e72:	4b04      	ldr	r3, [pc, #16]	; (80a1e84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a1e74:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a1e76:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1e78:	2301      	movs	r3, #1
 80a1e7a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a1e7c:	f7fe fec6 	bl	80a0c0c <hal_usart_init_ex>
}
 80a1e80:	4620      	mov	r0, r4
 80a1e82:	bd10      	pop	{r4, pc}
 80a1e84:	080a2f6c 	.word	0x080a2f6c

080a1e88 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e88:	7441      	strb	r1, [r0, #17]
}
 80a1e8a:	4770      	bx	lr

080a1e8c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1e8c:	4770      	bx	lr

080a1e8e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1e8e:	4770      	bx	lr

080a1e90 <_ZN9USBSerial4readEv>:
{
 80a1e90:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1e92:	2100      	movs	r1, #0
 80a1e94:	7c00      	ldrb	r0, [r0, #16]
 80a1e96:	f7fe fed9 	bl	80a0c4c <HAL_USB_USART_Receive_Data>
}
 80a1e9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1e9e:	bd08      	pop	{r3, pc}

080a1ea0 <_ZN9USBSerial4peekEv>:
{
 80a1ea0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1ea2:	2101      	movs	r1, #1
 80a1ea4:	7c00      	ldrb	r0, [r0, #16]
 80a1ea6:	f7fe fed1 	bl	80a0c4c <HAL_USB_USART_Receive_Data>
}
 80a1eaa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1eae:	bd08      	pop	{r3, pc}

080a1eb0 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1eb0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1eb2:	7c00      	ldrb	r0, [r0, #16]
 80a1eb4:	f7fe fec2 	bl	80a0c3c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1eb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ebc:	bd08      	pop	{r3, pc}

080a1ebe <_ZN9USBSerial9availableEv>:
{
 80a1ebe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1ec0:	7c00      	ldrb	r0, [r0, #16]
 80a1ec2:	f7fe feb3 	bl	80a0c2c <HAL_USB_USART_Available_Data>
}
 80a1ec6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1eca:	bd08      	pop	{r3, pc}

080a1ecc <_ZN9USBSerial5writeEh>:
{
 80a1ecc:	b538      	push	{r3, r4, r5, lr}
 80a1ece:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ed0:	7c00      	ldrb	r0, [r0, #16]
{
 80a1ed2:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ed4:	f7fe feb2 	bl	80a0c3c <HAL_USB_USART_Available_Data_For_Write>
 80a1ed8:	2800      	cmp	r0, #0
 80a1eda:	dc01      	bgt.n	80a1ee0 <_ZN9USBSerial5writeEh+0x14>
 80a1edc:	7c60      	ldrb	r0, [r4, #17]
 80a1ede:	b128      	cbz	r0, 80a1eec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1ee0:	4629      	mov	r1, r5
 80a1ee2:	7c20      	ldrb	r0, [r4, #16]
 80a1ee4:	f7fe feba 	bl	80a0c5c <HAL_USB_USART_Send_Data>
 80a1ee8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1eec:	bd38      	pop	{r3, r4, r5, pc}

080a1eee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1eee:	7c00      	ldrb	r0, [r0, #16]
 80a1ef0:	f7fe bebc 	b.w	80a0c6c <HAL_USB_USART_Flush_Data>

080a1ef4 <_ZN9USBSerialD0Ev>:
 80a1ef4:	b510      	push	{r4, lr}
 80a1ef6:	4604      	mov	r4, r0
 80a1ef8:	2114      	movs	r1, #20
 80a1efa:	f7fe f8d2 	bl	80a00a2 <_ZdlPvj>
 80a1efe:	4620      	mov	r0, r4
 80a1f00:	bd10      	pop	{r4, pc}

080a1f02 <__tcf_1>:
 80a1f02:	4770      	bx	lr

080a1f04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f04:	b510      	push	{r4, lr}
 80a1f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f0a:	4604      	mov	r4, r0
 80a1f0c:	4608      	mov	r0, r1
 80a1f0e:	2100      	movs	r1, #0
 80a1f10:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1f14:	4b04      	ldr	r3, [pc, #16]	; (80a1f28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1f16:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f18:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1f1a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1f1c:	4611      	mov	r1, r2
  _blocking = true;
 80a1f1e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1f20:	f7fe fe7c 	bl	80a0c1c <HAL_USB_USART_Init>
}
 80a1f24:	4620      	mov	r0, r4
 80a1f26:	bd10      	pop	{r4, pc}
 80a1f28:	080a2f9c 	.word	0x080a2f9c

080a1f2c <_Z19acquireSerialBufferv>:
{
 80a1f2c:	b510      	push	{r4, lr}
 80a1f2e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1f30:	2214      	movs	r2, #20
 80a1f32:	2100      	movs	r1, #0
 80a1f34:	f000 fe34 	bl	80a2ba0 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1f38:	4b05      	ldr	r3, [pc, #20]	; (80a1f50 <_Z19acquireSerialBufferv+0x24>)
}
 80a1f3a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1f3c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1f3e:	4b05      	ldr	r3, [pc, #20]	; (80a1f54 <_Z19acquireSerialBufferv+0x28>)
 80a1f40:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1f42:	f240 1301 	movw	r3, #257	; 0x101
 80a1f46:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1f48:	2381      	movs	r3, #129	; 0x81
 80a1f4a:	8223      	strh	r3, [r4, #16]
}
 80a1f4c:	bd10      	pop	{r4, pc}
 80a1f4e:	bf00      	nop
 80a1f50:	200001c4 	.word	0x200001c4
 80a1f54:	200002c5 	.word	0x200002c5

080a1f58 <_Z16_fetch_usbserialv>:
{
 80a1f58:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1f5a:	4d0e      	ldr	r5, [pc, #56]	; (80a1f94 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1f5c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1f5e:	a801      	add	r0, sp, #4
 80a1f60:	f7ff ffe4 	bl	80a1f2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1f64:	7829      	ldrb	r1, [r5, #0]
 80a1f66:	f3bf 8f5b 	dmb	ish
 80a1f6a:	f011 0401 	ands.w	r4, r1, #1
 80a1f6e:	d10e      	bne.n	80a1f8e <_Z16_fetch_usbserialv+0x36>
 80a1f70:	4628      	mov	r0, r5
 80a1f72:	f7fe f898 	bl	80a00a6 <__cxa_guard_acquire>
 80a1f76:	b150      	cbz	r0, 80a1f8e <_Z16_fetch_usbserialv+0x36>
 80a1f78:	4621      	mov	r1, r4
 80a1f7a:	aa01      	add	r2, sp, #4
 80a1f7c:	4806      	ldr	r0, [pc, #24]	; (80a1f98 <_Z16_fetch_usbserialv+0x40>)
 80a1f7e:	f7ff ffc1 	bl	80a1f04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1f82:	4628      	mov	r0, r5
 80a1f84:	f7fe f894 	bl	80a00b0 <__cxa_guard_release>
 80a1f88:	4804      	ldr	r0, [pc, #16]	; (80a1f9c <_Z16_fetch_usbserialv+0x44>)
 80a1f8a:	f000 fdf5 	bl	80a2b78 <atexit>
	return _usbserial;
}
 80a1f8e:	4802      	ldr	r0, [pc, #8]	; (80a1f98 <_Z16_fetch_usbserialv+0x40>)
 80a1f90:	b007      	add	sp, #28
 80a1f92:	bd30      	pop	{r4, r5, pc}
 80a1f94:	20000194 	.word	0x20000194
 80a1f98:	2000019c 	.word	0x2000019c
 80a1f9c:	080a1e8d 	.word	0x080a1e8d

080a1fa0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1fa0:	b510      	push	{r4, lr}
 80a1fa2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1fa4:	2214      	movs	r2, #20
 80a1fa6:	2100      	movs	r1, #0
 80a1fa8:	f000 fdfa 	bl	80a2ba0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1fac:	4b05      	ldr	r3, [pc, #20]	; (80a1fc4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1fae:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1fb0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1fb2:	4b05      	ldr	r3, [pc, #20]	; (80a1fc8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1fb4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1fb6:	f240 1301 	movw	r3, #257	; 0x101
 80a1fba:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1fbc:	2381      	movs	r3, #129	; 0x81
 80a1fbe:	8223      	strh	r3, [r4, #16]
}
 80a1fc0:	bd10      	pop	{r4, pc}
 80a1fc2:	bf00      	nop
 80a1fc4:	20000346 	.word	0x20000346
 80a1fc8:	20000447 	.word	0x20000447

080a1fcc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1fcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1fce:	4c0e      	ldr	r4, [pc, #56]	; (80a2008 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1fd0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1fd2:	a801      	add	r0, sp, #4
 80a1fd4:	f7ff ffe4 	bl	80a1fa0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1fd8:	7823      	ldrb	r3, [r4, #0]
 80a1fda:	f3bf 8f5b 	dmb	ish
 80a1fde:	07db      	lsls	r3, r3, #31
 80a1fe0:	d40e      	bmi.n	80a2000 <_Z17_fetch_usbserial1v+0x34>
 80a1fe2:	4620      	mov	r0, r4
 80a1fe4:	f7fe f85f 	bl	80a00a6 <__cxa_guard_acquire>
 80a1fe8:	b150      	cbz	r0, 80a2000 <_Z17_fetch_usbserial1v+0x34>
 80a1fea:	2101      	movs	r1, #1
 80a1fec:	aa01      	add	r2, sp, #4
 80a1fee:	4807      	ldr	r0, [pc, #28]	; (80a200c <_Z17_fetch_usbserial1v+0x40>)
 80a1ff0:	f7ff ff88 	bl	80a1f04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ff4:	4620      	mov	r0, r4
 80a1ff6:	f7fe f85b 	bl	80a00b0 <__cxa_guard_release>
 80a1ffa:	4805      	ldr	r0, [pc, #20]	; (80a2010 <_Z17_fetch_usbserial1v+0x44>)
 80a1ffc:	f000 fdbc 	bl	80a2b78 <atexit>
  return _usbserial1;
}
 80a2000:	4802      	ldr	r0, [pc, #8]	; (80a200c <_Z17_fetch_usbserial1v+0x40>)
 80a2002:	b006      	add	sp, #24
 80a2004:	bd10      	pop	{r4, pc}
 80a2006:	bf00      	nop
 80a2008:	20000198 	.word	0x20000198
 80a200c:	200001b0 	.word	0x200001b0
 80a2010:	080a1f03 	.word	0x080a1f03

080a2014 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2014:	2200      	movs	r2, #0
 80a2016:	6840      	ldr	r0, [r0, #4]
 80a2018:	4611      	mov	r1, r2
 80a201a:	f7fe beab 	b.w	80a0d74 <network_ready>

080a201e <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a201e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2020:	4615      	mov	r5, r2
 80a2022:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2024:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2026:	460e      	mov	r6, r1
 80a2028:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a202a:	2100      	movs	r1, #0
 80a202c:	a803      	add	r0, sp, #12
 80a202e:	f000 fdb7 	bl	80a2ba0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2032:	4628      	mov	r0, r5
 80a2034:	f000 fe17 	bl	80a2c66 <strlen>
 80a2038:	2700      	movs	r7, #0
 80a203a:	b281      	uxth	r1, r0
 80a203c:	6873      	ldr	r3, [r6, #4]
 80a203e:	4628      	mov	r0, r5
 80a2040:	9700      	str	r7, [sp, #0]
 80a2042:	aa03      	add	r2, sp, #12
 80a2044:	f7fe fe22 	bl	80a0c8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2048:	b130      	cbz	r0, 80a2058 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a204a:	4639      	mov	r1, r7
 80a204c:	4620      	mov	r0, r4
 80a204e:	f7ff fa5d 	bl	80a150c <_ZN9IPAddressC1Em>
    }
 80a2052:	4620      	mov	r0, r4
 80a2054:	b009      	add	sp, #36	; 0x24
 80a2056:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2058:	4620      	mov	r0, r4
 80a205a:	a903      	add	r1, sp, #12
 80a205c:	f7ff fa44 	bl	80a14e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2060:	e7f7      	b.n	80a2052 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2062 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2062:	2200      	movs	r2, #0
 80a2064:	6840      	ldr	r0, [r0, #4]
 80a2066:	4611      	mov	r1, r2
 80a2068:	f7fe bea4 	b.w	80a0db4 <network_listening>

080a206c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a206c:	2200      	movs	r2, #0
 80a206e:	6840      	ldr	r0, [r0, #4]
 80a2070:	4611      	mov	r1, r2
 80a2072:	f7fe beaf 	b.w	80a0dd4 <network_get_listen_timeout>

080a2076 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2076:	2200      	movs	r2, #0
 80a2078:	6840      	ldr	r0, [r0, #4]
 80a207a:	f7fe bea3 	b.w	80a0dc4 <network_set_listen_timeout>

080a207e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a207e:	2200      	movs	r2, #0
 80a2080:	6840      	ldr	r0, [r0, #4]
 80a2082:	f081 0101 	eor.w	r1, r1, #1
 80a2086:	f7fe be8d 	b.w	80a0da4 <network_listen>

080a208a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a208a:	2300      	movs	r3, #0
 80a208c:	6840      	ldr	r0, [r0, #4]
 80a208e:	461a      	mov	r2, r3
 80a2090:	4619      	mov	r1, r3
 80a2092:	f7fe be7f 	b.w	80a0d94 <network_off>

080a2096 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2096:	2300      	movs	r3, #0
 80a2098:	6840      	ldr	r0, [r0, #4]
 80a209a:	461a      	mov	r2, r3
 80a209c:	4619      	mov	r1, r3
 80a209e:	f7fe be71 	b.w	80a0d84 <network_on>

080a20a2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a20a2:	2200      	movs	r2, #0
 80a20a4:	6840      	ldr	r0, [r0, #4]
 80a20a6:	4611      	mov	r1, r2
 80a20a8:	f7fe be54 	b.w	80a0d54 <network_connecting>

080a20ac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a20ac:	2200      	movs	r2, #0
 80a20ae:	2102      	movs	r1, #2
 80a20b0:	6840      	ldr	r0, [r0, #4]
 80a20b2:	f7fe be57 	b.w	80a0d64 <network_disconnect>

080a20b6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a20b6:	2300      	movs	r3, #0
 80a20b8:	6840      	ldr	r0, [r0, #4]
 80a20ba:	461a      	mov	r2, r3
 80a20bc:	f7fe be42 	b.w	80a0d44 <network_connect>

080a20c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a20c0:	2204      	movs	r2, #4
 80a20c2:	4b02      	ldr	r3, [pc, #8]	; (80a20cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a20c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a20c6:	4a02      	ldr	r2, [pc, #8]	; (80a20d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a20c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a20ca:	4770      	bx	lr
 80a20cc:	200004c8 	.word	0x200004c8
 80a20d0:	080a2fcc 	.word	0x080a2fcc

080a20d4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a20d4:	b510      	push	{r4, lr}
 80a20d6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a20d8:	f000 fdc5 	bl	80a2c66 <strlen>
 80a20dc:	1e43      	subs	r3, r0, #1
 80a20de:	4620      	mov	r0, r4
 80a20e0:	4423      	add	r3, r4
	while(i<j){
 80a20e2:	4283      	cmp	r3, r0
 80a20e4:	d906      	bls.n	80a20f4 <_Z11str_reversePc+0x20>
		c = *i;
 80a20e6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a20e8:	7819      	ldrb	r1, [r3, #0]
 80a20ea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a20ee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a20f2:	e7f6      	b.n	80a20e2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a20f4:	bd10      	pop	{r4, pc}

080a20f6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a20f6:	b570      	push	{r4, r5, r6, lr}
 80a20f8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a20fa:	1e91      	subs	r1, r2, #2
 80a20fc:	2922      	cmp	r1, #34	; 0x22
 80a20fe:	d81d      	bhi.n	80a213c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 80a2100:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a2102:	b930      	cbnz	r0, 80a2112 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a2104:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 80a2106:	4423      	add	r3, r4
 80a2108:	429d      	cmp	r5, r3
 80a210a:	d210      	bcs.n	80a212e <ultoa+0x38>
            *ptr++ = '0';
 80a210c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 80a2110:	e7fa      	b.n	80a2108 <ultoa+0x12>
            result.quot = a/radix;
 80a2112:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2116:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a211a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a211c:	2809      	cmp	r0, #9
                *ptr += '0';
 80a211e:	bf94      	ite	ls
 80a2120:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 80a2122:	3157      	addhi	r1, #87	; 0x57
 80a2124:	b2c9      	uxtb	r1, r1
            a = result.quot;
 80a2126:	4630      	mov	r0, r6
 80a2128:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a212c:	e7e9      	b.n	80a2102 <ultoa+0xc>

	*ptr = '\0';
 80a212e:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2130:	4620      	mov	r0, r4
	*ptr = '\0';
 80a2132:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 80a2134:	f7ff ffce 	bl	80a20d4 <_Z11str_reversePc>
	return buffer;
 80a2138:	4620      	mov	r0, r4
}
 80a213a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a213c:	2000      	movs	r0, #0
 80a213e:	e7fc      	b.n	80a213a <ultoa+0x44>

080a2140 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2140:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a2142:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2144:	460c      	mov	r4, r1
 80a2146:	4615      	mov	r5, r2
	if(a<0){
 80a2148:	da0d      	bge.n	80a2166 <itoa+0x26>
		*buffer = '-';
 80a214a:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a214c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2150:	bf0c      	ite	eq
 80a2152:	4618      	moveq	r0, r3
 80a2154:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a2156:	2301      	movs	r3, #1
		*buffer = '-';
 80a2158:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a215a:	462a      	mov	r2, r5
 80a215c:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a215e:	f7ff ffca 	bl	80a20f6 <ultoa>
	}
	return buffer;
}
 80a2162:	4620      	mov	r0, r4
 80a2164:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a2166:	2301      	movs	r3, #1
 80a2168:	e7f9      	b.n	80a215e <itoa+0x1e>
	...

080a216c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a216c:	4b01      	ldr	r3, [pc, #4]	; (80a2174 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a216e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2170:	4770      	bx	lr
 80a2172:	bf00      	nop
 80a2174:	2000003c 	.word	0x2000003c

080a2178 <serialEventRun>:
{
 80a2178:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a217a:	4b13      	ldr	r3, [pc, #76]	; (80a21c8 <serialEventRun+0x50>)
 80a217c:	b143      	cbz	r3, 80a2190 <serialEventRun+0x18>
 80a217e:	f7ff feeb 	bl	80a1f58 <_Z16_fetch_usbserialv>
 80a2182:	6803      	ldr	r3, [r0, #0]
 80a2184:	691b      	ldr	r3, [r3, #16]
 80a2186:	4798      	blx	r3
 80a2188:	2800      	cmp	r0, #0
 80a218a:	dd01      	ble.n	80a2190 <serialEventRun+0x18>
        serialEvent();
 80a218c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2190:	4b0e      	ldr	r3, [pc, #56]	; (80a21cc <serialEventRun+0x54>)
 80a2192:	b143      	cbz	r3, 80a21a6 <serialEventRun+0x2e>
 80a2194:	f000 f96e 	bl	80a2474 <_Z22__fetch_global_Serial1v>
 80a2198:	6803      	ldr	r3, [r0, #0]
 80a219a:	691b      	ldr	r3, [r3, #16]
 80a219c:	4798      	blx	r3
 80a219e:	2800      	cmp	r0, #0
 80a21a0:	dd01      	ble.n	80a21a6 <serialEventRun+0x2e>
        serialEvent1();
 80a21a2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a21a6:	4b0a      	ldr	r3, [pc, #40]	; (80a21d0 <serialEventRun+0x58>)
 80a21a8:	b10b      	cbz	r3, 80a21ae <serialEventRun+0x36>
 80a21aa:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a21ae:	4b09      	ldr	r3, [pc, #36]	; (80a21d4 <serialEventRun+0x5c>)
 80a21b0:	b143      	cbz	r3, 80a21c4 <serialEventRun+0x4c>
 80a21b2:	f7ff ff0b 	bl	80a1fcc <_Z17_fetch_usbserial1v>
 80a21b6:	6803      	ldr	r3, [r0, #0]
 80a21b8:	691b      	ldr	r3, [r3, #16]
 80a21ba:	4798      	blx	r3
 80a21bc:	2800      	cmp	r0, #0
 80a21be:	dd01      	ble.n	80a21c4 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a21c0:	f3af 8000 	nop.w
}
 80a21c4:	bd08      	pop	{r3, pc}
 80a21c6:	bf00      	nop
	...

080a21d8 <_post_loop>:
{
 80a21d8:	b508      	push	{r3, lr}
	serialEventRun();
 80a21da:	f7ff ffcd 	bl	80a2178 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a21de:	f7fe fc33 	bl	80a0a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a21e2:	4b01      	ldr	r3, [pc, #4]	; (80a21e8 <_post_loop+0x10>)
 80a21e4:	6018      	str	r0, [r3, #0]
}
 80a21e6:	bd08      	pop	{r3, pc}
 80a21e8:	200004e8 	.word	0x200004e8

080a21ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a21ec:	4805      	ldr	r0, [pc, #20]	; (80a2204 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a21ee:	4a06      	ldr	r2, [pc, #24]	; (80a2208 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a21f0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a21f2:	1a12      	subs	r2, r2, r0
 80a21f4:	4905      	ldr	r1, [pc, #20]	; (80a220c <_Z33system_initialize_user_backup_ramv+0x20>)
 80a21f6:	f000 fcc5 	bl	80a2b84 <memcpy>
    __backup_sram_signature = signature;
 80a21fa:	4b05      	ldr	r3, [pc, #20]	; (80a2210 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a21fc:	4a05      	ldr	r2, [pc, #20]	; (80a2214 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a21fe:	601a      	str	r2, [r3, #0]
}
 80a2200:	bd08      	pop	{r3, pc}
 80a2202:	bf00      	nop
 80a2204:	40024000 	.word	0x40024000
 80a2208:	40024004 	.word	0x40024004
 80a220c:	080a3190 	.word	0x080a3190
 80a2210:	40024000 	.word	0x40024000
 80a2214:	9a271c1e 	.word	0x9a271c1e

080a2218 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2218:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a221a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a221c:	461a      	mov	r2, r3
 80a221e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2222:	9300      	str	r3, [sp, #0]
 80a2224:	f7fe fd6c 	bl	80a0d00 <system_ctrl_set_result>
}
 80a2228:	b003      	add	sp, #12
 80a222a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2230 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2230:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2232:	8843      	ldrh	r3, [r0, #2]
 80a2234:	2b0a      	cmp	r3, #10
 80a2236:	d008      	beq.n	80a224a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2238:	2b50      	cmp	r3, #80	; 0x50
 80a223a:	d10b      	bne.n	80a2254 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a223c:	4b09      	ldr	r3, [pc, #36]	; (80a2264 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a223e:	681b      	ldr	r3, [r3, #0]
 80a2240:	b14b      	cbz	r3, 80a2256 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2242:	b003      	add	sp, #12
 80a2244:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2248:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a224a:	f7ff ffe5 	bl	80a2218 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a224e:	b003      	add	sp, #12
 80a2250:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2254:	2300      	movs	r3, #0
 80a2256:	461a      	mov	r2, r3
 80a2258:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a225c:	9300      	str	r3, [sp, #0]
 80a225e:	f7fe fd4f 	bl	80a0d00 <system_ctrl_set_result>
}
 80a2262:	e7f4      	b.n	80a224e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2264:	200004d4 	.word	0x200004d4

080a2268 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2268:	2100      	movs	r1, #0
{
 80a226a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a226c:	4811      	ldr	r0, [pc, #68]	; (80a22b4 <module_user_init_hook+0x4c>)
 80a226e:	f7fe fdf9 	bl	80a0e64 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2272:	4b11      	ldr	r3, [pc, #68]	; (80a22b8 <module_user_init_hook+0x50>)
 80a2274:	681a      	ldr	r2, [r3, #0]
 80a2276:	4b11      	ldr	r3, [pc, #68]	; (80a22bc <module_user_init_hook+0x54>)
 80a2278:	429a      	cmp	r2, r3
 80a227a:	bf0c      	ite	eq
 80a227c:	2201      	moveq	r2, #1
 80a227e:	2200      	movne	r2, #0
 80a2280:	4b0f      	ldr	r3, [pc, #60]	; (80a22c0 <module_user_init_hook+0x58>)
 80a2282:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2284:	d001      	beq.n	80a228a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2286:	f7ff ffb1 	bl	80a21ec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a228a:	f7fe fbd5 	bl	80a0a38 <HAL_RNG_GetRandomNumber>
 80a228e:	4604      	mov	r4, r0
    srand(seed);
 80a2290:	f000 fc8e 	bl	80a2bb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2294:	4b0b      	ldr	r3, [pc, #44]	; (80a22c4 <module_user_init_hook+0x5c>)
 80a2296:	b113      	cbz	r3, 80a229e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2298:	4620      	mov	r0, r4
 80a229a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a229e:	2100      	movs	r1, #0
 80a22a0:	4808      	ldr	r0, [pc, #32]	; (80a22c4 <module_user_init_hook+0x5c>)
 80a22a2:	f7fe fd47 	bl	80a0d34 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a22a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a22aa:	2100      	movs	r1, #0
 80a22ac:	4806      	ldr	r0, [pc, #24]	; (80a22c8 <module_user_init_hook+0x60>)
 80a22ae:	f7fe bd1d 	b.w	80a0cec <system_ctrl_set_app_request_handler>
 80a22b2:	bf00      	nop
 80a22b4:	080a216d 	.word	0x080a216d
 80a22b8:	40024000 	.word	0x40024000
 80a22bc:	9a271c1e 	.word	0x9a271c1e
 80a22c0:	200004d0 	.word	0x200004d0
 80a22c4:	00000000 	.word	0x00000000
 80a22c8:	080a2231 	.word	0x080a2231

080a22cc <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a22cc:	4b02      	ldr	r3, [pc, #8]	; (80a22d8 <__tcf_0+0xc>)
 80a22ce:	6898      	ldr	r0, [r3, #8]
 80a22d0:	b108      	cbz	r0, 80a22d6 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a22d2:	f7fe bba9 	b.w	80a0a28 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a22d6:	4770      	bx	lr
 80a22d8:	200004dc 	.word	0x200004dc

080a22dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a22dc:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a22de:	b570      	push	{r4, r5, r6, lr}
 80a22e0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a22e2:	d901      	bls.n	80a22e8 <pinAvailable+0xc>
    return false;
 80a22e4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a22e6:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a22e8:	f1a0 030d 	sub.w	r3, r0, #13
 80a22ec:	2b02      	cmp	r3, #2
 80a22ee:	d90b      	bls.n	80a2308 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a22f0:	2801      	cmp	r0, #1
 80a22f2:	d824      	bhi.n	80a233e <pinAvailable+0x62>
 80a22f4:	f000 f870 	bl	80a23d8 <_Z19__fetch_global_Wirev>
 80a22f8:	2100      	movs	r1, #0
 80a22fa:	7c00      	ldrb	r0, [r0, #16]
 80a22fc:	f7fe fbec 	bl	80a0ad8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2300:	f080 0001 	eor.w	r0, r0, #1
 80a2304:	b2c0      	uxtb	r0, r0
 80a2306:	e7ee      	b.n	80a22e6 <pinAvailable+0xa>
 80a2308:	4e12      	ldr	r6, [pc, #72]	; (80a2354 <pinAvailable+0x78>)
 80a230a:	7831      	ldrb	r1, [r6, #0]
 80a230c:	f3bf 8f5b 	dmb	ish
 80a2310:	f011 0501 	ands.w	r5, r1, #1
 80a2314:	d10d      	bne.n	80a2332 <pinAvailable+0x56>
 80a2316:	4630      	mov	r0, r6
 80a2318:	f7fd fec5 	bl	80a00a6 <__cxa_guard_acquire>
 80a231c:	b148      	cbz	r0, 80a2332 <pinAvailable+0x56>
 80a231e:	4629      	mov	r1, r5
 80a2320:	480d      	ldr	r0, [pc, #52]	; (80a2358 <pinAvailable+0x7c>)
 80a2322:	f7ff f9f3 	bl	80a170c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2326:	4630      	mov	r0, r6
 80a2328:	f7fd fec2 	bl	80a00b0 <__cxa_guard_release>
 80a232c:	480b      	ldr	r0, [pc, #44]	; (80a235c <pinAvailable+0x80>)
 80a232e:	f000 fc23 	bl	80a2b78 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2332:	4b09      	ldr	r3, [pc, #36]	; (80a2358 <pinAvailable+0x7c>)
 80a2334:	7818      	ldrb	r0, [r3, #0]
 80a2336:	f7fe fc29 	bl	80a0b8c <hal_spi_is_enabled>
 80a233a:	2800      	cmp	r0, #0
 80a233c:	d1d2      	bne.n	80a22e4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a233e:	3c12      	subs	r4, #18
 80a2340:	2c01      	cmp	r4, #1
 80a2342:	d805      	bhi.n	80a2350 <pinAvailable+0x74>
 80a2344:	f000 f896 	bl	80a2474 <_Z22__fetch_global_Serial1v>
 80a2348:	7c00      	ldrb	r0, [r0, #16]
 80a234a:	f7fe fc4f 	bl	80a0bec <hal_usart_is_enabled>
 80a234e:	e7d7      	b.n	80a2300 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2350:	2001      	movs	r0, #1
 80a2352:	e7c8      	b.n	80a22e6 <pinAvailable+0xa>
 80a2354:	200004d8 	.word	0x200004d8
 80a2358:	200004dc 	.word	0x200004dc
 80a235c:	080a22cd 	.word	0x080a22cd

080a2360 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2360:	2817      	cmp	r0, #23
{
 80a2362:	b538      	push	{r3, r4, r5, lr}
 80a2364:	4604      	mov	r4, r0
 80a2366:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2368:	d80a      	bhi.n	80a2380 <pinMode+0x20>
 80a236a:	29ff      	cmp	r1, #255	; 0xff
 80a236c:	d008      	beq.n	80a2380 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a236e:	f7ff ffb5 	bl	80a22dc <pinAvailable>
 80a2372:	b128      	cbz	r0, 80a2380 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2374:	4629      	mov	r1, r5
 80a2376:	4620      	mov	r0, r4
}
 80a2378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a237c:	f7fe bb6c 	b.w	80a0a58 <HAL_Pin_Mode>
}
 80a2380:	bd38      	pop	{r3, r4, r5, pc}

080a2382 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2382:	b510      	push	{r4, lr}
 80a2384:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2386:	f7fe fb6f 	bl	80a0a68 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a238a:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a238c:	b2db      	uxtb	r3, r3
 80a238e:	2b01      	cmp	r3, #1
 80a2390:	d908      	bls.n	80a23a4 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2392:	4620      	mov	r0, r4
 80a2394:	f7ff ffa2 	bl	80a22dc <pinAvailable>
 80a2398:	b120      	cbz	r0, 80a23a4 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a239a:	4620      	mov	r0, r4
}
 80a239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a23a0:	f7fe bb6a 	b.w	80a0a78 <HAL_GPIO_Read>
}
 80a23a4:	2000      	movs	r0, #0
 80a23a6:	bd10      	pop	{r4, pc}

080a23a8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a23a8:	4770      	bx	lr
	...

080a23ac <_Z17acquireWireBufferv>:
{
 80a23ac:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a23ae:	2314      	movs	r3, #20
 80a23b0:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a23b2:	4e08      	ldr	r6, [pc, #32]	; (80a23d4 <_Z17acquireWireBufferv+0x28>)
{
 80a23b4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a23b6:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a23b8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a23ba:	6085      	str	r5, [r0, #8]
 80a23bc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a23be:	4628      	mov	r0, r5
 80a23c0:	f000 f87c 	bl	80a24bc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a23c4:	4631      	mov	r1, r6
	};
 80a23c6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a23c8:	4628      	mov	r0, r5
 80a23ca:	f000 f877 	bl	80a24bc <_ZnajRKSt9nothrow_t>
	};
 80a23ce:	60e0      	str	r0, [r4, #12]
}
 80a23d0:	4620      	mov	r0, r4
 80a23d2:	bd70      	pop	{r4, r5, r6, pc}
 80a23d4:	080a3000 	.word	0x080a3000

080a23d8 <_Z19__fetch_global_Wirev>:
{
 80a23d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a23da:	4d0e      	ldr	r5, [pc, #56]	; (80a2414 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a23dc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a23de:	7829      	ldrb	r1, [r5, #0]
 80a23e0:	f3bf 8f5b 	dmb	ish
 80a23e4:	f011 0401 	ands.w	r4, r1, #1
 80a23e8:	d111      	bne.n	80a240e <_Z19__fetch_global_Wirev+0x36>
 80a23ea:	4628      	mov	r0, r5
 80a23ec:	f7fd fe5b 	bl	80a00a6 <__cxa_guard_acquire>
 80a23f0:	b168      	cbz	r0, 80a240e <_Z19__fetch_global_Wirev+0x36>
 80a23f2:	a801      	add	r0, sp, #4
 80a23f4:	f7ff ffda 	bl	80a23ac <_Z17acquireWireBufferv>
 80a23f8:	4621      	mov	r1, r4
 80a23fa:	aa01      	add	r2, sp, #4
 80a23fc:	4806      	ldr	r0, [pc, #24]	; (80a2418 <_Z19__fetch_global_Wirev+0x40>)
 80a23fe:	f7ff f831 	bl	80a1464 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2402:	4628      	mov	r0, r5
 80a2404:	f7fd fe54 	bl	80a00b0 <__cxa_guard_release>
 80a2408:	4804      	ldr	r0, [pc, #16]	; (80a241c <_Z19__fetch_global_Wirev+0x44>)
 80a240a:	f000 fbb5 	bl	80a2b78 <atexit>
	return wire;
}
 80a240e:	4802      	ldr	r0, [pc, #8]	; (80a2418 <_Z19__fetch_global_Wirev+0x40>)
 80a2410:	b007      	add	sp, #28
 80a2412:	bd30      	pop	{r4, r5, pc}
 80a2414:	200004ec 	.word	0x200004ec
 80a2418:	200004f0 	.word	0x200004f0
 80a241c:	080a23a9 	.word	0x080a23a9

080a2420 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2420:	2300      	movs	r3, #0
 80a2422:	b507      	push	{r0, r1, r2, lr}
 80a2424:	461a      	mov	r2, r3
 80a2426:	4619      	mov	r1, r3
 80a2428:	9300      	str	r3, [sp, #0]
 80a242a:	4803      	ldr	r0, [pc, #12]	; (80a2438 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a242c:	f7ff f884 	bl	80a1538 <_ZN9IPAddressC1Ehhhh>
 80a2430:	b003      	add	sp, #12
 80a2432:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2436:	bf00      	nop
 80a2438:	20000504 	.word	0x20000504

080a243c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a243c:	4770      	bx	lr
	...

080a2440 <_Z20acquireSerial1Bufferv>:
{
 80a2440:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a2442:	2514      	movs	r5, #20
{
 80a2444:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a2446:	462a      	mov	r2, r5
 80a2448:	2100      	movs	r1, #0
 80a244a:	f000 fba9 	bl	80a2ba0 <memset>
 80a244e:	8025      	strh	r5, [r4, #0]
 80a2450:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2452:	4e07      	ldr	r6, [pc, #28]	; (80a2470 <_Z20acquireSerial1Bufferv+0x30>)
 80a2454:	4628      	mov	r0, r5
 80a2456:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a2458:	8125      	strh	r5, [r4, #8]
 80a245a:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a245c:	f000 f82e 	bl	80a24bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2460:	4631      	mov	r1, r6
    };
 80a2462:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2464:	4628      	mov	r0, r5
 80a2466:	f000 f829 	bl	80a24bc <_ZnajRKSt9nothrow_t>
    };
 80a246a:	60e0      	str	r0, [r4, #12]
}
 80a246c:	4620      	mov	r0, r4
 80a246e:	bd70      	pop	{r4, r5, r6, pc}
 80a2470:	080a3000 	.word	0x080a3000

080a2474 <_Z22__fetch_global_Serial1v>:
{
 80a2474:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2476:	4d0e      	ldr	r5, [pc, #56]	; (80a24b0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a2478:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a247a:	7829      	ldrb	r1, [r5, #0]
 80a247c:	f3bf 8f5b 	dmb	ish
 80a2480:	f011 0401 	ands.w	r4, r1, #1
 80a2484:	d111      	bne.n	80a24aa <_Z22__fetch_global_Serial1v+0x36>
 80a2486:	4628      	mov	r0, r5
 80a2488:	f7fd fe0d 	bl	80a00a6 <__cxa_guard_acquire>
 80a248c:	b168      	cbz	r0, 80a24aa <_Z22__fetch_global_Serial1v+0x36>
 80a248e:	a801      	add	r0, sp, #4
 80a2490:	f7ff ffd6 	bl	80a2440 <_Z20acquireSerial1Bufferv>
 80a2494:	4621      	mov	r1, r4
 80a2496:	aa01      	add	r2, sp, #4
 80a2498:	4806      	ldr	r0, [pc, #24]	; (80a24b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a249a:	f7ff fce1 	bl	80a1e60 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a249e:	4628      	mov	r0, r5
 80a24a0:	f7fd fe06 	bl	80a00b0 <__cxa_guard_release>
 80a24a4:	4804      	ldr	r0, [pc, #16]	; (80a24b8 <_Z22__fetch_global_Serial1v+0x44>)
 80a24a6:	f000 fb67 	bl	80a2b78 <atexit>
    return serial1;
}
 80a24aa:	4802      	ldr	r0, [pc, #8]	; (80a24b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a24ac:	b007      	add	sp, #28
 80a24ae:	bd30      	pop	{r4, r5, pc}
 80a24b0:	2000051c 	.word	0x2000051c
 80a24b4:	20000520 	.word	0x20000520
 80a24b8:	080a243d 	.word	0x080a243d

080a24bc <_ZnajRKSt9nothrow_t>:
 80a24bc:	f7fd bded 	b.w	80a009a <_Znaj>

080a24c0 <_ZSt25__throw_bad_function_callv>:
 80a24c0:	b508      	push	{r3, lr}
 80a24c2:	f7fe fcb7 	bl	80a0e34 <abort>
	...

080a24c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a24c8:	4901      	ldr	r1, [pc, #4]	; (80a24d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a24ca:	f000 b8fb 	b.w	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a24ce:	bf00      	nop
 80a24d0:	080a301c 	.word	0x080a301c

080a24d4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a24d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a24d6:	2400      	movs	r4, #0
 80a24d8:	2310      	movs	r3, #16
 80a24da:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a24de:	6803      	ldr	r3, [r0, #0]
 80a24e0:	4615      	mov	r5, r2
 80a24e2:	699e      	ldr	r6, [r3, #24]
 80a24e4:	e9cd 4400 	strd	r4, r4, [sp]
 80a24e8:	466b      	mov	r3, sp
 80a24ea:	6812      	ldr	r2, [r2, #0]
 80a24ec:	47b0      	blx	r6
 80a24ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a24f2:	f003 0306 	and.w	r3, r3, #6
 80a24f6:	2b06      	cmp	r3, #6
 80a24f8:	bf09      	itett	eq
 80a24fa:	2001      	moveq	r0, #1
 80a24fc:	4620      	movne	r0, r4
 80a24fe:	9b00      	ldreq	r3, [sp, #0]
 80a2500:	602b      	streq	r3, [r5, #0]
 80a2502:	b004      	add	sp, #16
 80a2504:	bd70      	pop	{r4, r5, r6, pc}

080a2506 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a2506:	9800      	ldr	r0, [sp, #0]
 80a2508:	4290      	cmp	r0, r2
 80a250a:	bf14      	ite	ne
 80a250c:	2001      	movne	r0, #1
 80a250e:	2006      	moveq	r0, #6
 80a2510:	4770      	bx	lr
	...

080a2514 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a2514:	b510      	push	{r4, lr}
 80a2516:	4604      	mov	r4, r0
 80a2518:	4b02      	ldr	r3, [pc, #8]	; (80a2524 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a251a:	6003      	str	r3, [r0, #0]
 80a251c:	f000 f8cf 	bl	80a26be <_ZNSt9type_infoD1Ev>
 80a2520:	4620      	mov	r0, r4
 80a2522:	bd10      	pop	{r4, pc}
 80a2524:	080a305c 	.word	0x080a305c

080a2528 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a2528:	b510      	push	{r4, lr}
 80a252a:	4604      	mov	r4, r0
 80a252c:	f7ff fff2 	bl	80a2514 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a2530:	4620      	mov	r0, r4
 80a2532:	2108      	movs	r1, #8
 80a2534:	f7fd fdb5 	bl	80a00a2 <_ZdlPvj>
 80a2538:	4620      	mov	r0, r4
 80a253a:	bd10      	pop	{r4, pc}

080a253c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2540:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a2544:	461f      	mov	r7, r3
 80a2546:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a254a:	4598      	cmp	r8, r3
 80a254c:	4606      	mov	r6, r0
 80a254e:	4615      	mov	r5, r2
 80a2550:	d107      	bne.n	80a2562 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a2552:	9907      	ldr	r1, [sp, #28]
 80a2554:	f000 f8b6 	bl	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a2558:	b118      	cbz	r0, 80a2562 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a255a:	7165      	strb	r5, [r4, #5]
 80a255c:	2000      	movs	r0, #0
 80a255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2562:	4639      	mov	r1, r7
 80a2564:	4630      	mov	r0, r6
 80a2566:	f000 f8ad 	bl	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a256a:	2800      	cmp	r0, #0
 80a256c:	d0f6      	beq.n	80a255c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a256e:	2301      	movs	r3, #1
 80a2570:	f8c4 8000 	str.w	r8, [r4]
 80a2574:	7125      	strb	r5, [r4, #4]
 80a2576:	71a3      	strb	r3, [r4, #6]
 80a2578:	e7f0      	b.n	80a255c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a257a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a257a:	b538      	push	{r3, r4, r5, lr}
 80a257c:	4615      	mov	r5, r2
 80a257e:	461c      	mov	r4, r3
 80a2580:	f000 f8a0 	bl	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a2584:	b120      	cbz	r0, 80a2590 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a2586:	2308      	movs	r3, #8
 80a2588:	60e3      	str	r3, [r4, #12]
 80a258a:	2306      	movs	r3, #6
 80a258c:	6025      	str	r5, [r4, #0]
 80a258e:	7123      	strb	r3, [r4, #4]
 80a2590:	bd38      	pop	{r3, r4, r5, pc}

080a2592 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a2592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2596:	4605      	mov	r5, r0
 80a2598:	460c      	mov	r4, r1
 80a259a:	4616      	mov	r6, r2
 80a259c:	461f      	mov	r7, r3
 80a259e:	f000 f891 	bl	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a25a2:	b948      	cbnz	r0, 80a25b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a25a4:	2f03      	cmp	r7, #3
 80a25a6:	d807      	bhi.n	80a25b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a25a8:	6823      	ldr	r3, [r4, #0]
 80a25aa:	4632      	mov	r2, r6
 80a25ac:	4629      	mov	r1, r5
 80a25ae:	4620      	mov	r0, r4
 80a25b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a25b4:	695b      	ldr	r3, [r3, #20]
 80a25b6:	4718      	bx	r3
 80a25b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a25bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a25bc:	b510      	push	{r4, lr}
 80a25be:	4604      	mov	r4, r0
 80a25c0:	4b02      	ldr	r3, [pc, #8]	; (80a25cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a25c2:	6003      	str	r3, [r0, #0]
 80a25c4:	f7ff ffa6 	bl	80a2514 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a25c8:	4620      	mov	r0, r4
 80a25ca:	bd10      	pop	{r4, pc}
 80a25cc:	080a30bc 	.word	0x080a30bc

080a25d0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a25d0:	b510      	push	{r4, lr}
 80a25d2:	4604      	mov	r4, r0
 80a25d4:	f7ff fff2 	bl	80a25bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a25d8:	4620      	mov	r0, r4
 80a25da:	210c      	movs	r1, #12
 80a25dc:	f7fd fd61 	bl	80a00a2 <_ZdlPvj>
 80a25e0:	4620      	mov	r0, r4
 80a25e2:	bd10      	pop	{r4, pc}

080a25e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a25e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a25e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a25ec:	4606      	mov	r6, r0
 80a25ee:	4590      	cmp	r8, r2
 80a25f0:	460f      	mov	r7, r1
 80a25f2:	4615      	mov	r5, r2
 80a25f4:	461c      	mov	r4, r3
 80a25f6:	d00b      	beq.n	80a2610 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a25f8:	68b0      	ldr	r0, [r6, #8]
 80a25fa:	462a      	mov	r2, r5
 80a25fc:	6803      	ldr	r3, [r0, #0]
 80a25fe:	f8cd 8018 	str.w	r8, [sp, #24]
 80a2602:	6a1e      	ldr	r6, [r3, #32]
 80a2604:	4639      	mov	r1, r7
 80a2606:	4623      	mov	r3, r4
 80a2608:	46b4      	mov	ip, r6
 80a260a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a260e:	4760      	bx	ip
 80a2610:	4619      	mov	r1, r3
 80a2612:	f000 f857 	bl	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a2616:	2800      	cmp	r0, #0
 80a2618:	d0ee      	beq.n	80a25f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a261a:	2006      	movs	r0, #6
 80a261c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2620 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a2620:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2624:	460d      	mov	r5, r1
 80a2626:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a262a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a262e:	4619      	mov	r1, r3
 80a2630:	4681      	mov	r9, r0
 80a2632:	4617      	mov	r7, r2
 80a2634:	4698      	mov	r8, r3
 80a2636:	f000 f845 	bl	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a263a:	b190      	cbz	r0, 80a2662 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a263c:	2d00      	cmp	r5, #0
 80a263e:	6034      	str	r4, [r6, #0]
 80a2640:	7137      	strb	r7, [r6, #4]
 80a2642:	db09      	blt.n	80a2658 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a2644:	442c      	add	r4, r5
 80a2646:	45a2      	cmp	sl, r4
 80a2648:	bf0c      	ite	eq
 80a264a:	2406      	moveq	r4, #6
 80a264c:	2401      	movne	r4, #1
 80a264e:	71b4      	strb	r4, [r6, #6]
 80a2650:	2000      	movs	r0, #0
 80a2652:	b001      	add	sp, #4
 80a2654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2658:	3502      	adds	r5, #2
 80a265a:	d1f9      	bne.n	80a2650 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a265c:	2301      	movs	r3, #1
 80a265e:	71b3      	strb	r3, [r6, #6]
 80a2660:	e7f6      	b.n	80a2650 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2662:	4554      	cmp	r4, sl
 80a2664:	d106      	bne.n	80a2674 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2666:	4659      	mov	r1, fp
 80a2668:	4648      	mov	r0, r9
 80a266a:	f000 f82b 	bl	80a26c4 <_ZNKSt9type_infoeqERKS_>
 80a266e:	b108      	cbz	r0, 80a2674 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a2670:	7177      	strb	r7, [r6, #5]
 80a2672:	e7ed      	b.n	80a2650 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a2674:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a2678:	463a      	mov	r2, r7
 80a267a:	6803      	ldr	r3, [r0, #0]
 80a267c:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a2680:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a2684:	69dc      	ldr	r4, [r3, #28]
 80a2686:	4629      	mov	r1, r5
 80a2688:	4643      	mov	r3, r8
 80a268a:	46a4      	mov	ip, r4
 80a268c:	b001      	add	sp, #4
 80a268e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2692:	4760      	bx	ip

080a2694 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a2694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2698:	4607      	mov	r7, r0
 80a269a:	460c      	mov	r4, r1
 80a269c:	4615      	mov	r5, r2
 80a269e:	461e      	mov	r6, r3
 80a26a0:	f7ff ff6b 	bl	80a257a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a26a4:	b948      	cbnz	r0, 80a26ba <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a26a6:	68b8      	ldr	r0, [r7, #8]
 80a26a8:	462a      	mov	r2, r5
 80a26aa:	6803      	ldr	r3, [r0, #0]
 80a26ac:	4621      	mov	r1, r4
 80a26ae:	699f      	ldr	r7, [r3, #24]
 80a26b0:	4633      	mov	r3, r6
 80a26b2:	46bc      	mov	ip, r7
 80a26b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a26b8:	4760      	bx	ip
 80a26ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a26be <_ZNSt9type_infoD1Ev>:
 80a26be:	4770      	bx	lr

080a26c0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a26c0:	2000      	movs	r0, #0
 80a26c2:	4770      	bx	lr

080a26c4 <_ZNKSt9type_infoeqERKS_>:
 80a26c4:	4281      	cmp	r1, r0
 80a26c6:	b508      	push	{r3, lr}
 80a26c8:	d00e      	beq.n	80a26e8 <_ZNKSt9type_infoeqERKS_+0x24>
 80a26ca:	6840      	ldr	r0, [r0, #4]
 80a26cc:	7803      	ldrb	r3, [r0, #0]
 80a26ce:	2b2a      	cmp	r3, #42	; 0x2a
 80a26d0:	d00c      	beq.n	80a26ec <_ZNKSt9type_infoeqERKS_+0x28>
 80a26d2:	6849      	ldr	r1, [r1, #4]
 80a26d4:	780b      	ldrb	r3, [r1, #0]
 80a26d6:	2b2a      	cmp	r3, #42	; 0x2a
 80a26d8:	bf08      	it	eq
 80a26da:	3101      	addeq	r1, #1
 80a26dc:	f000 fa96 	bl	80a2c0c <strcmp>
 80a26e0:	fab0 f080 	clz	r0, r0
 80a26e4:	0940      	lsrs	r0, r0, #5
 80a26e6:	bd08      	pop	{r3, pc}
 80a26e8:	2001      	movs	r0, #1
 80a26ea:	e7fc      	b.n	80a26e6 <_ZNKSt9type_infoeqERKS_+0x22>
 80a26ec:	2000      	movs	r0, #0
 80a26ee:	e7fa      	b.n	80a26e6 <_ZNKSt9type_infoeqERKS_+0x22>

080a26f0 <__aeabi_drsub>:
 80a26f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a26f4:	e002      	b.n	80a26fc <__adddf3>
 80a26f6:	bf00      	nop

080a26f8 <__aeabi_dsub>:
 80a26f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a26fc <__adddf3>:
 80a26fc:	b530      	push	{r4, r5, lr}
 80a26fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2702:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2706:	ea94 0f05 	teq	r4, r5
 80a270a:	bf08      	it	eq
 80a270c:	ea90 0f02 	teqeq	r0, r2
 80a2710:	bf1f      	itttt	ne
 80a2712:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2716:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a271a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a271e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2722:	f000 80e2 	beq.w	80a28ea <__adddf3+0x1ee>
 80a2726:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a272a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a272e:	bfb8      	it	lt
 80a2730:	426d      	neglt	r5, r5
 80a2732:	dd0c      	ble.n	80a274e <__adddf3+0x52>
 80a2734:	442c      	add	r4, r5
 80a2736:	ea80 0202 	eor.w	r2, r0, r2
 80a273a:	ea81 0303 	eor.w	r3, r1, r3
 80a273e:	ea82 0000 	eor.w	r0, r2, r0
 80a2742:	ea83 0101 	eor.w	r1, r3, r1
 80a2746:	ea80 0202 	eor.w	r2, r0, r2
 80a274a:	ea81 0303 	eor.w	r3, r1, r3
 80a274e:	2d36      	cmp	r5, #54	; 0x36
 80a2750:	bf88      	it	hi
 80a2752:	bd30      	pophi	{r4, r5, pc}
 80a2754:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a275c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2760:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2764:	d002      	beq.n	80a276c <__adddf3+0x70>
 80a2766:	4240      	negs	r0, r0
 80a2768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a276c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2774:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2778:	d002      	beq.n	80a2780 <__adddf3+0x84>
 80a277a:	4252      	negs	r2, r2
 80a277c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2780:	ea94 0f05 	teq	r4, r5
 80a2784:	f000 80a7 	beq.w	80a28d6 <__adddf3+0x1da>
 80a2788:	f1a4 0401 	sub.w	r4, r4, #1
 80a278c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2790:	db0d      	blt.n	80a27ae <__adddf3+0xb2>
 80a2792:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2796:	fa22 f205 	lsr.w	r2, r2, r5
 80a279a:	1880      	adds	r0, r0, r2
 80a279c:	f141 0100 	adc.w	r1, r1, #0
 80a27a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a27a4:	1880      	adds	r0, r0, r2
 80a27a6:	fa43 f305 	asr.w	r3, r3, r5
 80a27aa:	4159      	adcs	r1, r3
 80a27ac:	e00e      	b.n	80a27cc <__adddf3+0xd0>
 80a27ae:	f1a5 0520 	sub.w	r5, r5, #32
 80a27b2:	f10e 0e20 	add.w	lr, lr, #32
 80a27b6:	2a01      	cmp	r2, #1
 80a27b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a27bc:	bf28      	it	cs
 80a27be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a27c2:	fa43 f305 	asr.w	r3, r3, r5
 80a27c6:	18c0      	adds	r0, r0, r3
 80a27c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a27cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27d0:	d507      	bpl.n	80a27e2 <__adddf3+0xe6>
 80a27d2:	f04f 0e00 	mov.w	lr, #0
 80a27d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a27da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a27de:	eb6e 0101 	sbc.w	r1, lr, r1
 80a27e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a27e6:	d31b      	bcc.n	80a2820 <__adddf3+0x124>
 80a27e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a27ec:	d30c      	bcc.n	80a2808 <__adddf3+0x10c>
 80a27ee:	0849      	lsrs	r1, r1, #1
 80a27f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a27f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a27f8:	f104 0401 	add.w	r4, r4, #1
 80a27fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2800:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2804:	f080 809a 	bcs.w	80a293c <__adddf3+0x240>
 80a2808:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a280c:	bf08      	it	eq
 80a280e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2812:	f150 0000 	adcs.w	r0, r0, #0
 80a2816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a281a:	ea41 0105 	orr.w	r1, r1, r5
 80a281e:	bd30      	pop	{r4, r5, pc}
 80a2820:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2824:	4140      	adcs	r0, r0
 80a2826:	eb41 0101 	adc.w	r1, r1, r1
 80a282a:	3c01      	subs	r4, #1
 80a282c:	bf28      	it	cs
 80a282e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2832:	d2e9      	bcs.n	80a2808 <__adddf3+0x10c>
 80a2834:	f091 0f00 	teq	r1, #0
 80a2838:	bf04      	itt	eq
 80a283a:	4601      	moveq	r1, r0
 80a283c:	2000      	moveq	r0, #0
 80a283e:	fab1 f381 	clz	r3, r1
 80a2842:	bf08      	it	eq
 80a2844:	3320      	addeq	r3, #32
 80a2846:	f1a3 030b 	sub.w	r3, r3, #11
 80a284a:	f1b3 0220 	subs.w	r2, r3, #32
 80a284e:	da0c      	bge.n	80a286a <__adddf3+0x16e>
 80a2850:	320c      	adds	r2, #12
 80a2852:	dd08      	ble.n	80a2866 <__adddf3+0x16a>
 80a2854:	f102 0c14 	add.w	ip, r2, #20
 80a2858:	f1c2 020c 	rsb	r2, r2, #12
 80a285c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2860:	fa21 f102 	lsr.w	r1, r1, r2
 80a2864:	e00c      	b.n	80a2880 <__adddf3+0x184>
 80a2866:	f102 0214 	add.w	r2, r2, #20
 80a286a:	bfd8      	it	le
 80a286c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2870:	fa01 f102 	lsl.w	r1, r1, r2
 80a2874:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2878:	bfdc      	itt	le
 80a287a:	ea41 010c 	orrle.w	r1, r1, ip
 80a287e:	4090      	lslle	r0, r2
 80a2880:	1ae4      	subs	r4, r4, r3
 80a2882:	bfa2      	ittt	ge
 80a2884:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2888:	4329      	orrge	r1, r5
 80a288a:	bd30      	popge	{r4, r5, pc}
 80a288c:	ea6f 0404 	mvn.w	r4, r4
 80a2890:	3c1f      	subs	r4, #31
 80a2892:	da1c      	bge.n	80a28ce <__adddf3+0x1d2>
 80a2894:	340c      	adds	r4, #12
 80a2896:	dc0e      	bgt.n	80a28b6 <__adddf3+0x1ba>
 80a2898:	f104 0414 	add.w	r4, r4, #20
 80a289c:	f1c4 0220 	rsb	r2, r4, #32
 80a28a0:	fa20 f004 	lsr.w	r0, r0, r4
 80a28a4:	fa01 f302 	lsl.w	r3, r1, r2
 80a28a8:	ea40 0003 	orr.w	r0, r0, r3
 80a28ac:	fa21 f304 	lsr.w	r3, r1, r4
 80a28b0:	ea45 0103 	orr.w	r1, r5, r3
 80a28b4:	bd30      	pop	{r4, r5, pc}
 80a28b6:	f1c4 040c 	rsb	r4, r4, #12
 80a28ba:	f1c4 0220 	rsb	r2, r4, #32
 80a28be:	fa20 f002 	lsr.w	r0, r0, r2
 80a28c2:	fa01 f304 	lsl.w	r3, r1, r4
 80a28c6:	ea40 0003 	orr.w	r0, r0, r3
 80a28ca:	4629      	mov	r1, r5
 80a28cc:	bd30      	pop	{r4, r5, pc}
 80a28ce:	fa21 f004 	lsr.w	r0, r1, r4
 80a28d2:	4629      	mov	r1, r5
 80a28d4:	bd30      	pop	{r4, r5, pc}
 80a28d6:	f094 0f00 	teq	r4, #0
 80a28da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a28de:	bf06      	itte	eq
 80a28e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a28e4:	3401      	addeq	r4, #1
 80a28e6:	3d01      	subne	r5, #1
 80a28e8:	e74e      	b.n	80a2788 <__adddf3+0x8c>
 80a28ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a28ee:	bf18      	it	ne
 80a28f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a28f4:	d029      	beq.n	80a294a <__adddf3+0x24e>
 80a28f6:	ea94 0f05 	teq	r4, r5
 80a28fa:	bf08      	it	eq
 80a28fc:	ea90 0f02 	teqeq	r0, r2
 80a2900:	d005      	beq.n	80a290e <__adddf3+0x212>
 80a2902:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2906:	bf04      	itt	eq
 80a2908:	4619      	moveq	r1, r3
 80a290a:	4610      	moveq	r0, r2
 80a290c:	bd30      	pop	{r4, r5, pc}
 80a290e:	ea91 0f03 	teq	r1, r3
 80a2912:	bf1e      	ittt	ne
 80a2914:	2100      	movne	r1, #0
 80a2916:	2000      	movne	r0, #0
 80a2918:	bd30      	popne	{r4, r5, pc}
 80a291a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a291e:	d105      	bne.n	80a292c <__adddf3+0x230>
 80a2920:	0040      	lsls	r0, r0, #1
 80a2922:	4149      	adcs	r1, r1
 80a2924:	bf28      	it	cs
 80a2926:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a292a:	bd30      	pop	{r4, r5, pc}
 80a292c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2930:	bf3c      	itt	cc
 80a2932:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2936:	bd30      	popcc	{r4, r5, pc}
 80a2938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a293c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2940:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2944:	f04f 0000 	mov.w	r0, #0
 80a2948:	bd30      	pop	{r4, r5, pc}
 80a294a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a294e:	bf1a      	itte	ne
 80a2950:	4619      	movne	r1, r3
 80a2952:	4610      	movne	r0, r2
 80a2954:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2958:	bf1c      	itt	ne
 80a295a:	460b      	movne	r3, r1
 80a295c:	4602      	movne	r2, r0
 80a295e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2962:	bf06      	itte	eq
 80a2964:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2968:	ea91 0f03 	teqeq	r1, r3
 80a296c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2970:	bd30      	pop	{r4, r5, pc}
 80a2972:	bf00      	nop

080a2974 <__aeabi_ui2d>:
 80a2974:	f090 0f00 	teq	r0, #0
 80a2978:	bf04      	itt	eq
 80a297a:	2100      	moveq	r1, #0
 80a297c:	4770      	bxeq	lr
 80a297e:	b530      	push	{r4, r5, lr}
 80a2980:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2984:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2988:	f04f 0500 	mov.w	r5, #0
 80a298c:	f04f 0100 	mov.w	r1, #0
 80a2990:	e750      	b.n	80a2834 <__adddf3+0x138>
 80a2992:	bf00      	nop

080a2994 <__aeabi_i2d>:
 80a2994:	f090 0f00 	teq	r0, #0
 80a2998:	bf04      	itt	eq
 80a299a:	2100      	moveq	r1, #0
 80a299c:	4770      	bxeq	lr
 80a299e:	b530      	push	{r4, r5, lr}
 80a29a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a29a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a29a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a29ac:	bf48      	it	mi
 80a29ae:	4240      	negmi	r0, r0
 80a29b0:	f04f 0100 	mov.w	r1, #0
 80a29b4:	e73e      	b.n	80a2834 <__adddf3+0x138>
 80a29b6:	bf00      	nop

080a29b8 <__aeabi_f2d>:
 80a29b8:	0042      	lsls	r2, r0, #1
 80a29ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a29be:	ea4f 0131 	mov.w	r1, r1, rrx
 80a29c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a29c6:	bf1f      	itttt	ne
 80a29c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a29cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a29d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a29d4:	4770      	bxne	lr
 80a29d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a29da:	bf08      	it	eq
 80a29dc:	4770      	bxeq	lr
 80a29de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a29e2:	bf04      	itt	eq
 80a29e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a29e8:	4770      	bxeq	lr
 80a29ea:	b530      	push	{r4, r5, lr}
 80a29ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a29f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a29f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a29f8:	e71c      	b.n	80a2834 <__adddf3+0x138>
 80a29fa:	bf00      	nop

080a29fc <__aeabi_ul2d>:
 80a29fc:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a00:	bf08      	it	eq
 80a2a02:	4770      	bxeq	lr
 80a2a04:	b530      	push	{r4, r5, lr}
 80a2a06:	f04f 0500 	mov.w	r5, #0
 80a2a0a:	e00a      	b.n	80a2a22 <__aeabi_l2d+0x16>

080a2a0c <__aeabi_l2d>:
 80a2a0c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a10:	bf08      	it	eq
 80a2a12:	4770      	bxeq	lr
 80a2a14:	b530      	push	{r4, r5, lr}
 80a2a16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2a1a:	d502      	bpl.n	80a2a22 <__aeabi_l2d+0x16>
 80a2a1c:	4240      	negs	r0, r0
 80a2a1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2a2e:	f43f aed8 	beq.w	80a27e2 <__adddf3+0xe6>
 80a2a32:	f04f 0203 	mov.w	r2, #3
 80a2a36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a3a:	bf18      	it	ne
 80a2a3c:	3203      	addne	r2, #3
 80a2a3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a42:	bf18      	it	ne
 80a2a44:	3203      	addne	r2, #3
 80a2a46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2a4a:	f1c2 0320 	rsb	r3, r2, #32
 80a2a4e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2a52:	fa20 f002 	lsr.w	r0, r0, r2
 80a2a56:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2a5a:	ea40 000e 	orr.w	r0, r0, lr
 80a2a5e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a62:	4414      	add	r4, r2
 80a2a64:	e6bd      	b.n	80a27e2 <__adddf3+0xe6>
 80a2a66:	bf00      	nop

080a2a68 <__gedf2>:
 80a2a68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2a6c:	e006      	b.n	80a2a7c <__cmpdf2+0x4>
 80a2a6e:	bf00      	nop

080a2a70 <__ledf2>:
 80a2a70:	f04f 0c01 	mov.w	ip, #1
 80a2a74:	e002      	b.n	80a2a7c <__cmpdf2+0x4>
 80a2a76:	bf00      	nop

080a2a78 <__cmpdf2>:
 80a2a78:	f04f 0c01 	mov.w	ip, #1
 80a2a7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2a8c:	bf18      	it	ne
 80a2a8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2a92:	d01b      	beq.n	80a2acc <__cmpdf2+0x54>
 80a2a94:	b001      	add	sp, #4
 80a2a96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2a9a:	bf0c      	ite	eq
 80a2a9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2aa0:	ea91 0f03 	teqne	r1, r3
 80a2aa4:	bf02      	ittt	eq
 80a2aa6:	ea90 0f02 	teqeq	r0, r2
 80a2aaa:	2000      	moveq	r0, #0
 80a2aac:	4770      	bxeq	lr
 80a2aae:	f110 0f00 	cmn.w	r0, #0
 80a2ab2:	ea91 0f03 	teq	r1, r3
 80a2ab6:	bf58      	it	pl
 80a2ab8:	4299      	cmppl	r1, r3
 80a2aba:	bf08      	it	eq
 80a2abc:	4290      	cmpeq	r0, r2
 80a2abe:	bf2c      	ite	cs
 80a2ac0:	17d8      	asrcs	r0, r3, #31
 80a2ac2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2ac6:	f040 0001 	orr.w	r0, r0, #1
 80a2aca:	4770      	bx	lr
 80a2acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2ad4:	d102      	bne.n	80a2adc <__cmpdf2+0x64>
 80a2ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2ada:	d107      	bne.n	80a2aec <__cmpdf2+0x74>
 80a2adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2ae4:	d1d6      	bne.n	80a2a94 <__cmpdf2+0x1c>
 80a2ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2aea:	d0d3      	beq.n	80a2a94 <__cmpdf2+0x1c>
 80a2aec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2af0:	4770      	bx	lr
 80a2af2:	bf00      	nop

080a2af4 <__aeabi_cdrcmple>:
 80a2af4:	4684      	mov	ip, r0
 80a2af6:	4610      	mov	r0, r2
 80a2af8:	4662      	mov	r2, ip
 80a2afa:	468c      	mov	ip, r1
 80a2afc:	4619      	mov	r1, r3
 80a2afe:	4663      	mov	r3, ip
 80a2b00:	e000      	b.n	80a2b04 <__aeabi_cdcmpeq>
 80a2b02:	bf00      	nop

080a2b04 <__aeabi_cdcmpeq>:
 80a2b04:	b501      	push	{r0, lr}
 80a2b06:	f7ff ffb7 	bl	80a2a78 <__cmpdf2>
 80a2b0a:	2800      	cmp	r0, #0
 80a2b0c:	bf48      	it	mi
 80a2b0e:	f110 0f00 	cmnmi.w	r0, #0
 80a2b12:	bd01      	pop	{r0, pc}

080a2b14 <__aeabi_dcmpeq>:
 80a2b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b18:	f7ff fff4 	bl	80a2b04 <__aeabi_cdcmpeq>
 80a2b1c:	bf0c      	ite	eq
 80a2b1e:	2001      	moveq	r0, #1
 80a2b20:	2000      	movne	r0, #0
 80a2b22:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b26:	bf00      	nop

080a2b28 <__aeabi_dcmplt>:
 80a2b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b2c:	f7ff ffea 	bl	80a2b04 <__aeabi_cdcmpeq>
 80a2b30:	bf34      	ite	cc
 80a2b32:	2001      	movcc	r0, #1
 80a2b34:	2000      	movcs	r0, #0
 80a2b36:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b3a:	bf00      	nop

080a2b3c <__aeabi_dcmple>:
 80a2b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b40:	f7ff ffe0 	bl	80a2b04 <__aeabi_cdcmpeq>
 80a2b44:	bf94      	ite	ls
 80a2b46:	2001      	movls	r0, #1
 80a2b48:	2000      	movhi	r0, #0
 80a2b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b4e:	bf00      	nop

080a2b50 <__aeabi_dcmpge>:
 80a2b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b54:	f7ff ffce 	bl	80a2af4 <__aeabi_cdrcmple>
 80a2b58:	bf94      	ite	ls
 80a2b5a:	2001      	movls	r0, #1
 80a2b5c:	2000      	movhi	r0, #0
 80a2b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b62:	bf00      	nop

080a2b64 <__aeabi_dcmpgt>:
 80a2b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2b68:	f7ff ffc4 	bl	80a2af4 <__aeabi_cdrcmple>
 80a2b6c:	bf34      	ite	cc
 80a2b6e:	2001      	movcc	r0, #1
 80a2b70:	2000      	movcs	r0, #0
 80a2b72:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2b76:	bf00      	nop

080a2b78 <atexit>:
 80a2b78:	2300      	movs	r3, #0
 80a2b7a:	4601      	mov	r1, r0
 80a2b7c:	461a      	mov	r2, r3
 80a2b7e:	4618      	mov	r0, r3
 80a2b80:	f000 b87a 	b.w	80a2c78 <__register_exitproc>

080a2b84 <memcpy>:
 80a2b84:	440a      	add	r2, r1
 80a2b86:	4291      	cmp	r1, r2
 80a2b88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a2b8c:	d100      	bne.n	80a2b90 <memcpy+0xc>
 80a2b8e:	4770      	bx	lr
 80a2b90:	b510      	push	{r4, lr}
 80a2b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2b96:	4291      	cmp	r1, r2
 80a2b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2b9c:	d1f9      	bne.n	80a2b92 <memcpy+0xe>
 80a2b9e:	bd10      	pop	{r4, pc}

080a2ba0 <memset>:
 80a2ba0:	4603      	mov	r3, r0
 80a2ba2:	4402      	add	r2, r0
 80a2ba4:	4293      	cmp	r3, r2
 80a2ba6:	d100      	bne.n	80a2baa <memset+0xa>
 80a2ba8:	4770      	bx	lr
 80a2baa:	f803 1b01 	strb.w	r1, [r3], #1
 80a2bae:	e7f9      	b.n	80a2ba4 <memset+0x4>

080a2bb0 <srand>:
 80a2bb0:	b538      	push	{r3, r4, r5, lr}
 80a2bb2:	4b10      	ldr	r3, [pc, #64]	; (80a2bf4 <srand+0x44>)
 80a2bb4:	4604      	mov	r4, r0
 80a2bb6:	681d      	ldr	r5, [r3, #0]
 80a2bb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2bba:	b9b3      	cbnz	r3, 80a2bea <srand+0x3a>
 80a2bbc:	2018      	movs	r0, #24
 80a2bbe:	f7fe f921 	bl	80a0e04 <malloc>
 80a2bc2:	4602      	mov	r2, r0
 80a2bc4:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2bc6:	b920      	cbnz	r0, 80a2bd2 <srand+0x22>
 80a2bc8:	2142      	movs	r1, #66	; 0x42
 80a2bca:	4b0b      	ldr	r3, [pc, #44]	; (80a2bf8 <srand+0x48>)
 80a2bcc:	480b      	ldr	r0, [pc, #44]	; (80a2bfc <srand+0x4c>)
 80a2bce:	f7fe f941 	bl	80a0e54 <__assert_func>
 80a2bd2:	490b      	ldr	r1, [pc, #44]	; (80a2c00 <srand+0x50>)
 80a2bd4:	4b0b      	ldr	r3, [pc, #44]	; (80a2c04 <srand+0x54>)
 80a2bd6:	e9c0 1300 	strd	r1, r3, [r0]
 80a2bda:	4b0b      	ldr	r3, [pc, #44]	; (80a2c08 <srand+0x58>)
 80a2bdc:	2100      	movs	r1, #0
 80a2bde:	6083      	str	r3, [r0, #8]
 80a2be0:	230b      	movs	r3, #11
 80a2be2:	8183      	strh	r3, [r0, #12]
 80a2be4:	2001      	movs	r0, #1
 80a2be6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a2bea:	2200      	movs	r2, #0
 80a2bec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2bee:	611c      	str	r4, [r3, #16]
 80a2bf0:	615a      	str	r2, [r3, #20]
 80a2bf2:	bd38      	pop	{r3, r4, r5, pc}
 80a2bf4:	2000003c 	.word	0x2000003c
 80a2bf8:	080a30f5 	.word	0x080a30f5
 80a2bfc:	080a310c 	.word	0x080a310c
 80a2c00:	abcd330e 	.word	0xabcd330e
 80a2c04:	e66d1234 	.word	0xe66d1234
 80a2c08:	0005deec 	.word	0x0005deec

080a2c0c <strcmp>:
 80a2c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2c14:	2a01      	cmp	r2, #1
 80a2c16:	bf28      	it	cs
 80a2c18:	429a      	cmpcs	r2, r3
 80a2c1a:	d0f7      	beq.n	80a2c0c <strcmp>
 80a2c1c:	1ad0      	subs	r0, r2, r3
 80a2c1e:	4770      	bx	lr

080a2c20 <strcpy>:
 80a2c20:	4603      	mov	r3, r0
 80a2c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2c26:	f803 2b01 	strb.w	r2, [r3], #1
 80a2c2a:	2a00      	cmp	r2, #0
 80a2c2c:	d1f9      	bne.n	80a2c22 <strcpy+0x2>
 80a2c2e:	4770      	bx	lr

080a2c30 <strdup>:
 80a2c30:	4b02      	ldr	r3, [pc, #8]	; (80a2c3c <strdup+0xc>)
 80a2c32:	4601      	mov	r1, r0
 80a2c34:	6818      	ldr	r0, [r3, #0]
 80a2c36:	f000 b803 	b.w	80a2c40 <_strdup_r>
 80a2c3a:	bf00      	nop
 80a2c3c:	2000003c 	.word	0x2000003c

080a2c40 <_strdup_r>:
 80a2c40:	b570      	push	{r4, r5, r6, lr}
 80a2c42:	4604      	mov	r4, r0
 80a2c44:	4608      	mov	r0, r1
 80a2c46:	460d      	mov	r5, r1
 80a2c48:	f000 f80d 	bl	80a2c66 <strlen>
 80a2c4c:	1c46      	adds	r6, r0, #1
 80a2c4e:	4631      	mov	r1, r6
 80a2c50:	4620      	mov	r0, r4
 80a2c52:	f7fe f8f7 	bl	80a0e44 <_malloc_r>
 80a2c56:	4604      	mov	r4, r0
 80a2c58:	b118      	cbz	r0, 80a2c62 <_strdup_r+0x22>
 80a2c5a:	4632      	mov	r2, r6
 80a2c5c:	4629      	mov	r1, r5
 80a2c5e:	f7ff ff91 	bl	80a2b84 <memcpy>
 80a2c62:	4620      	mov	r0, r4
 80a2c64:	bd70      	pop	{r4, r5, r6, pc}

080a2c66 <strlen>:
 80a2c66:	4603      	mov	r3, r0
 80a2c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2c6c:	2a00      	cmp	r2, #0
 80a2c6e:	d1fb      	bne.n	80a2c68 <strlen+0x2>
 80a2c70:	1a18      	subs	r0, r3, r0
 80a2c72:	3801      	subs	r0, #1
 80a2c74:	4770      	bx	lr
	...

080a2c78 <__register_exitproc>:
 80a2c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2c7c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a2d2c <__register_exitproc+0xb4>
 80a2c80:	4606      	mov	r6, r0
 80a2c82:	f8d8 0000 	ldr.w	r0, [r8]
 80a2c86:	461f      	mov	r7, r3
 80a2c88:	460d      	mov	r5, r1
 80a2c8a:	4691      	mov	r9, r2
 80a2c8c:	f000 f858 	bl	80a2d40 <__retarget_lock_acquire_recursive>
 80a2c90:	4b27      	ldr	r3, [pc, #156]	; (80a2d30 <__register_exitproc+0xb8>)
 80a2c92:	681c      	ldr	r4, [r3, #0]
 80a2c94:	b934      	cbnz	r4, 80a2ca4 <__register_exitproc+0x2c>
 80a2c96:	4c27      	ldr	r4, [pc, #156]	; (80a2d34 <__register_exitproc+0xbc>)
 80a2c98:	601c      	str	r4, [r3, #0]
 80a2c9a:	4b27      	ldr	r3, [pc, #156]	; (80a2d38 <__register_exitproc+0xc0>)
 80a2c9c:	b113      	cbz	r3, 80a2ca4 <__register_exitproc+0x2c>
 80a2c9e:	681b      	ldr	r3, [r3, #0]
 80a2ca0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a2ca4:	6863      	ldr	r3, [r4, #4]
 80a2ca6:	2b1f      	cmp	r3, #31
 80a2ca8:	dd07      	ble.n	80a2cba <__register_exitproc+0x42>
 80a2caa:	f8d8 0000 	ldr.w	r0, [r8]
 80a2cae:	f000 f849 	bl	80a2d44 <__retarget_lock_release_recursive>
 80a2cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2cba:	b35e      	cbz	r6, 80a2d14 <__register_exitproc+0x9c>
 80a2cbc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2cc0:	b988      	cbnz	r0, 80a2ce6 <__register_exitproc+0x6e>
 80a2cc2:	4b1e      	ldr	r3, [pc, #120]	; (80a2d3c <__register_exitproc+0xc4>)
 80a2cc4:	b923      	cbnz	r3, 80a2cd0 <__register_exitproc+0x58>
 80a2cc6:	f8d8 0000 	ldr.w	r0, [r8]
 80a2cca:	f000 f83a 	bl	80a2d42 <__retarget_lock_release>
 80a2cce:	e7f0      	b.n	80a2cb2 <__register_exitproc+0x3a>
 80a2cd0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2cd4:	f7fe f896 	bl	80a0e04 <malloc>
 80a2cd8:	2800      	cmp	r0, #0
 80a2cda:	d0f4      	beq.n	80a2cc6 <__register_exitproc+0x4e>
 80a2cdc:	2300      	movs	r3, #0
 80a2cde:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2ce2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a2ce6:	2201      	movs	r2, #1
 80a2ce8:	6863      	ldr	r3, [r4, #4]
 80a2cea:	2e02      	cmp	r6, #2
 80a2cec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2cf0:	fa02 f203 	lsl.w	r2, r2, r3
 80a2cf4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2cf8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2cfc:	ea43 0302 	orr.w	r3, r3, r2
 80a2d00:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2d04:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2d08:	bf02      	ittt	eq
 80a2d0a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2d0e:	4313      	orreq	r3, r2
 80a2d10:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a2d14:	6863      	ldr	r3, [r4, #4]
 80a2d16:	f8d8 0000 	ldr.w	r0, [r8]
 80a2d1a:	1c5a      	adds	r2, r3, #1
 80a2d1c:	3302      	adds	r3, #2
 80a2d1e:	6062      	str	r2, [r4, #4]
 80a2d20:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2d24:	f000 f80e 	bl	80a2d44 <__retarget_lock_release_recursive>
 80a2d28:	2000      	movs	r0, #0
 80a2d2a:	e7c4      	b.n	80a2cb6 <__register_exitproc+0x3e>
 80a2d2c:	200000a0 	.word	0x200000a0
 80a2d30:	200005c0 	.word	0x200005c0
 80a2d34:	20000534 	.word	0x20000534
 80a2d38:	00000000 	.word	0x00000000
 80a2d3c:	080a0e05 	.word	0x080a0e05

080a2d40 <__retarget_lock_acquire_recursive>:
 80a2d40:	4770      	bx	lr

080a2d42 <__retarget_lock_release>:
 80a2d42:	4770      	bx	lr

080a2d44 <__retarget_lock_release_recursive>:
 80a2d44:	4770      	bx	lr

080a2d46 <link_code_end>:
	...

080a2d48 <dynalib_user>:
 80a2d48:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2d58:	0000 0000 716d 7474 7220 7465 7275 206e     ....mqtt return 
 80a2d68:	6f63 6564 3d20 0020 6f43 6e6e 6365 6974     code = .Connecti
 80a2d78:	6e6f 6420 6f72 7070 6465 4400 6169 656c     on dropped.Diale
 80a2d88:	2064 5300 6174 7472 6d20 2065 7075 2e2e     d .Start me up..
 80a2d98:	002e 6264 6775 4300 6e6f 656e 7463 6465     ..dbug.Connected
 80a2da8:	7420 206f 4148 4d00 5451 0054 6146 6c69      to HA.MQTT.Fail
 80a2db8:	6465 6320 6e6f 656e 7463 4820 2041 202d     ed connect HA - 
 80a2dc8:	6863 6365 206b 6573 7263 7465 2e73 0068     check secrets.h.
 80a2dd8:	6168 722f 746f 7261 2f79 756e 626d 7265     ha/rotary/number
 80a2de8:	6800 2f61 6f72 6174 7972 642f 6769 7469     .ha/rotary/digit
 80a2df8:	4400 4149 454c 0052 5755 3132 716d 7474     .DIALER.UW21mqtt
 80a2e08:	7500 6974 736c 716d 7474 0000 4d04 5451     .utilsmqtt...MQT
 80a2e18:	0454 0600 514d 7349 7064 0003               T...MQIsdp..

080a2e24 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2e2c:	0ea3 080a 0ea9 080a 0ef9 080a 0eb7 080a     ................
 80a2e3c:	0ea5 080a                                   ....

080a2e40 <_ZTV7TwoWire>:
	...
 80a2e48:	140d 080a 1457 080a 142f 080a 140f 080a     ....W.../.......
 80a2e58:	1437 080a 143f 080a 1447 080a 144f 080a     7...?...G...O...

080a2e68 <_ZTV9IPAddress>:
	...
 80a2e70:	148b 080a 1489 080a 14bd 080a 7061 0070     ............app.

080a2e80 <_ZTVN5spark12NetworkClassE>:
	...
 80a2e88:	1581 080a 158b 080a 1595 080a 159f 080a     ................
 80a2e98:	15a9 080a 15b5 080a 15c1 080a 15c9 080a     ................
 80a2ea8:	15d1 080a 15dd 080a 15e5 080a 15ef 080a     ................
 80a2eb8:	15f9 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a2ec8:	6569 746e 7320 636f 656b 3d74 7825 0000     ient socket=%x..

080a2ed8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2ee0:	194d 080a 1975 080a 1d63 080a 1983 080a     M...u...c.......
 80a2ef0:	1951 080a                                   Q...

080a2ef4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a2efc <_ZTV9TCPClient>:
	...
 80a2f04:	1989 080a 19bd 080a 18d5 080a 18ef 080a     ................
 80a2f14:	1b65 080a 1917 080a 19f1 080a 194b 080a     e...........K...
 80a2f24:	1a85 080a 1d69 080a 1a1f 080a 1bd9 080a     ....i...........
 80a2f34:	1c87 080a 1c3f 080a 18ff 080a 1c4d 080a     ....?.......M...
 80a2f44:	19d1 080a 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
 80a2f54:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a2f64 <_ZTV11USARTSerial>:
	...
 80a2f6c:	1de9 080a 1e51 080a 1e2d 080a 1675 080a     ....Q...-...u...
 80a2f7c:	1dfd 080a 1e19 080a 1e0b 080a 1e27 080a     ............'...
 80a2f8c:	1deb 080a 1def 080a                         ........

080a2f94 <_ZTV9USBSerial>:
	...
 80a2f9c:	1e8f 080a 1ef5 080a 1ecd 080a 1675 080a     ............u...
 80a2fac:	1ebf 080a 1e91 080a 1ea1 080a 1eef 080a     ................
 80a2fbc:	1eb1 080a 1e89 080a                         ........

080a2fc4 <_ZTVN5spark9WiFiClassE>:
	...
 80a2fcc:	20b7 080a 20ad 080a 20a3 080a 2015 080a     . ... ... ... ..
 80a2fdc:	2097 080a 208b 080a 15c1 080a 15c9 080a     . ... ..........
 80a2fec:	207f 080a 2077 080a 206d 080a 2063 080a     . ..w ..m ..c ..
 80a2ffc:	201f 080a                                   . ..

080a3000 <_ZSt7nothrow>:
	...

080a3001 <_ZTSSt19_Sp_make_shared_tag>:
 80a3001:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a3011:	6572 5f64 6174 0067 0000                     red_tag....

080a301c <_ZTISt19_Sp_make_shared_tag>:
 80a301c:	305c 080a 3001 080a                         \0...0..

080a3024 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a3024:	30bc 080a 3030 080a 30e0 080a               .0..00...0..

080a3030 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a3030:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a3040:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a3050:	0045 0000                                   E...

080a3054 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a3054:	0000 0000 3024 080a 2515 080a 2529 080a     ....$0...%..)%..
 80a3064:	26c1 080a 26c1 080a 2593 080a 24d5 080a     .&...&...%...$..
 80a3074:	257b 080a 253d 080a 2507 080a               {%..=%...%..

080a3080 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a3080:	30bc 080a 308c 080a 3024 080a               .0...0..$0..

080a308c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a308c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a309c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a30ac:	666e 456f 0000 0000                         nfoE....

080a30b4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a30b4:	0000 0000 3080 080a 25bd 080a 25d1 080a     .....0...%...%..
 80a30c4:	26c1 080a 26c1 080a 2593 080a 24d5 080a     .&...&...%...$..
 80a30d4:	2695 080a 2621 080a 25e5 080a               .&..!&...%..

080a30e0 <_ZTISt9type_info>:
 80a30e0:	305c 080a 30e8 080a                         \0...0..

080a30e8 <_ZTSSt9type_info>:
 80a30e8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
 80a30f8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
 80a3108:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
 80a3118:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
 80a3128:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
 80a3138:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
 80a3148:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
 80a3158:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

080a3165 <link_const_variable_data_end>:
 80a3165:	00          	.byte	0x00
	...

080a3168 <link_constructors_location>:
 80a3168:	080a040d 	.word	0x080a040d
 80a316c:	080a1571 	.word	0x080a1571
 80a3170:	080a1661 	.word	0x080a1661
 80a3174:	080a1701 	.word	0x080a1701
 80a3178:	080a18b1 	.word	0x080a18b1
 80a317c:	080a1dd5 	.word	0x080a1dd5
 80a3180:	080a20c1 	.word	0x080a20c1
 80a3184:	080a2421 	.word	0x080a2421

080a3188 <link_constructors_end>:
	...
