
/Users/catlett/Dropbox/CODE/RotaryPhone/target/4.0.0/argon/RotaryPhone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000032b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b72d0  000b72d0  000072d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b72f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a4  2003e558  000b72f8  0001e558  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f4  2003e600  2003e600  0002e600  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b739c  000b739c  0002739c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b73c4  000b73c4  000273c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00124ee0  00000000  00000000  000273c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013ef0  00000000  00000000  0014c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003df38  00000000  00000000  00160198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003000  00000000  00000000  0019e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ae80  00000000  00000000  001a10d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039326  00000000  00000000  001abf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00040f4a  00000000  00000000  001e5276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001395f6  00000000  00000000  002261c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008954  00000000  00000000  0035f7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fe2d 	bl	b6c8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fe35 	bl	b6ca8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e558 	.word	0x2003e558
   b4048:	000b72f8 	.word	0x000b72f8
   b404c:	2003e5fc 	.word	0x2003e5fc
   b4050:	2003e600 	.word	0x2003e600
   b4054:	2003e7f1 	.word	0x2003e7f1

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f9a3 	bl	b63a8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b72a8 	.word	0x000b72a8
   b407c:	000b72cc 	.word	0x000b72cc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b976 	b.w	b4370 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8b9 	bl	b41fc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b943 	b.w	b6318 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bec1 	b.w	b4e18 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bebf 	b.w	b4e18 <malloc>

000b409a <_ZdaPv>:
   b409a:	f000 bec5 	b.w	b4e28 <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bec3 	b.w	b4e28 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40b4:	b513      	push	{r0, r1, r4, lr}
   b40b6:	4b05      	ldr	r3, [pc, #20]	; (b40cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b40b8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40ba:	f88d 3000 	strb.w	r3, [sp]
   b40be:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40c0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40c2:	f001 f84f 	bl	b5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b40c6:	4620      	mov	r0, r4
   b40c8:	b002      	add	sp, #8
   b40ca:	bd10      	pop	{r4, pc}
   b40cc:	2003e600 	.word	0x2003e600

000b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40d0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40d2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40d4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40d6:	b17c      	cbz	r4, b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b40d8:	6863      	ldr	r3, [r4, #4]
   b40da:	3b01      	subs	r3, #1
   b40dc:	6063      	str	r3, [r4, #4]
   b40de:	b95b      	cbnz	r3, b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b40e0:	6823      	ldr	r3, [r4, #0]
   b40e2:	4620      	mov	r0, r4
   b40e4:	689b      	ldr	r3, [r3, #8]
   b40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40e8:	68a3      	ldr	r3, [r4, #8]
   b40ea:	3b01      	subs	r3, #1
   b40ec:	60a3      	str	r3, [r4, #8]
   b40ee:	b91b      	cbnz	r3, b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b40f0:	6823      	ldr	r3, [r4, #0]
   b40f2:	4620      	mov	r0, r4
   b40f4:	68db      	ldr	r3, [r3, #12]
   b40f6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b40f8:	4628      	mov	r0, r5
   b40fa:	bd38      	pop	{r3, r4, r5, pc}

000b40fc <_Z13mqtt_callbackPcPhj>:
const char *TOPIC_NUMBER = "ha/rotary/number";  // sending entire dialed sequence
#define MQTT_KEEPALIVE 30 * 60              //  sec
// MQTT functions
void timer_callback_send_mqqt_data();
 // MQTT callbacks implementation
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   b40fc:	b5b0      	push	{r4, r5, r7, lr}
     char p[length + 1];
   b40fe:	f102 0308 	add.w	r3, r2, #8
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   b4102:	b084      	sub	sp, #16
     char p[length + 1];
   b4104:	f023 0307 	bic.w	r3, r3, #7
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   b4108:	af02      	add	r7, sp, #8
     char p[length + 1];
   b410a:	ebad 0d03 	sub.w	sp, sp, r3
   b410e:	ad02      	add	r5, sp, #8
void mqtt_callback(char* topic, byte* payload, unsigned int length) {
   b4110:	4614      	mov	r4, r2
     memcpy(p, payload, length);
   b4112:	4628      	mov	r0, r5
   b4114:	f002 fdba 	bl	b6c8c <memcpy>
     p[length] = 0; // was = NULL but that threw a warning
   b4118:	2300      	movs	r3, #0
   b411a:	552b      	strb	r3, [r5, r4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b411c:	4b08      	ldr	r3, [pc, #32]	; (b4140 <_Z13mqtt_callbackPcPhj+0x44>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b411e:	4909      	ldr	r1, [pc, #36]	; (b4144 <_Z13mqtt_callbackPcPhj+0x48>)
   b4120:	781b      	ldrb	r3, [r3, #0]
   b4122:	f88d 3000 	strb.w	r3, [sp]
   b4126:	462a      	mov	r2, r5
   b4128:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b412c:	4638      	mov	r0, r7
   b412e:	f001 f819 	bl	b5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4132:	1d38      	adds	r0, r7, #4
   b4134:	f7ff ffcc 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     Particle.publish("mqtt", p, 3600, PRIVATE);
 }
   b4138:	3708      	adds	r7, #8
   b413a:	46bd      	mov	sp, r7
   b413c:	bdb0      	pop	{r4, r5, r7, pc}
   b413e:	bf00      	nop
   b4140:	2003e601 	.word	0x2003e601
   b4144:	000b6f0c 	.word	0x000b6f0c

000b4148 <_Z8tellHASSPKc6String>:
  }

}
// mqtt comms

void tellHASS(const char *ha_topic, String ha_payload) {
   b4148:	b530      	push	{r4, r5, lr}
   b414a:	4604      	mov	r4, r0
   b414c:	b087      	sub	sp, #28
  int returnCode = 0;
  delay(100); // take it easy on the server
   b414e:	2064      	movs	r0, #100	; 0x64
void tellHASS(const char *ha_topic, String ha_payload) {
   b4150:	460d      	mov	r5, r1
  delay(100); // take it easy on the server
   b4152:	f000 fea1 	bl	b4e98 <delay>
  if(client.isConnected()) {
   b4156:	4822      	ldr	r0, [pc, #136]	; (b41e0 <_Z8tellHASSPKc6String+0x98>)
   b4158:	f000 fab9 	bl	b46ce <_ZN4MQTT11isConnectedEv>
   b415c:	b308      	cbz	r0, b41a2 <_Z8tellHASSPKc6String+0x5a>
    returnCode = client.publish(ha_topic, ha_payload);
   b415e:	4621      	mov	r1, r4
   b4160:	682a      	ldr	r2, [r5, #0]
   b4162:	481f      	ldr	r0, [pc, #124]	; (b41e0 <_Z8tellHASSPKc6String+0x98>)
   b4164:	f000 fc2f 	bl	b49c6 <_ZN4MQTT7publishEPKcS1_>
    if (returnCode != 1) {
   b4168:	4604      	mov	r4, r0
   b416a:	2800      	cmp	r0, #0
   b416c:	d136      	bne.n	b41dc <_Z8tellHASSPKc6String+0x94>
      delay(1000);
   b416e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4172:	f000 fe91 	bl	b4e98 <delay>
      Particle.publish("mqtt return code = ", String(returnCode));
   b4176:	4621      	mov	r1, r4
   b4178:	220a      	movs	r2, #10
   b417a:	a802      	add	r0, sp, #8
   b417c:	f001 fc07 	bl	b598e <_ZN6StringC1Eih>
   b4180:	9a02      	ldr	r2, [sp, #8]
   b4182:	4918      	ldr	r1, [pc, #96]	; (b41e4 <_Z8tellHASSPKc6String+0x9c>)
   b4184:	4668      	mov	r0, sp
   b4186:	f7ff ff95 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b418a:	a801      	add	r0, sp, #4
   b418c:	f7ff ffa0 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4190:	a802      	add	r0, sp, #8
   b4192:	f001 fb71 	bl	b5878 <_ZN6StringD1Ev>
      client.disconnect();
   b4196:	4812      	ldr	r0, [pc, #72]	; (b41e0 <_Z8tellHASSPKc6String+0x98>)
    delay(1000);
    Particle.publish("mqtt", "Connection dropped");
    client.connect(CLIENT_NAME, HA_USR, HA_PWD);
    client.publish(ha_topic, ha_payload);
  }
   b4198:	b007      	add	sp, #28
   b419a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      client.disconnect();
   b419e:	f000 ba5d 	b.w	b465c <_ZN4MQTT10disconnectEv>
    delay(1000);
   b41a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b41a6:	f000 fe77 	bl	b4e98 <delay>
    Particle.publish("mqtt", "Connection dropped");
   b41aa:	4a0f      	ldr	r2, [pc, #60]	; (b41e8 <_Z8tellHASSPKc6String+0xa0>)
   b41ac:	490f      	ldr	r1, [pc, #60]	; (b41ec <_Z8tellHASSPKc6String+0xa4>)
   b41ae:	a802      	add	r0, sp, #8
   b41b0:	f7ff ff80 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b41b4:	a803      	add	r0, sp, #12
   b41b6:	f7ff ff8b 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    client.connect(CLIENT_NAME, HA_USR, HA_PWD);
   b41ba:	4b0d      	ldr	r3, [pc, #52]	; (b41f0 <_Z8tellHASSPKc6String+0xa8>)
   b41bc:	4a0d      	ldr	r2, [pc, #52]	; (b41f4 <_Z8tellHASSPKc6String+0xac>)
   b41be:	490e      	ldr	r1, [pc, #56]	; (b41f8 <_Z8tellHASSPKc6String+0xb0>)
   b41c0:	681b      	ldr	r3, [r3, #0]
   b41c2:	6812      	ldr	r2, [r2, #0]
   b41c4:	6809      	ldr	r1, [r1, #0]
   b41c6:	4806      	ldr	r0, [pc, #24]	; (b41e0 <_Z8tellHASSPKc6String+0x98>)
   b41c8:	f000 fb72 	bl	b48b0 <_ZN4MQTT7connectEPKcS1_S1_>
    client.publish(ha_topic, ha_payload);
   b41cc:	682a      	ldr	r2, [r5, #0]
   b41ce:	4804      	ldr	r0, [pc, #16]	; (b41e0 <_Z8tellHASSPKc6String+0x98>)
   b41d0:	4621      	mov	r1, r4
   b41d2:	b007      	add	sp, #28
   b41d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    client.publish(ha_topic, ha_payload);
   b41d8:	f000 bbf5 	b.w	b49c6 <_ZN4MQTT7publishEPKcS1_>
   b41dc:	b007      	add	sp, #28
   b41de:	bd30      	pop	{r4, r5, pc}
   b41e0:	2003e608 	.word	0x2003e608
   b41e4:	000b6e64 	.word	0x000b6e64
   b41e8:	000b6e78 	.word	0x000b6e78
   b41ec:	000b6f0c 	.word	0x000b6f0c
   b41f0:	2003e55c 	.word	0x2003e55c
   b41f4:	2003e560 	.word	0x2003e560
   b41f8:	2003e558 	.word	0x2003e558

000b41fc <loop>:
void loop() {
   b41fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  delay(25);
   b4200:	2019      	movs	r0, #25
void loop() {
   b4202:	b086      	sub	sp, #24
  delay(25);
   b4204:	f000 fe48 	bl	b4e98 <delay>
  reading = digitalRead(in);
   b4208:	4b48      	ldr	r3, [pc, #288]	; (b432c <loop+0x130>)
   b420a:	4c49      	ldr	r4, [pc, #292]	; (b4330 <loop+0x134>)
   b420c:	8818      	ldrh	r0, [r3, #0]
      if ((millis() - lastStateChangeTime) > userHasFinishedDialingAfterMs) {  // finished dialing 
   b420e:	4d49      	ldr	r5, [pc, #292]	; (b4334 <loop+0x138>)
  reading = digitalRead(in);
   b4210:	f002 f94b 	bl	b64aa <digitalRead>
   b4214:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4216:	f000 fc13 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
      if ((millis() - lastStateChangeTime) > userHasFinishedDialingAfterMs) {  // finished dialing 
   b421a:	f002 fc2f 	bl	b6a7c <__aeabi_ui2d>
   b421e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4222:	f002 faed 	bl	b6800 <__aeabi_dsub>
   b4226:	4b44      	ldr	r3, [pc, #272]	; (b4338 <loop+0x13c>)
   b4228:	e9d3 2300 	ldrd	r2, r3, [r3]
   b422c:	f002 fd1e 	bl	b6c6c <__aeabi_dcmpgt>
   b4230:	b348      	cbz	r0, b4286 <loop+0x8a>
        if (dialing) {
   b4232:	f8df 8134 	ldr.w	r8, [pc, #308]	; b4368 <loop+0x16c>
   b4236:	f898 3000 	ldrb.w	r3, [r8]
   b423a:	b323      	cbz	r3, b4286 <loop+0x8a>
          dialedNumber = "";
   b423c:	493f      	ldr	r1, [pc, #252]	; (b433c <loop+0x140>)
   b423e:	4840      	ldr	r0, [pc, #256]	; (b4340 <loop+0x144>)
   b4240:	f8df 9118 	ldr.w	r9, [pc, #280]	; b435c <loop+0x160>
          for (int d=0; d<phoneNumberDigits; d++) {
   b4244:	4f3f      	ldr	r7, [pc, #252]	; (b4344 <loop+0x148>)
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
   b4246:	f8df a0f8 	ldr.w	sl, [pc, #248]	; b4340 <loop+0x144>
          dialedNumber = "";
   b424a:	f001 fb8e 	bl	b596a <_ZN6StringaSEPKc>
          for (int d=0; d<phoneNumberDigits; d++) {
   b424e:	2600      	movs	r6, #0
   b4250:	683b      	ldr	r3, [r7, #0]
   b4252:	42b3      	cmp	r3, r6
   b4254:	dd06      	ble.n	b4264 <loop+0x68>
   b4256:	f859 1b04 	ldr.w	r1, [r9], #4
   b425a:	4650      	mov	r0, sl
   b425c:	f001 fbc1 	bl	b59e2 <_ZN6String6concatEi>
   b4260:	3601      	adds	r6, #1
   b4262:	e7f5      	b.n	b4250 <loop+0x54>
          tellHASS(TOPIC_NUMBER, dialedNumber);
   b4264:	4b38      	ldr	r3, [pc, #224]	; (b4348 <loop+0x14c>)
   b4266:	4936      	ldr	r1, [pc, #216]	; (b4340 <loop+0x144>)
   b4268:	681e      	ldr	r6, [r3, #0]
   b426a:	a802      	add	r0, sp, #8
   b426c:	f001 fb72 	bl	b5954 <_ZN6StringC1ERKS_>
   b4270:	a902      	add	r1, sp, #8
   b4272:	4630      	mov	r0, r6
   b4274:	f7ff ff68 	bl	b4148 <_Z8tellHASSPKc6String>
   b4278:	a802      	add	r0, sp, #8
   b427a:	f001 fafd 	bl	b5878 <_ZN6StringD1Ev>
          dialing=FALSE;
   b427e:	2300      	movs	r3, #0
   b4280:	f888 3000 	strb.w	r3, [r8]
          phoneNumberDigits = 0;
   b4284:	603b      	str	r3, [r7, #0]
   b4286:	f000 fbdb 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastStateChangeTime) > dialHasFinishedRotatingAfterMs) { // no action or end of digit rotation
   b428a:	f002 fbf7 	bl	b6a7c <__aeabi_ui2d>
   b428e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4292:	f002 fab5 	bl	b6800 <__aeabi_dsub>
   b4296:	4b2d      	ldr	r3, [pc, #180]	; (b434c <loop+0x150>)
   b4298:	e9d3 2300 	ldrd	r2, r3, [r3]
   b429c:	f002 fce6 	bl	b6c6c <__aeabi_dcmpgt>
   b42a0:	b320      	cbz	r0, b42ec <loop+0xf0>
    if (digitComplete) {
   b42a2:	4f2b      	ldr	r7, [pc, #172]	; (b4350 <loop+0x154>)
   b42a4:	783b      	ldrb	r3, [r7, #0]
   b42a6:	b30b      	cbz	r3, b42ec <loop+0xf0>
      Particle.publish("Dialed ", String(count%10));
   b42a8:	4e2a      	ldr	r6, [pc, #168]	; (b4354 <loop+0x158>)
   b42aa:	6833      	ldr	r3, [r6, #0]
   b42ac:	220a      	movs	r2, #10
   b42ae:	a802      	add	r0, sp, #8
   b42b0:	fb93 f1f2 	sdiv	r1, r3, r2
   b42b4:	fb02 3111 	mls	r1, r2, r1, r3
   b42b8:	f001 fb69 	bl	b598e <_ZN6StringC1Eih>
   b42bc:	9a02      	ldr	r2, [sp, #8]
   b42be:	4926      	ldr	r1, [pc, #152]	; (b4358 <loop+0x15c>)
   b42c0:	4668      	mov	r0, sp
   b42c2:	f7ff fef7 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b42c6:	a801      	add	r0, sp, #4
   b42c8:	f7ff ff02 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b42cc:	a802      	add	r0, sp, #8
   b42ce:	f001 fad3 	bl	b5878 <_ZN6StringD1Ev>
      phoneNumber[phoneNumberDigits] = count;
   b42d2:	4a1c      	ldr	r2, [pc, #112]	; (b4344 <loop+0x148>)
   b42d4:	4921      	ldr	r1, [pc, #132]	; (b435c <loop+0x160>)
   b42d6:	6813      	ldr	r3, [r2, #0]
   b42d8:	6830      	ldr	r0, [r6, #0]
   b42da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      phoneNumberDigits++;
   b42de:	3301      	adds	r3, #1
   b42e0:	6013      	str	r3, [r2, #0]
      cleared = 0;
   b42e2:	4a1f      	ldr	r2, [pc, #124]	; (b4360 <loop+0x164>)
      digitComplete = FALSE;
   b42e4:	2300      	movs	r3, #0
   b42e6:	703b      	strb	r3, [r7, #0]
      count = 0;
   b42e8:	6033      	str	r3, [r6, #0]
      cleared = 0;
   b42ea:	6013      	str	r3, [r2, #0]
  if (reading != lastState) {
   b42ec:	4e1d      	ldr	r6, [pc, #116]	; (b4364 <loop+0x168>)
   b42ee:	6822      	ldr	r2, [r4, #0]
   b42f0:	6833      	ldr	r3, [r6, #0]
   b42f2:	429a      	cmp	r2, r3
   b42f4:	d017      	beq.n	b4326 <loop+0x12a>
   b42f6:	f000 fba3 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
      lastStateChangeTime = millis();
   b42fa:	f002 fbbf 	bl	b6a7c <__aeabi_ui2d>
      dialing=TRUE;
   b42fe:	4b1a      	ldr	r3, [pc, #104]	; (b4368 <loop+0x16c>)
   b4300:	2201      	movs	r2, #1
   b4302:	701a      	strb	r2, [r3, #0]
    if (reading != trueState) {     //  switch has either just gone from closed->open or vice versa.
   b4304:	4a19      	ldr	r2, [pc, #100]	; (b436c <loop+0x170>)
   b4306:	6823      	ldr	r3, [r4, #0]
      lastStateChangeTime = millis();
   b4308:	e9c5 0100 	strd	r0, r1, [r5]
    if (reading != trueState) {     //  switch has either just gone from closed->open or vice versa.
   b430c:	6811      	ldr	r1, [r2, #0]
   b430e:	428b      	cmp	r3, r1
   b4310:	d008      	beq.n	b4324 <loop+0x128>
      if (trueState == HIGH) {        // increment the pulse count if it's gone high.
   b4312:	2b01      	cmp	r3, #1
      trueState = reading;
   b4314:	6013      	str	r3, [r2, #0]
      if (trueState == HIGH) {        // increment the pulse count if it's gone high.
   b4316:	d105      	bne.n	b4324 <loop+0x128>
          count++;
   b4318:	490e      	ldr	r1, [pc, #56]	; (b4354 <loop+0x158>)
   b431a:	680a      	ldr	r2, [r1, #0]
   b431c:	3201      	adds	r2, #1
   b431e:	600a      	str	r2, [r1, #0]
          digitComplete = TRUE;              // we'll need to print this number (once the dial has finished rotating)
   b4320:	4a0b      	ldr	r2, [pc, #44]	; (b4350 <loop+0x154>)
   b4322:	7013      	strb	r3, [r2, #0]
    lastState = reading;
   b4324:	6033      	str	r3, [r6, #0]
}
   b4326:	b006      	add	sp, #24
   b4328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b432c:	2003e578 	.word	0x2003e578
   b4330:	2003e6b8 	.word	0x2003e6b8
   b4334:	2003e680 	.word	0x2003e680
   b4338:	2003e588 	.word	0x2003e588
   b433c:	000b6e77 	.word	0x000b6e77
   b4340:	2003e66c 	.word	0x2003e66c
   b4344:	2003e6b4 	.word	0x2003e6b4
   b4348:	2003e568 	.word	0x2003e568
   b434c:	2003e570 	.word	0x2003e570
   b4350:	2003e67d 	.word	0x2003e67d
   b4354:	2003e668 	.word	0x2003e668
   b4358:	000b6e8b 	.word	0x000b6e8b
   b435c:	2003e68c 	.word	0x2003e68c
   b4360:	2003e604 	.word	0x2003e604
   b4364:	2003e57c 	.word	0x2003e57c
   b4368:	2003e67c 	.word	0x2003e67c
   b436c:	2003e580 	.word	0x2003e580

000b4370 <setup>:
void setup()  {
   b4370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  pinMode(in, INPUT_PULLUP);
   b4372:	4b19      	ldr	r3, [pc, #100]	; (b43d8 <setup+0x68>)
   b4374:	2102      	movs	r1, #2
   b4376:	8818      	ldrh	r0, [r3, #0]
   b4378:	f002 f886 	bl	b6488 <pinMode>
  pinMode(out, OUTPUT);
   b437c:	4b17      	ldr	r3, [pc, #92]	; (b43dc <setup+0x6c>)
   b437e:	2101      	movs	r1, #1
   b4380:	8818      	ldrh	r0, [r3, #0]
   b4382:	f002 f881 	bl	b6488 <pinMode>
   b4386:	4b16      	ldr	r3, [pc, #88]	; (b43e0 <setup+0x70>)
   b4388:	4a16      	ldr	r2, [pc, #88]	; (b43e4 <setup+0x74>)
   b438a:	781b      	ldrb	r3, [r3, #0]
   b438c:	4916      	ldr	r1, [pc, #88]	; (b43e8 <setup+0x78>)
   b438e:	f88d 3000 	strb.w	r3, [sp]
   b4392:	a802      	add	r0, sp, #8
   b4394:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   b4398:	f000 fee4 	bl	b5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b439c:	a803      	add	r0, sp, #12
   b439e:	f7ff fe97 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  client.connect(CLIENT_NAME, HA_USR, HA_PWD); //see secrets.h
   b43a2:	4b12      	ldr	r3, [pc, #72]	; (b43ec <setup+0x7c>)
   b43a4:	4a12      	ldr	r2, [pc, #72]	; (b43f0 <setup+0x80>)
   b43a6:	4913      	ldr	r1, [pc, #76]	; (b43f4 <setup+0x84>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	6812      	ldr	r2, [r2, #0]
   b43ac:	6809      	ldr	r1, [r1, #0]
   b43ae:	4812      	ldr	r0, [pc, #72]	; (b43f8 <setup+0x88>)
   b43b0:	f000 fa7e 	bl	b48b0 <_ZN4MQTT7connectEPKcS1_S1_>
  if (client.isConnected()) { Particle.publish("MQTT", "Connected to HA");
   b43b4:	4810      	ldr	r0, [pc, #64]	; (b43f8 <setup+0x88>)
   b43b6:	f000 f98a 	bl	b46ce <_ZN4MQTT11isConnectedEv>
   b43ba:	b150      	cbz	r0, b43d2 <setup+0x62>
   b43bc:	4a0f      	ldr	r2, [pc, #60]	; (b43fc <setup+0x8c>)
    } else {  Particle.publish("MQTT", "Failed connect HA - check secrets.h"); }
   b43be:	4910      	ldr	r1, [pc, #64]	; (b4400 <setup+0x90>)
   b43c0:	a802      	add	r0, sp, #8
   b43c2:	f7ff fe77 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b43c6:	a803      	add	r0, sp, #12
   b43c8:	f7ff fe82 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b43cc:	b005      	add	sp, #20
   b43ce:	f85d fb04 	ldr.w	pc, [sp], #4
    } else {  Particle.publish("MQTT", "Failed connect HA - check secrets.h"); }
   b43d2:	4a0c      	ldr	r2, [pc, #48]	; (b4404 <setup+0x94>)
   b43d4:	e7f3      	b.n	b43be <setup+0x4e>
   b43d6:	bf00      	nop
   b43d8:	2003e578 	.word	0x2003e578
   b43dc:	2003e688 	.word	0x2003e688
   b43e0:	2003e601 	.word	0x2003e601
   b43e4:	000b6e93 	.word	0x000b6e93
   b43e8:	000b6ea2 	.word	0x000b6ea2
   b43ec:	2003e55c 	.word	0x2003e55c
   b43f0:	2003e560 	.word	0x2003e560
   b43f4:	2003e558 	.word	0x2003e558
   b43f8:	2003e608 	.word	0x2003e608
   b43fc:	000b6ea7 	.word	0x000b6ea7
   b4400:	000b6eb7 	.word	0x000b6eb7
   b4404:	000b6ebc 	.word	0x000b6ebc

000b4408 <_GLOBAL__sub_I_HA_USR>:
        val_(val) {
   b4408:	4b0b      	ldr	r3, [pc, #44]	; (b4438 <_GLOBAL__sub_I_HA_USR+0x30>)
   b440a:	b513      	push	{r0, r1, r4, lr}
   b440c:	2400      	movs	r4, #0
   b440e:	701c      	strb	r4, [r3, #0]
   b4410:	4b0a      	ldr	r3, [pc, #40]	; (b443c <_GLOBAL__sub_I_HA_USR+0x34>)
String dialedNumber;
   b4412:	490b      	ldr	r1, [pc, #44]	; (b4440 <_GLOBAL__sub_I_HA_USR+0x38>)
   b4414:	480b      	ldr	r0, [pc, #44]	; (b4444 <_GLOBAL__sub_I_HA_USR+0x3c>)
   b4416:	2201      	movs	r2, #1
   b4418:	701a      	strb	r2, [r3, #0]
   b441a:	f001 fa78 	bl	b590e <_ZN6StringC1EPK19__FlashStringHelper>
MQTT client(MY_SERVER, 1883, MQTT_KEEPALIVE, mqtt_callback);
   b441e:	4b0a      	ldr	r3, [pc, #40]	; (b4448 <_GLOBAL__sub_I_HA_USR+0x40>)
   b4420:	9300      	str	r3, [sp, #0]
   b4422:	490a      	ldr	r1, [pc, #40]	; (b444c <_GLOBAL__sub_I_HA_USR+0x44>)
   b4424:	9401      	str	r4, [sp, #4]
   b4426:	f44f 63e1 	mov.w	r3, #1800	; 0x708
   b442a:	f240 725b 	movw	r2, #1883	; 0x75b
   b442e:	4808      	ldr	r0, [pc, #32]	; (b4450 <_GLOBAL__sub_I_HA_USR+0x48>)
   b4430:	f000 f854 	bl	b44dc <_ZN4MQTTC1EPKhtiPFvPcPhjEb>
   b4434:	b002      	add	sp, #8
   b4436:	bd10      	pop	{r4, pc}
   b4438:	2003e600 	.word	0x2003e600
   b443c:	2003e601 	.word	0x2003e601
   b4440:	000b6e77 	.word	0x000b6e77
   b4444:	2003e66c 	.word	0x2003e66c
   b4448:	000b40fd 	.word	0x000b40fd
   b444c:	2003e564 	.word	0x2003e564
   b4450:	2003e608 	.word	0x2003e608

000b4454 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4454:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4458:	b510      	push	{r4, lr}
   b445a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b445c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b445e:	b113      	cbz	r3, b4466 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4460:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4462:	f000 facd 	bl	b4a00 <os_mutex_lock>
#endif
#endif
#endif
        }
   b4466:	4620      	mov	r0, r4
   b4468:	bd10      	pop	{r4, pc}

000b446a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b446a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b446c:	6803      	ldr	r3, [r0, #0]
   b446e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4472:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4474:	b112      	cbz	r2, b447c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4476:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4478:	f000 faca 	bl	b4a10 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b447c:	4620      	mov	r0, r4
   b447e:	bd10      	pop	{r4, pc}

000b4480 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4482:	461f      	mov	r7, r3
   b4484:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4488:	4604      	mov	r4, r0
   b448a:	460d      	mov	r5, r1
   b448c:	4616      	mov	r6, r2
    if (thread) {
   b448e:	b12b      	cbz	r3, b449c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4490:	2301      	movs	r3, #1
   b4492:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4496:	3058      	adds	r0, #88	; 0x58
   b4498:	f000 faaa 	bl	b49f0 <os_mutex_create>
    }
    this->callback = callback;
   b449c:	9b08      	ldr	r3, [sp, #32]
   b449e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b44a0:	2300      	movs	r3, #0
   b44a2:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b44a4:	b106      	cbz	r6, b44a8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b44a6:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b44a8:	b125      	cbz	r5, b44b4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b44aa:	4629      	mov	r1, r5
   b44ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b44b0:	f001 fa5b 	bl	b596a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b44b4:	9b06      	ldr	r3, [sp, #24]
   b44b6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b44b8:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b44ba:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b44bc:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b44c0:	2bff      	cmp	r3, #255	; 0xff
   b44c2:	bfb8      	it	lt
   b44c4:	23ff      	movlt	r3, #255	; 0xff
   b44c6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b44ca:	b108      	cbz	r0, b44d0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b44cc:	f7ff fde5 	bl	b409a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b44d0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b44d4:	f7ff fddf 	bl	b4096 <_Znaj>
   b44d8:	61e0      	str	r0, [r4, #28]
}
   b44da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b44dc <_ZN4MQTTC1EPKhtiPFvPcPhjEb>:
MQTT::MQTT(const uint8_t *ip, uint16_t port, int maxpacketsize, void (*callback)(char*,uint8_t*,unsigned int),
   b44dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b44e0:	4604      	mov	r4, r0
            bool thread) {
   b44e2:	2500      	movs	r5, #0
MQTT::MQTT(const uint8_t *ip, uint16_t port, int maxpacketsize, void (*callback)(char*,uint8_t*,unsigned int),
   b44e4:	4617      	mov	r7, r2
   b44e6:	4698      	mov	r8, r3
   b44e8:	460e      	mov	r6, r1
            bool thread) {
   b44ea:	f001 fd79 	bl	b5fe0 <_ZN9TCPClientC1Ev>
   b44ee:	490d      	ldr	r1, [pc, #52]	; (b4524 <_ZN4MQTTC1EPKhtiPFvPcPhjEb+0x48>)
   b44f0:	61e5      	str	r5, [r4, #28]
   b44f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b44f6:	f001 fa0a 	bl	b590e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, maxpacketsize, callback, thread);
   b44fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   b44fe:	9303      	str	r3, [sp, #12]
   b4500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            bool thread) {
   b4502:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, maxpacketsize, callback, thread);
   b4504:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b4508:	230f      	movs	r3, #15
   b450a:	9300      	str	r3, [sp, #0]
   b450c:	4620      	mov	r0, r4
            bool thread) {
   b450e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, maxpacketsize, callback, thread);
   b4512:	463b      	mov	r3, r7
   b4514:	4632      	mov	r2, r6
   b4516:	4629      	mov	r1, r5
   b4518:	f7ff ffb2 	bl	b4480 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b451c:	4620      	mov	r0, r4
   b451e:	b004      	add	sp, #16
   b4520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4524:	000b6e77 	.word	0x000b6e77

000b4528 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4528:	b510      	push	{r4, lr}
   b452a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b452c:	4620      	mov	r0, r4
   b452e:	f001 fcb3 	bl	b5e98 <_ZN9TCPClient9availableEv>
   b4532:	2800      	cmp	r0, #0
   b4534:	d0fa      	beq.n	b452c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b4536:	4620      	mov	r0, r4
   b4538:	f001 fa98 	bl	b5a6c <_ZN9TCPClient4readEv>
}
   b453c:	b2c0      	uxtb	r0, r0
   b453e:	bd10      	pop	{r4, pc}

000b4540 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4544:	4605      	mov	r5, r0
   b4546:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4548:	f7ff ffee 	bl	b4528 <_ZN4MQTT8readByteEv>
   b454c:	69eb      	ldr	r3, [r5, #28]
   b454e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4550:	69eb      	ldr	r3, [r5, #28]
   b4552:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b4556:	f04f 0901 	mov.w	r9, #1
   b455a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b455e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4560:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4562:	4628      	mov	r0, r5
   b4564:	f7ff ffe0 	bl	b4528 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4568:	4626      	mov	r6, r4
   b456a:	69eb      	ldr	r3, [r5, #28]
   b456c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b456e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4572:	fb13 f309 	smulbb	r3, r3, r9
   b4576:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4578:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b457a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b457c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b457e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4580:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4584:	d4ed      	bmi.n	b4562 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b4586:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4588:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b458c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4590:	d11e      	bne.n	b45d0 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4592:	4628      	mov	r0, r5
   b4594:	f7ff ffc8 	bl	b4528 <_ZN4MQTT8readByteEv>
   b4598:	69eb      	ldr	r3, [r5, #28]
   b459a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b459c:	4628      	mov	r0, r5
   b459e:	f7ff ffc3 	bl	b4528 <_ZN4MQTT8readByteEv>
   b45a2:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b45a4:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b45a6:	b2b6      	uxth	r6, r6
   b45a8:	69eb      	ldr	r3, [r5, #28]
   b45aa:	b2a4      	uxth	r4, r4
   b45ac:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b45ae:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b45b0:	b2b6      	uxth	r6, r6
   b45b2:	42be      	cmp	r6, r7
   b45b4:	d20e      	bcs.n	b45d4 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b45b6:	4628      	mov	r0, r5
   b45b8:	f7ff ffb6 	bl	b4528 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b45bc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b45c0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b45c2:	bf84      	itt	hi
   b45c4:	69eb      	ldrhi	r3, [r5, #28]
   b45c6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b45c8:	3401      	adds	r4, #1
   b45ca:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b45cc:	3601      	adds	r6, #1
   b45ce:	e7ef      	b.n	b45b0 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b45d0:	2600      	movs	r6, #0
   b45d2:	e7ed      	b.n	b45b0 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b45d4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b45d8:	42a3      	cmp	r3, r4
   b45da:	bf2c      	ite	cs
   b45dc:	4620      	movcs	r0, r4
   b45de:	2000      	movcc	r0, #0
   b45e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b45e4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b45e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b45e8:	4615      	mov	r5, r2
   b45ea:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b45ec:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b45ee:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b45f0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b45f2:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b45f4:	a802      	add	r0, sp, #8
        digit = len % 128;
   b45f6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b45fa:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b45fe:	f103 0401 	add.w	r4, r3, #1
   b4602:	4403      	add	r3, r0
            digit |= 0x80;
   b4604:	bf88      	it	hi
   b4606:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b460a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b460e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4612:	b2e4      	uxtb	r4, r4
   b4614:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4618:	d81e      	bhi.n	b4658 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b461a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b461e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4622:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4624:	4622      	mov	r2, r4
   b4626:	a901      	add	r1, sp, #4
   b4628:	4428      	add	r0, r5
    buf[4-llen] = header;
   b462a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b462e:	f002 fb2d 	bl	b6c8c <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4632:	1c72      	adds	r2, r6, #1
   b4634:	4422      	add	r2, r4
   b4636:	4641      	mov	r1, r8
   b4638:	4638      	mov	r0, r7
   b463a:	f001 fa02 	bl	b5a42 <_ZN9TCPClient5writeEPKhj>
   b463e:	4605      	mov	r5, r0
   b4640:	f000 f9fe 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4644:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4646:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4648:	4432      	add	r2, r6
   b464a:	b2a8      	uxth	r0, r5
}
   b464c:	1a13      	subs	r3, r2, r0
   b464e:	4258      	negs	r0, r3
   b4650:	4158      	adcs	r0, r3
   b4652:	b002      	add	sp, #8
   b4654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4658:	4623      	mov	r3, r4
   b465a:	e7ca      	b.n	b45f2 <_ZN4MQTT5writeEhPht+0xe>

000b465c <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   b465c:	b513      	push	{r0, r1, r4, lr}
   b465e:	4604      	mov	r4, r0
    MutexLocker lock(this);
   b4660:	4601      	mov	r1, r0
   b4662:	a801      	add	r0, sp, #4
   b4664:	f7ff fef6 	bl	b4454 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   b4668:	69e3      	ldr	r3, [r4, #28]
   b466a:	22e0      	movs	r2, #224	; 0xe0
   b466c:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   b466e:	69e3      	ldr	r3, [r4, #28]
   b4670:	2200      	movs	r2, #0
   b4672:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   b4674:	69e1      	ldr	r1, [r4, #28]
   b4676:	2202      	movs	r2, #2
   b4678:	4620      	mov	r0, r4
   b467a:	f001 f9e2 	bl	b5a42 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   b467e:	4620      	mov	r0, r4
   b4680:	f001 fc64 	bl	b5f4c <_ZN9TCPClient4stopEv>
   b4684:	f000 f9dc 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   b4688:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   b468c:	a801      	add	r0, sp, #4
   b468e:	f7ff feec 	bl	b446a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4692:	b002      	add	sp, #8
   b4694:	bd10      	pop	{r4, pc}

000b4696 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4696:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4698:	b5f0      	push	{r4, r5, r6, r7, lr}
   b469a:	4605      	mov	r5, r0
    pos += 2;
   b469c:	b298      	uxth	r0, r3
   b469e:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b46a0:	5cce      	ldrb	r6, [r1, r3]
   b46a2:	b29c      	uxth	r4, r3
   b46a4:	b156      	cbz	r6, b46bc <_ZN4MQTT11writeStringEPKcPht+0x26>
   b46a6:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b46aa:	4584      	cmp	ip, r0
   b46ac:	f103 0701 	add.w	r7, r3, #1
   b46b0:	d904      	bls.n	b46bc <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b46b2:	1c44      	adds	r4, r0, #1
   b46b4:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b46b6:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b46b8:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b46ba:	e7f1      	b.n	b46a0 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b46bc:	b299      	uxth	r1, r3
   b46be:	1a41      	subs	r1, r0, r1
   b46c0:	440a      	add	r2, r1
   b46c2:	0a21      	lsrs	r1, r4, #8
   b46c4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b46c8:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b46cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b46ce <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b46ce:	b538      	push	{r3, r4, r5, lr}
   b46d0:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b46d2:	f001 fb03 	bl	b5cdc <_ZN9TCPClient9connectedEv>
   b46d6:	2800      	cmp	r0, #0
   b46d8:	bf14      	ite	ne
   b46da:	2501      	movne	r5, #1
   b46dc:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b46de:	d102      	bne.n	b46e6 <_ZN4MQTT11isConnectedEv+0x18>
   b46e0:	4620      	mov	r0, r4
   b46e2:	f001 fc33 	bl	b5f4c <_ZN9TCPClient4stopEv>
    return rc;
}
   b46e6:	4628      	mov	r0, r5
   b46e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b46ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b46ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46f0:	b088      	sub	sp, #32
   b46f2:	4604      	mov	r4, r0
   b46f4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b46f8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b46fc:	4689      	mov	r9, r1
   b46fe:	4617      	mov	r7, r2
   b4700:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4702:	f7ff ffe4 	bl	b46ce <_ZN4MQTT11isConnectedEv>
   b4706:	4605      	mov	r5, r0
   b4708:	2800      	cmp	r0, #0
   b470a:	f040 80cd 	bne.w	b48a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b470e:	4621      	mov	r1, r4
   b4710:	a801      	add	r0, sp, #4
   b4712:	f7ff fe9f 	bl	b4454 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4716:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4718:	2900      	cmp	r1, #0
   b471a:	f040 8088 	bne.w	b482e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b471e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4722:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4724:	462b      	mov	r3, r5
   b4726:	4620      	mov	r0, r4
   b4728:	f001 fa5a 	bl	b5be0 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b472c:	2800      	cmp	r0, #0
   b472e:	d07a      	beq.n	b4826 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4730:	2301      	movs	r3, #1
   b4732:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4734:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4738:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b473a:	2b04      	cmp	r3, #4
   b473c:	4b5b      	ldr	r3, [pc, #364]	; (b48ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b473e:	f040 8081 	bne.w	b4844 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4742:	6818      	ldr	r0, [r3, #0]
   b4744:	8899      	ldrh	r1, [r3, #4]
   b4746:	799b      	ldrb	r3, [r3, #6]
   b4748:	f8ad 100c 	strh.w	r1, [sp, #12]
   b474c:	f88d 300e 	strb.w	r3, [sp, #14]
   b4750:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4752:	f8c2 0005 	str.w	r0, [r2, #5]
   b4756:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b475a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b475e:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4762:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4764:	230c      	movs	r3, #12
            if (willTopic) {
   b4766:	f1b8 0f00 	cmp.w	r8, #0
   b476a:	f000 8081 	beq.w	b4870 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b476e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4772:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4776:	0140      	lsls	r0, r0, #5
   b4778:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b477c:	f040 0006 	orr.w	r0, r0, #6
   b4780:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4782:	f1ba 0f00 	cmp.w	sl, #0
   b4786:	d101      	bne.n	b478c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4788:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b478c:	b11f      	cbz	r7, b4796 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b478e:	2e00      	cmp	r6, #0
   b4790:	d170      	bne.n	b4874 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4792:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4796:	69e2      	ldr	r2, [r4, #28]
   b4798:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b479a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b479c:	69e1      	ldr	r1, [r4, #28]
   b479e:	1c58      	adds	r0, r3, #1
   b47a0:	1212      	asrs	r2, r2, #8
   b47a2:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b47a4:	1c9a      	adds	r2, r3, #2
   b47a6:	69e1      	ldr	r1, [r4, #28]
   b47a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b47aa:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b47ac:	3303      	adds	r3, #3
   b47ae:	69e2      	ldr	r2, [r4, #28]
   b47b0:	4649      	mov	r1, r9
   b47b2:	4620      	mov	r0, r4
   b47b4:	f7ff ff6f 	bl	b4696 <_ZN4MQTT11writeStringEPKcPht>
   b47b8:	4603      	mov	r3, r0
            if (willTopic) {
   b47ba:	f1b8 0f00 	cmp.w	r8, #0
   b47be:	d00b      	beq.n	b47d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b47c0:	69e2      	ldr	r2, [r4, #28]
   b47c2:	4641      	mov	r1, r8
   b47c4:	4620      	mov	r0, r4
   b47c6:	f7ff ff66 	bl	b4696 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b47ca:	69e2      	ldr	r2, [r4, #28]
   b47cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b47ce:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b47d0:	4620      	mov	r0, r4
   b47d2:	f7ff ff60 	bl	b4696 <_ZN4MQTT11writeStringEPKcPht>
   b47d6:	4603      	mov	r3, r0
            if(user != NULL) {
   b47d8:	b167      	cbz	r7, b47f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b47da:	69e2      	ldr	r2, [r4, #28]
   b47dc:	4639      	mov	r1, r7
   b47de:	4620      	mov	r0, r4
   b47e0:	f7ff ff59 	bl	b4696 <_ZN4MQTT11writeStringEPKcPht>
   b47e4:	4603      	mov	r3, r0
                if(pass != NULL) {
   b47e6:	b12e      	cbz	r6, b47f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b47e8:	69e2      	ldr	r2, [r4, #28]
   b47ea:	4631      	mov	r1, r6
   b47ec:	4620      	mov	r0, r4
   b47ee:	f7ff ff52 	bl	b4696 <_ZN4MQTT11writeStringEPKcPht>
   b47f2:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b47f4:	3b05      	subs	r3, #5
   b47f6:	69e2      	ldr	r2, [r4, #28]
   b47f8:	b29b      	uxth	r3, r3
   b47fa:	2110      	movs	r1, #16
   b47fc:	4620      	mov	r0, r4
   b47fe:	f7ff fef1 	bl	b45e4 <_ZN4MQTT5writeEhPht>
   b4802:	f000 f91d 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b4806:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b480a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b480e:	4620      	mov	r0, r4
   b4810:	f001 fb42 	bl	b5e98 <_ZN9TCPClient9availableEv>
   b4814:	bb88      	cbnz	r0, b487a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b4816:	f000 f913 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b481a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b481c:	1ac0      	subs	r0, r0, r3
   b481e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4820:	4373      	muls	r3, r6
   b4822:	4298      	cmp	r0, r3
   b4824:	d9f3      	bls.n	b480e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b4826:	4620      	mov	r0, r4
   b4828:	f001 fb90 	bl	b5f4c <_ZN9TCPClient4stopEv>
   b482c:	e035      	b.n	b489a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b482e:	a802      	add	r0, sp, #8
   b4830:	f000 fefe 	bl	b5630 <_ZN9IPAddressC1EPKh>
   b4834:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4838:	462b      	mov	r3, r5
   b483a:	a902      	add	r1, sp, #8
   b483c:	4620      	mov	r0, r4
   b483e:	f001 faaf 	bl	b5da0 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4842:	e773      	b.n	b472c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b4844:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4848:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b484c:	7bdb      	ldrb	r3, [r3, #15]
   b484e:	f10d 0c08 	add.w	ip, sp, #8
   b4852:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b4856:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b485a:	ab02      	add	r3, sp, #8
   b485c:	cb03      	ldmia	r3!, {r0, r1}
   b485e:	f8c2 0005 	str.w	r0, [r2, #5]
   b4862:	f8c2 1009 	str.w	r1, [r2, #9]
   b4866:	f89c 3000 	ldrb.w	r3, [ip]
   b486a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b486c:	230e      	movs	r3, #14
   b486e:	e77a      	b.n	b4766 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4870:	2002      	movs	r0, #2
   b4872:	e786      	b.n	b4782 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b4874:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4878:	e78d      	b.n	b4796 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b487a:	a902      	add	r1, sp, #8
   b487c:	4620      	mov	r0, r4
   b487e:	f7ff fe5f 	bl	b4540 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b4882:	2804      	cmp	r0, #4
   b4884:	d1cf      	bne.n	b4826 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b4886:	69e3      	ldr	r3, [r4, #28]
   b4888:	78de      	ldrb	r6, [r3, #3]
   b488a:	2e00      	cmp	r6, #0
   b488c:	d1cb      	bne.n	b4826 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b488e:	f000 f8d7 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b4892:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b4894:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b4896:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b489a:	a801      	add	r0, sp, #4
   b489c:	f7ff fde5 	bl	b446a <_ZN4MQTT11MutexLockerD1Ev>
}
   b48a0:	4628      	mov	r0, r5
   b48a2:	b008      	add	sp, #32
   b48a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b48a8:	2500      	movs	r5, #0
   b48aa:	e7f9      	b.n	b48a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b48ac:	000b6f1b 	.word	0x000b6f1b

000b48b0 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b48b0:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b48b2:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b48b6:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b48b8:	2401      	movs	r4, #1
   b48ba:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b48be:	2400      	movs	r4, #0
   b48c0:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b48c4:	e9cd 4400 	strd	r4, r4, [sp]
   b48c8:	f7ff ff10 	bl	b46ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b48cc:	b006      	add	sp, #24
   b48ce:	bd10      	pop	{r4, pc}

000b48d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b48d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48d4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b48d8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b48dc:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b48e0:	4604      	mov	r4, r0
   b48e2:	468b      	mov	fp, r1
   b48e4:	4616      	mov	r6, r2
   b48e6:	461f      	mov	r7, r3
    if (isConnected()) {
   b48e8:	f7ff fef1 	bl	b46ce <_ZN4MQTT11isConnectedEv>
   b48ec:	4682      	mov	sl, r0
   b48ee:	2800      	cmp	r0, #0
   b48f0:	d051      	beq.n	b4996 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b48f2:	4621      	mov	r1, r4
   b48f4:	a801      	add	r0, sp, #4
   b48f6:	f7ff fdad 	bl	b4454 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b48fa:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b48fe:	69e0      	ldr	r0, [r4, #28]
   b4900:	2100      	movs	r1, #0
   b4902:	f002 f9d1 	bl	b6ca8 <memset>
        length = writeString(topic, buffer, length);
   b4906:	2305      	movs	r3, #5
   b4908:	69e2      	ldr	r2, [r4, #28]
   b490a:	4659      	mov	r1, fp
   b490c:	4620      	mov	r0, r4
   b490e:	f7ff fec2 	bl	b4696 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b4912:	1e6b      	subs	r3, r5, #1
   b4914:	2b01      	cmp	r3, #1
   b4916:	d815      	bhi.n	b4944 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4918:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b491a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b491c:	3101      	adds	r1, #1
   b491e:	b289      	uxth	r1, r1
   b4920:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4922:	0a09      	lsrs	r1, r1, #8
   b4924:	5419      	strb	r1, [r3, r0]
   b4926:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4928:	69e3      	ldr	r3, [r4, #28]
   b492a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b492c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b492e:	3002      	adds	r0, #2
   b4930:	5499      	strb	r1, [r3, r2]
   b4932:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b4934:	f1b8 0f00 	cmp.w	r8, #0
   b4938:	d004      	beq.n	b4944 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b493a:	8c23      	ldrh	r3, [r4, #32]
   b493c:	1c5a      	adds	r2, r3, #1
   b493e:	8422      	strh	r2, [r4, #32]
   b4940:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b4944:	2100      	movs	r1, #0
   b4946:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4948:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b494a:	69e2      	ldr	r2, [r4, #28]
   b494c:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b494e:	d90a      	bls.n	b4966 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4950:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b4954:	459c      	cmp	ip, r3
   b4956:	d906      	bls.n	b4966 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4958:	f816 c001 	ldrb.w	ip, [r6, r1]
   b495c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4960:	3101      	adds	r1, #1
   b4962:	b289      	uxth	r1, r1
   b4964:	e7ef      	b.n	b4946 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b4966:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b496a:	2900      	cmp	r1, #0
   b496c:	bf0c      	ite	eq
   b496e:	2130      	moveq	r1, #48	; 0x30
   b4970:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b4972:	f1b9 0f00 	cmp.w	r9, #0
   b4976:	d001      	beq.n	b497c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4978:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b497c:	2d02      	cmp	r5, #2
   b497e:	d10e      	bne.n	b499e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4980:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b4984:	3b05      	subs	r3, #5
   b4986:	b29b      	uxth	r3, r3
   b4988:	4620      	mov	r0, r4
   b498a:	f7ff fe2b 	bl	b45e4 <_ZN4MQTT5writeEhPht>
   b498e:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4990:	a801      	add	r0, sp, #4
   b4992:	f7ff fd6a 	bl	b446a <_ZN4MQTT11MutexLockerD1Ev>
}
   b4996:	4650      	mov	r0, sl
   b4998:	b003      	add	sp, #12
   b499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b499e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b49a0:	bf08      	it	eq
   b49a2:	f041 0102 	orreq.w	r1, r1, #2
   b49a6:	e7ed      	b.n	b4984 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b49a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b49a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b49aa:	9c08      	ldr	r4, [sp, #32]
   b49ac:	9403      	str	r4, [sp, #12]
   b49ae:	2400      	movs	r4, #0
   b49b0:	9402      	str	r4, [sp, #8]
   b49b2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b49b6:	9401      	str	r4, [sp, #4]
   b49b8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b49bc:	9400      	str	r4, [sp, #0]
   b49be:	f7ff ff87 	bl	b48d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b49c2:	b004      	add	sp, #16
   b49c4:	bd10      	pop	{r4, pc}

000b49c6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b49c6:	b530      	push	{r4, r5, lr}
   b49c8:	b087      	sub	sp, #28
   b49ca:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b49cc:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b49ce:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b49d0:	9204      	str	r2, [sp, #16]
   b49d2:	f002 f9ce 	bl	b6d72 <strlen>
   b49d6:	2500      	movs	r5, #0
   b49d8:	4603      	mov	r3, r0
   b49da:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b49de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b49e2:	9500      	str	r5, [sp, #0]
   b49e4:	4620      	mov	r0, r4
   b49e6:	f7ff ffdf 	bl	b49a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b49ea:	b007      	add	sp, #28
   b49ec:	bd30      	pop	{r4, r5, pc}
	...

000b49f0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <os_mutex_create+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	00030248 	.word	0x00030248

000b4a00 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <os_mutex_lock+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	00030248 	.word	0x00030248

000b4a10 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <os_mutex_unlock+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	00030248 	.word	0x00030248

000b4a20 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <os_mutex_recursive_create+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030248 	.word	0x00030248

000b4a30 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <HAL_RNG_GetRandomNumber+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	685b      	ldr	r3, [r3, #4]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	00030218 	.word	0x00030218

000b4a40 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	695b      	ldr	r3, [r3, #20]
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	00030218 	.word	0x00030218

000b4a50 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <HAL_Pin_Mode+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	689b      	ldr	r3, [r3, #8]
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	0003022c 	.word	0x0003022c

000b4a60 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <HAL_Get_Pin_Mode+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	68db      	ldr	r3, [r3, #12]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	0003022c 	.word	0x0003022c

000b4a70 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <HAL_GPIO_Read+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	695b      	ldr	r3, [r3, #20]
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	0003022c 	.word	0x0003022c

000b4a80 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <hal_i2c_write+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6a1b      	ldr	r3, [r3, #32]
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030228 	.word	0x00030228

000b4a90 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <hal_i2c_available+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030228 	.word	0x00030228

000b4aa0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <hal_i2c_read+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	00030228 	.word	0x00030228

000b4ab0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <hal_i2c_peek+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	00030228 	.word	0x00030228

000b4ac0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <hal_i2c_flush+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030228 	.word	0x00030228

000b4ad0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <hal_i2c_is_enabled+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	00030228 	.word	0x00030228

000b4ae0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <hal_i2c_init+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	00030228 	.word	0x00030228

000b4af0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <if_index_to_name+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	695b      	ldr	r3, [r3, #20]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	0003026c 	.word	0x0003026c

000b4b00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <inet_inet_ntop+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	695b      	ldr	r3, [r3, #20]
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	00030264 	.word	0x00030264

000b4b10 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <inet_htonl+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	6a1b      	ldr	r3, [r3, #32]
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	00030264 	.word	0x00030264

000b4b20 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <inet_htons+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030264 	.word	0x00030264

000b4b30 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <netdb_freeaddrinfo+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	689b      	ldr	r3, [r3, #8]
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030268 	.word	0x00030268

000b4b40 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <netdb_getaddrinfo+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	68db      	ldr	r3, [r3, #12]
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030268 	.word	0x00030268

000b4b50 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <sock_setsockopt+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	699b      	ldr	r3, [r3, #24]
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030238 	.word	0x00030238

000b4b60 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <sock_close+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	69db      	ldr	r3, [r3, #28]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030238 	.word	0x00030238

000b4b70 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <sock_connect+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	6a1b      	ldr	r3, [r3, #32]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030238 	.word	0x00030238

000b4b80 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <sock_recv+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	00030238 	.word	0x00030238

000b4b90 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <sock_send+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	00030238 	.word	0x00030238

000b4ba0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <sock_socket+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	00030238 	.word	0x00030238

000b4bb0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <hal_spi_init+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	69db      	ldr	r3, [r3, #28]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	00030230 	.word	0x00030230

000b4bc0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <hal_spi_is_enabled+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	6a1b      	ldr	r3, [r3, #32]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	00030230 	.word	0x00030230

000b4bd0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <hal_usart_write+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	68db      	ldr	r3, [r3, #12]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	0003023c 	.word	0x0003023c

000b4be0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <hal_usart_available+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	691b      	ldr	r3, [r3, #16]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	0003023c 	.word	0x0003023c

000b4bf0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <hal_usart_read+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	695b      	ldr	r3, [r3, #20]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	0003023c 	.word	0x0003023c

000b4c00 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <hal_usart_peek+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	699b      	ldr	r3, [r3, #24]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	0003023c 	.word	0x0003023c

000b4c10 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b02      	ldr	r3, [pc, #8]	; (b4c1c <hal_usart_flush+0xc>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	69db      	ldr	r3, [r3, #28]
   b4c18:	9301      	str	r3, [sp, #4]
   b4c1a:	bd08      	pop	{r3, pc}
   b4c1c:	0003023c 	.word	0x0003023c

000b4c20 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4c20:	b508      	push	{r3, lr}
   b4c22:	4b02      	ldr	r3, [pc, #8]	; (b4c2c <hal_usart_is_enabled+0xc>)
   b4c24:	681b      	ldr	r3, [r3, #0]
   b4c26:	6a1b      	ldr	r3, [r3, #32]
   b4c28:	9301      	str	r3, [sp, #4]
   b4c2a:	bd08      	pop	{r3, pc}
   b4c2c:	0003023c 	.word	0x0003023c

000b4c30 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4c30:	b508      	push	{r3, lr}
   b4c32:	4b02      	ldr	r3, [pc, #8]	; (b4c3c <hal_usart_available_data_for_write+0xc>)
   b4c34:	681b      	ldr	r3, [r3, #0]
   b4c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c38:	9301      	str	r3, [sp, #4]
   b4c3a:	bd08      	pop	{r3, pc}
   b4c3c:	0003023c 	.word	0x0003023c

000b4c40 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4c40:	b508      	push	{r3, lr}
   b4c42:	4b02      	ldr	r3, [pc, #8]	; (b4c4c <hal_usart_init_ex+0xc>)
   b4c44:	681b      	ldr	r3, [r3, #0]
   b4c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c48:	9301      	str	r3, [sp, #4]
   b4c4a:	bd08      	pop	{r3, pc}
   b4c4c:	0003023c 	.word	0x0003023c

000b4c50 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <HAL_USB_USART_Init+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	681b      	ldr	r3, [r3, #0]
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	0003024c 	.word	0x0003024c

000b4c60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <HAL_USB_USART_Available_Data+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	691b      	ldr	r3, [r3, #16]
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	0003024c 	.word	0x0003024c

000b4c70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	695b      	ldr	r3, [r3, #20]
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	0003024c 	.word	0x0003024c

000b4c80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <HAL_USB_USART_Receive_Data+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	699b      	ldr	r3, [r3, #24]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	0003024c 	.word	0x0003024c

000b4c90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <HAL_USB_USART_Send_Data+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	69db      	ldr	r3, [r3, #28]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	0003024c 	.word	0x0003024c

000b4ca0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <HAL_USB_USART_Flush_Data+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	6a1b      	ldr	r3, [r3, #32]
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	0003024c 	.word	0x0003024c

000b4cb0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <log_message+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	00030260 	.word	0x00030260

000b4cc0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <set_system_mode+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	685b      	ldr	r3, [r3, #4]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	00030220 	.word	0x00030220

000b4cd0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <system_delay_ms+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	695b      	ldr	r3, [r3, #20]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	00030220 	.word	0x00030220

000b4ce0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <application_thread_current+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	00030220 	.word	0x00030220

000b4cf0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <application_thread_invoke+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	00030220 	.word	0x00030220

000b4d00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b03      	ldr	r3, [pc, #12]	; (b4d10 <system_ctrl_set_app_request_handler+0x10>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4d0a:	9301      	str	r3, [sp, #4]
   b4d0c:	bd08      	pop	{r3, pc}
   b4d0e:	0000      	.short	0x0000
   b4d10:	00030220 	.word	0x00030220

000b4d14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b03      	ldr	r3, [pc, #12]	; (b4d24 <system_ctrl_set_result+0x10>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4d1e:	9301      	str	r3, [sp, #4]
   b4d20:	bd08      	pop	{r3, pc}
   b4d22:	0000      	.short	0x0000
   b4d24:	00030220 	.word	0x00030220

000b4d28 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <spark_cloud_flag_connected+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	695b      	ldr	r3, [r3, #20]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	00030244 	.word	0x00030244

000b4d38 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <spark_send_event+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	6a1b      	ldr	r3, [r3, #32]
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	00030244 	.word	0x00030244

000b4d48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	00030244 	.word	0x00030244

000b4d58 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <network_connect+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	685b      	ldr	r3, [r3, #4]
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	00030240 	.word	0x00030240

000b4d68 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <network_connecting+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	689b      	ldr	r3, [r3, #8]
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	00030240 	.word	0x00030240

000b4d78 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <network_disconnect+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	68db      	ldr	r3, [r3, #12]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	00030240 	.word	0x00030240

000b4d88 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <network_ready+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	691b      	ldr	r3, [r3, #16]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030240 	.word	0x00030240

000b4d98 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <network_on+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	695b      	ldr	r3, [r3, #20]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	00030240 	.word	0x00030240

000b4da8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <network_off+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	699b      	ldr	r3, [r3, #24]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	00030240 	.word	0x00030240

000b4db8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <network_listen+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	69db      	ldr	r3, [r3, #28]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	00030240 	.word	0x00030240

000b4dc8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <network_listening+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	6a1b      	ldr	r3, [r3, #32]
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	00030240 	.word	0x00030240

000b4dd8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <network_set_listen_timeout+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	00030240 	.word	0x00030240

000b4de8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <network_get_listen_timeout+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	00030240 	.word	0x00030240

000b4df8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <network_is_on+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	00030240 	.word	0x00030240

000b4e08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <network_is_off+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	00030240 	.word	0x00030240

000b4e18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <malloc+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	681b      	ldr	r3, [r3, #0]
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	0003021c 	.word	0x0003021c

000b4e28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <free+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	685b      	ldr	r3, [r3, #4]
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	0003021c 	.word	0x0003021c

000b4e38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <realloc+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	689b      	ldr	r3, [r3, #8]
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	0003021c 	.word	0x0003021c

000b4e48 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <abort+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	0003021c 	.word	0x0003021c

000b4e58 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <_malloc_r+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	0003021c 	.word	0x0003021c

000b4e68 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <__errno+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	0003021c 	.word	0x0003021c

000b4e78 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <__assert_func+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	0003021c 	.word	0x0003021c

000b4e88 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <newlib_impure_ptr_callback+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	0003021c 	.word	0x0003021c

000b4e98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4e98:	2100      	movs	r1, #0
   b4e9a:	f7ff bf19 	b.w	b4cd0 <system_delay_ms>

000b4e9e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4e9e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4ea0:	6883      	ldr	r3, [r0, #8]
   b4ea2:	4604      	mov	r4, r0
   b4ea4:	b90b      	cbnz	r3, b4eaa <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4ea6:	f001 fb91 	bl	b65cc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4eaa:	68c3      	ldr	r3, [r0, #12]
   b4eac:	4798      	blx	r3
      if (_M_manager)
   b4eae:	68a3      	ldr	r3, [r4, #8]
   b4eb0:	b11b      	cbz	r3, b4eba <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4eb2:	2203      	movs	r2, #3
   b4eb4:	4621      	mov	r1, r4
   b4eb6:	4620      	mov	r0, r4
   b4eb8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4eba:	4620      	mov	r0, r4
   b4ebc:	2110      	movs	r1, #16
}
   b4ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4ec2:	f7ff b8ec 	b.w	b409e <_ZdlPvj>

000b4ec6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4ec6:	b510      	push	{r4, lr}
      if (_M_manager)
   b4ec8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4eca:	4604      	mov	r4, r0
      if (_M_manager)
   b4ecc:	b113      	cbz	r3, b4ed4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4ece:	2203      	movs	r2, #3
   b4ed0:	4601      	mov	r1, r0
   b4ed2:	4798      	blx	r3
    }
   b4ed4:	4620      	mov	r0, r4
   b4ed6:	bd10      	pop	{r4, pc}

000b4ed8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4ed8:	b513      	push	{r0, r1, r4, lr}
   b4eda:	460b      	mov	r3, r1
   b4edc:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ede:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4ee2:	466c      	mov	r4, sp
   b4ee4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4ee8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4eec:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4ef4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4ef8:	b002      	add	sp, #8
   b4efa:	bd10      	pop	{r4, pc}

000b4efc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4efc:	4802      	ldr	r0, [pc, #8]	; (b4f08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4efe:	2300      	movs	r3, #0
   b4f00:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4f02:	f7ff bd8d 	b.w	b4a20 <os_mutex_recursive_create>
   b4f06:	bf00      	nop
   b4f08:	2003e6bc 	.word	0x2003e6bc

000b4f0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4f0c:	4770      	bx	lr

000b4f0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4f0e:	2000      	movs	r0, #0
   b4f10:	4770      	bx	lr

000b4f12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4f12:	b510      	push	{r4, lr}
   b4f14:	2110      	movs	r1, #16
   b4f16:	4604      	mov	r4, r0
   b4f18:	f7ff f8c1 	bl	b409e <_ZdlPvj>
   b4f1c:	4620      	mov	r0, r4
   b4f1e:	bd10      	pop	{r4, pc}

000b4f20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4f20:	b508      	push	{r3, lr}
      { delete this; }
   b4f22:	f7ff fff6 	bl	b4f12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4f26:	bd08      	pop	{r3, pc}

000b4f28 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4f28:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4f2a:	2200      	movs	r2, #0
   b4f2c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4f30:	6002      	str	r2, [r0, #0]
   b4f32:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4f34:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f36:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4f38:	680c      	ldr	r4, [r1, #0]
   b4f3a:	8085      	strh	r5, [r0, #4]
   b4f3c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f3e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4f40:	bd30      	pop	{r4, r5, pc}

000b4f42 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4f42:	b510      	push	{r4, lr}
   b4f44:	4604      	mov	r4, r0
    free((void*)msg_);
   b4f46:	6800      	ldr	r0, [r0, #0]
   b4f48:	f7ff ff6e 	bl	b4e28 <free>
}
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	bd10      	pop	{r4, pc}

000b4f50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4f50:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4f52:	68c4      	ldr	r4, [r0, #12]
   b4f54:	b1f4      	cbz	r4, b4f94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4f56:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4f58:	2b02      	cmp	r3, #2
   b4f5a:	d103      	bne.n	b4f64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4f5c:	f104 000c 	add.w	r0, r4, #12
   b4f60:	f7ff ffef 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4f64:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4f66:	b135      	cbz	r5, b4f76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4f68:	4628      	mov	r0, r5
   b4f6a:	f7ff ffac 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
   b4f6e:	2110      	movs	r1, #16
   b4f70:	4628      	mov	r0, r5
   b4f72:	f7ff f894 	bl	b409e <_ZdlPvj>
   b4f76:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4f78:	b135      	cbz	r5, b4f88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4f7a:	4628      	mov	r0, r5
   b4f7c:	f7ff ffa3 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
   b4f80:	2110      	movs	r1, #16
   b4f82:	4628      	mov	r0, r5
   b4f84:	f7ff f88b 	bl	b409e <_ZdlPvj>
   b4f88:	4620      	mov	r0, r4
   b4f8a:	2114      	movs	r1, #20
   b4f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4f90:	f7ff b885 	b.w	b409e <_ZdlPvj>
   b4f94:	bd38      	pop	{r3, r4, r5, pc}

000b4f96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4f96:	680b      	ldr	r3, [r1, #0]
   b4f98:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4f9a:	684b      	ldr	r3, [r1, #4]
   b4f9c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4f9e:	b113      	cbz	r3, b4fa6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4fa0:	685a      	ldr	r2, [r3, #4]
   b4fa2:	3201      	adds	r2, #1
   b4fa4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4fa6:	4770      	bx	lr

000b4fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4faa:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4fac:	4668      	mov	r0, sp
   b4fae:	460d      	mov	r5, r1
   b4fb0:	f7ff fff1 	bl	b4f96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4fb4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4fb6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4fb8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4fba:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4fbc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4fbe:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4fc0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4fc2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4fc4:	f7ff f884 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4fc8:	b135      	cbz	r5, b4fd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4fca:	1d28      	adds	r0, r5, #4
   b4fcc:	f7ff f880 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4fd0:	2108      	movs	r1, #8
   b4fd2:	4628      	mov	r0, r5
   b4fd4:	f7ff f863 	bl	b409e <_ZdlPvj>
        return p;
    }
   b4fd8:	4620      	mov	r0, r4
   b4fda:	b003      	add	sp, #12
   b4fdc:	bd30      	pop	{r4, r5, pc}

000b4fde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4fde:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4fe0:	b510      	push	{r4, lr}
      if (_M_empty())
   b4fe2:	b90a      	cbnz	r2, b4fe8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4fe4:	f001 faf2 	bl	b65cc <_ZSt25__throw_bad_function_callv>
    }
   b4fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4fec:	68c3      	ldr	r3, [r0, #12]
   b4fee:	4718      	bx	r3

000b4ff0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4ff0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4ff2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4ff4:	f100 0110 	add.w	r1, r0, #16
   b4ff8:	f7ff fff1 	bl	b4fde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4ffc:	bd08      	pop	{r3, pc}

000b4ffe <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4ffe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5000:	b510      	push	{r4, lr}
      if (_M_empty())
   b5002:	b90a      	cbnz	r2, b5008 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5004:	f001 fae2 	bl	b65cc <_ZSt25__throw_bad_function_callv>
    }
   b5008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b500c:	68c3      	ldr	r3, [r0, #12]
   b500e:	4718      	bx	r3

000b5010 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5010:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5012:	6800      	ldr	r0, [r0, #0]
   b5014:	f100 0110 	add.w	r1, r0, #16
   b5018:	f7ff fff1 	bl	b4ffe <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b501c:	bd08      	pop	{r3, pc}
	...

000b5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5020:	b538      	push	{r3, r4, r5, lr}
   b5022:	2300      	movs	r3, #0
   b5024:	4604      	mov	r4, r0
   b5026:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5028:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b502a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b502c:	f7ff f831 	bl	b4092 <_Znwj>
   b5030:	b128      	cbz	r0, b503e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5032:	2301      	movs	r3, #1
   b5034:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5038:	4b02      	ldr	r3, [pc, #8]	; (b5044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b503a:	6003      	str	r3, [r0, #0]
   b503c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b503e:	6020      	str	r0, [r4, #0]
	}
   b5040:	4620      	mov	r0, r4
   b5042:	bd38      	pop	{r3, r4, r5, pc}
   b5044:	000b6f3c 	.word	0x000b6f3c

000b5048 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5048:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b504a:	2300      	movs	r3, #0
   b504c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b504e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5050:	4604      	mov	r4, r0
   b5052:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5054:	b12b      	cbz	r3, b5062 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5056:	2202      	movs	r2, #2
   b5058:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b505a:	68eb      	ldr	r3, [r5, #12]
   b505c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b505e:	68ab      	ldr	r3, [r5, #8]
   b5060:	60a3      	str	r3, [r4, #8]
    }
   b5062:	4620      	mov	r0, r4
   b5064:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5068:	b5f0      	push	{r4, r5, r6, r7, lr}
   b506a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b506c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b506e:	4668      	mov	r0, sp
   b5070:	f7ff ff5a 	bl	b4f28 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5074:	f04f 0302 	mov.w	r3, #2
   b5078:	e8d4 2f4f 	ldrexb	r2, [r4]
   b507c:	2a00      	cmp	r2, #0
   b507e:	d103      	bne.n	b5088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5080:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5084:	2900      	cmp	r1, #0
   b5086:	d1f7      	bne.n	b5078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5088:	d125      	bne.n	b50d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b508a:	f104 050c 	add.w	r5, r4, #12
   b508e:	4669      	mov	r1, sp
   b5090:	4628      	mov	r0, r5
   b5092:	f7ff ff49 	bl	b4f28 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5096:	f3bf 8f5b 	dmb	ish
   b509a:	2301      	movs	r3, #1
   b509c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b509e:	2000      	movs	r0, #0
   b50a0:	f104 0308 	add.w	r3, r4, #8
   b50a4:	f3bf 8f5b 	dmb	ish
   b50a8:	e853 6f00 	ldrex	r6, [r3]
   b50ac:	e843 0200 	strex	r2, r0, [r3]
   b50b0:	2a00      	cmp	r2, #0
   b50b2:	d1f9      	bne.n	b50a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b50b4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b50b8:	b16e      	cbz	r6, b50d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b50ba:	f7ff fe11 	bl	b4ce0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b50be:	b178      	cbz	r0, b50e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b50c0:	4629      	mov	r1, r5
   b50c2:	4630      	mov	r0, r6
   b50c4:	f7ff ff8b 	bl	b4fde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b50c8:	4630      	mov	r0, r6
   b50ca:	f7ff fefc 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b50ce:	2110      	movs	r1, #16
   b50d0:	4630      	mov	r0, r6
   b50d2:	f7fe ffe4 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b50d6:	4668      	mov	r0, sp
   b50d8:	f7ff ff33 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
    }
   b50dc:	b009      	add	sp, #36	; 0x24
   b50de:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b50e0:	4631      	mov	r1, r6
   b50e2:	a802      	add	r0, sp, #8
   b50e4:	f7ff ffb0 	bl	b5048 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b50e8:	68e0      	ldr	r0, [r4, #12]
   b50ea:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b50ee:	b108      	cbz	r0, b50f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b50f0:	f001 fe22 	bl	b6d38 <strdup>
        type_(type) {
   b50f4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b50f6:	2010      	movs	r0, #16
   b50f8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b50fc:	f7fe ffc9 	bl	b4092 <_Znwj>
   b5100:	4605      	mov	r5, r0
   b5102:	b1e8      	cbz	r0, b5140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5104:	2700      	movs	r7, #0
   b5106:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5108:	2018      	movs	r0, #24
   b510a:	f7fe ffc2 	bl	b4092 <_Znwj>
   b510e:	4604      	mov	r4, r0
   b5110:	b188      	cbz	r0, b5136 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5112:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5114:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5116:	a802      	add	r0, sp, #8
   b5118:	f7ff fede 	bl	b4ed8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b511c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b511e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5120:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5122:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5124:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5126:	a906      	add	r1, sp, #24
   b5128:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b512a:	60e3      	str	r3, [r4, #12]
   b512c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5130:	9205      	str	r2, [sp, #20]
   b5132:	f7ff fef9 	bl	b4f28 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5136:	4b08      	ldr	r3, [pc, #32]	; (b5158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5138:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b513a:	4b08      	ldr	r3, [pc, #32]	; (b515c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b513c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b513e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5140:	a806      	add	r0, sp, #24
   b5142:	f7ff fefe 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5146:	a802      	add	r0, sp, #8
   b5148:	f7ff febd 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b514c:	2200      	movs	r2, #0
   b514e:	4629      	mov	r1, r5
   b5150:	4803      	ldr	r0, [pc, #12]	; (b5160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5152:	f7ff fdcd 	bl	b4cf0 <application_thread_invoke>
   b5156:	e7b7      	b.n	b50c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5158:	000b4ff1 	.word	0x000b4ff1
   b515c:	000b5275 	.word	0x000b5275
   b5160:	000b4e9f 	.word	0x000b4e9f

000b5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5168:	b08b      	sub	sp, #44	; 0x2c
   b516a:	4605      	mov	r5, r0
   b516c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5170:	460f      	mov	r7, r1
   b5172:	4690      	mov	r8, r2
   b5174:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5176:	f7ff fdd7 	bl	b4d28 <spark_cloud_flag_connected>
   b517a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b517c:	4683      	mov	fp, r0
   b517e:	bb38      	cbnz	r0, b51d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5180:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5184:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5186:	a905      	add	r1, sp, #20
   b5188:	4630      	mov	r0, r6
   b518a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b518e:	f7ff fecb 	bl	b4f28 <_ZN8particle5ErrorC1EOS0_>
   b5192:	2014      	movs	r0, #20
   b5194:	f7fe ff7d 	bl	b4092 <_Znwj>
   b5198:	4604      	mov	r4, r0
   b519a:	b148      	cbz	r0, b51b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b519c:	2302      	movs	r3, #2
   b519e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b51a0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b51a2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b51a6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b51a8:	4631      	mov	r1, r6
   b51aa:	300c      	adds	r0, #12
   b51ac:	f7ff febc 	bl	b4f28 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b51b0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b51b2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b51b4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b51b8:	f7ff ff32 	bl	b5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b51bc:	4630      	mov	r0, r6
   b51be:	f7ff fec0 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b51c2:	a805      	add	r0, sp, #20
   b51c4:	f7ff febd 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b51c8:	4628      	mov	r0, r5
   b51ca:	b00b      	add	sp, #44	; 0x2c
   b51cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b51d0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b51d2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b51d4:	2014      	movs	r0, #20
   b51d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b51da:	9307      	str	r3, [sp, #28]
   b51dc:	f7fe ff59 	bl	b4092 <_Znwj>
   b51e0:	4601      	mov	r1, r0
   b51e2:	b118      	cbz	r0, b51ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b51e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b51e8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b51ea:	7044      	strb	r4, [r0, #1]
   b51ec:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b51ee:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b51f0:	f7ff ff16 	bl	b5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b51f4:	4b1e      	ldr	r3, [pc, #120]	; (b5270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b51f6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b51f8:	2008      	movs	r0, #8
   b51fa:	f7fe ff4a 	bl	b4092 <_Znwj>
   b51fe:	4604      	mov	r4, r0
   b5200:	b110      	cbz	r0, b5208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5202:	a903      	add	r1, sp, #12
   b5204:	f7ff fec7 	bl	b4f96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5208:	9600      	str	r6, [sp, #0]
   b520a:	fa5f f38a 	uxtb.w	r3, sl
   b520e:	464a      	mov	r2, r9
   b5210:	4641      	mov	r1, r8
   b5212:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5214:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5216:	f7ff fd8f 	bl	b4d38 <spark_send_event>
   b521a:	b9b8      	cbnz	r0, b524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b521c:	9b03      	ldr	r3, [sp, #12]
   b521e:	785b      	ldrb	r3, [r3, #1]
   b5220:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5224:	b993      	cbnz	r3, b524c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5226:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b522a:	a905      	add	r1, sp, #20
   b522c:	a803      	add	r0, sp, #12
   b522e:	9205      	str	r2, [sp, #20]
   b5230:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5234:	f7ff ff18 	bl	b5068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5238:	a805      	add	r0, sp, #20
   b523a:	f7ff fe82 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b523e:	a805      	add	r0, sp, #20
   b5240:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5242:	f7ff feb1 	bl	b4fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5246:	a806      	add	r0, sp, #24
   b5248:	f7fe ff42 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b524c:	a903      	add	r1, sp, #12
   b524e:	a805      	add	r0, sp, #20
   b5250:	f7ff fea1 	bl	b4f96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5254:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5256:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5258:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b525a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b525c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b525e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5260:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5262:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5264:	f7fe ff34 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5268:	a804      	add	r0, sp, #16
   b526a:	f7fe ff31 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b526e:	e7ab      	b.n	b51c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5270:	000b52f1 	.word	0x000b52f1

000b5274 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5274:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5278:	4605      	mov	r5, r0
	switch (__op)
   b527a:	d103      	bne.n	b5284 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b527c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b527e:	6003      	str	r3, [r0, #0]
      }
   b5280:	2000      	movs	r0, #0
   b5282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5284:	2a02      	cmp	r2, #2
   b5286:	d010      	beq.n	b52aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5288:	2a03      	cmp	r2, #3
   b528a:	d1f9      	bne.n	b5280 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b528c:	6804      	ldr	r4, [r0, #0]
   b528e:	2c00      	cmp	r4, #0
   b5290:	d0f6      	beq.n	b5280 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5292:	f104 0010 	add.w	r0, r4, #16
   b5296:	f7ff fe54 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b529a:	4620      	mov	r0, r4
   b529c:	f7ff fe13 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b52a0:	2118      	movs	r1, #24
   b52a2:	4620      	mov	r0, r4
   b52a4:	f7fe fefb 	bl	b409e <_ZdlPvj>
   b52a8:	e7ea      	b.n	b5280 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b52aa:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b52ac:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b52ae:	f7fe fef0 	bl	b4092 <_Znwj>
   b52b2:	4604      	mov	r4, r0
   b52b4:	b150      	cbz	r0, b52cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b52b6:	4631      	mov	r1, r6
   b52b8:	f7ff fec6 	bl	b5048 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b52bc:	6930      	ldr	r0, [r6, #16]
   b52be:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b52c2:	b108      	cbz	r0, b52c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b52c4:	f001 fd38 	bl	b6d38 <strdup>
        type_(type) {
   b52c8:	6120      	str	r0, [r4, #16]
   b52ca:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b52cc:	602c      	str	r4, [r5, #0]
	}
   b52ce:	e7d7      	b.n	b5280 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b52d0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b52d0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b52d2:	2300      	movs	r3, #0
   b52d4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b52d6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b52d8:	4604      	mov	r4, r0
   b52da:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b52dc:	b12b      	cbz	r3, b52ea <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b52de:	2202      	movs	r2, #2
   b52e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b52e2:	68eb      	ldr	r3, [r5, #12]
   b52e4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b52e6:	68ab      	ldr	r3, [r5, #8]
   b52e8:	60a3      	str	r3, [r4, #8]
    }
   b52ea:	4620      	mov	r0, r4
   b52ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b52f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b52f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b52f2:	b089      	sub	sp, #36	; 0x24
   b52f4:	4604      	mov	r4, r0
   b52f6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b52f8:	a801      	add	r0, sp, #4
   b52fa:	4611      	mov	r1, r2
   b52fc:	f7ff fe54 	bl	b4fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5300:	b1a4      	cbz	r4, b532c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5302:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5304:	b11d      	cbz	r5, b530e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5306:	4628      	mov	r0, r5
   b5308:	f001 fd16 	bl	b6d38 <strdup>
   b530c:	4605      	mov	r5, r0
   b530e:	a801      	add	r0, sp, #4
   b5310:	a903      	add	r1, sp, #12
        type_(type) {
   b5312:	9503      	str	r5, [sp, #12]
   b5314:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5318:	f7ff fea6 	bl	b5068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b531c:	a803      	add	r0, sp, #12
   b531e:	f7ff fe10 	bl	b4f42 <_ZN8particle5ErrorD1Ev>
   b5322:	a802      	add	r0, sp, #8
   b5324:	f7fe fed4 	bl	b40d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5328:	b009      	add	sp, #36	; 0x24
   b532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b532c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b532e:	2301      	movs	r3, #1
   b5330:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5334:	2a00      	cmp	r2, #0
   b5336:	d103      	bne.n	b5340 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5338:	e8c5 3f41 	strexb	r1, r3, [r5]
   b533c:	2900      	cmp	r1, #0
   b533e:	d1f7      	bne.n	b5330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5340:	d1ef      	bne.n	b5322 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5342:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5344:	f3bf 8f5b 	dmb	ish
   b5348:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b534a:	1d2b      	adds	r3, r5, #4
   b534c:	f3bf 8f5b 	dmb	ish
   b5350:	e853 6f00 	ldrex	r6, [r3]
   b5354:	e843 4200 	strex	r2, r4, [r3]
   b5358:	2a00      	cmp	r2, #0
   b535a:	d1f9      	bne.n	b5350 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b535c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5360:	2e00      	cmp	r6, #0
   b5362:	d0de      	beq.n	b5322 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5364:	4620      	mov	r0, r4
   b5366:	f7ff fcbb 	bl	b4ce0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b536a:	4607      	mov	r7, r0
   b536c:	b160      	cbz	r0, b5388 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b536e:	f105 010c 	add.w	r1, r5, #12
   b5372:	4630      	mov	r0, r6
   b5374:	f7ff fe43 	bl	b4ffe <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5378:	4630      	mov	r0, r6
   b537a:	f7ff fda4 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b537e:	2110      	movs	r1, #16
   b5380:	4630      	mov	r0, r6
   b5382:	f7fe fe8c 	bl	b409e <_ZdlPvj>
   b5386:	e7cc      	b.n	b5322 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5388:	4631      	mov	r1, r6
   b538a:	a803      	add	r0, sp, #12
   b538c:	f7ff ffa0 	bl	b52d0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5390:	7b2b      	ldrb	r3, [r5, #12]
   b5392:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5396:	2010      	movs	r0, #16
   b5398:	f7fe fe7b 	bl	b4092 <_Znwj>
   b539c:	4605      	mov	r5, r0
   b539e:	b1d0      	cbz	r0, b53d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b53a0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b53a2:	2014      	movs	r0, #20
   b53a4:	f7fe fe75 	bl	b4092 <_Znwj>
   b53a8:	4604      	mov	r4, r0
   b53aa:	b178      	cbz	r0, b53cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b53ac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b53ae:	4601      	mov	r1, r0
   b53b0:	a803      	add	r0, sp, #12
   b53b2:	f7ff fd91 	bl	b4ed8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b53b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b53ba:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53bc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b53be:	9205      	str	r2, [sp, #20]
   b53c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b53c2:	60e3      	str	r3, [r4, #12]
   b53c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b53c8:	9206      	str	r2, [sp, #24]
   b53ca:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b53cc:	4b06      	ldr	r3, [pc, #24]	; (b53e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b53ce:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b53d0:	4b06      	ldr	r3, [pc, #24]	; (b53ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b53d2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b53d4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b53d6:	a803      	add	r0, sp, #12
   b53d8:	f7ff fd75 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b53dc:	2200      	movs	r2, #0
   b53de:	4629      	mov	r1, r5
   b53e0:	4803      	ldr	r0, [pc, #12]	; (b53f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b53e2:	f7ff fc85 	bl	b4cf0 <application_thread_invoke>
   b53e6:	e7c7      	b.n	b5378 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b53e8:	000b5011 	.word	0x000b5011
   b53ec:	000b53f5 	.word	0x000b53f5
   b53f0:	000b4e9f 	.word	0x000b4e9f

000b53f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b53f4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b53f6:	b570      	push	{r4, r5, r6, lr}
   b53f8:	4604      	mov	r4, r0
	switch (__op)
   b53fa:	d103      	bne.n	b5404 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b53fc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b53fe:	6003      	str	r3, [r0, #0]
      }
   b5400:	2000      	movs	r0, #0
   b5402:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5404:	2a02      	cmp	r2, #2
   b5406:	d00c      	beq.n	b5422 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5408:	2a03      	cmp	r2, #3
   b540a:	d1f9      	bne.n	b5400 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b540c:	6804      	ldr	r4, [r0, #0]
   b540e:	2c00      	cmp	r4, #0
   b5410:	d0f6      	beq.n	b5400 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5412:	4620      	mov	r0, r4
   b5414:	f7ff fd57 	bl	b4ec6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5418:	2114      	movs	r1, #20
   b541a:	4620      	mov	r0, r4
   b541c:	f7fe fe3f 	bl	b409e <_ZdlPvj>
   b5420:	e7ee      	b.n	b5400 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5422:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5424:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5426:	f7fe fe34 	bl	b4092 <_Znwj>
   b542a:	4605      	mov	r5, r0
   b542c:	b120      	cbz	r0, b5438 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b542e:	4631      	mov	r1, r6
   b5430:	f7ff ff4e 	bl	b52d0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5434:	7c33      	ldrb	r3, [r6, #16]
   b5436:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5438:	6025      	str	r5, [r4, #0]
	}
   b543a:	e7e1      	b.n	b5400 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b543c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b543c:	2200      	movs	r2, #0
   b543e:	6840      	ldr	r0, [r0, #4]
   b5440:	4611      	mov	r1, r2
   b5442:	f7ff bcc1 	b.w	b4dc8 <network_listening>

000b5446 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5446:	2200      	movs	r2, #0
   b5448:	6840      	ldr	r0, [r0, #4]
   b544a:	4611      	mov	r1, r2
   b544c:	f7ff bccc 	b.w	b4de8 <network_get_listen_timeout>

000b5450 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5450:	6840      	ldr	r0, [r0, #4]
   b5452:	2200      	movs	r2, #0
   b5454:	f7ff bcc0 	b.w	b4dd8 <network_set_listen_timeout>

000b5458 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5458:	6840      	ldr	r0, [r0, #4]
   b545a:	2200      	movs	r2, #0
   b545c:	f081 0101 	eor.w	r1, r1, #1
   b5460:	f7ff bcaa 	b.w	b4db8 <network_listen>

000b5464 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5464:	2300      	movs	r3, #0
   b5466:	6840      	ldr	r0, [r0, #4]
   b5468:	461a      	mov	r2, r3
   b546a:	4619      	mov	r1, r3
   b546c:	f7ff bc9c 	b.w	b4da8 <network_off>

000b5470 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5470:	2300      	movs	r3, #0
   b5472:	6840      	ldr	r0, [r0, #4]
   b5474:	461a      	mov	r2, r3
   b5476:	4619      	mov	r1, r3
   b5478:	f7ff bc8e 	b.w	b4d98 <network_on>

000b547c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b547c:	2200      	movs	r2, #0
   b547e:	6840      	ldr	r0, [r0, #4]
   b5480:	4611      	mov	r1, r2
   b5482:	f7ff bc81 	b.w	b4d88 <network_ready>

000b5486 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5486:	2200      	movs	r2, #0
   b5488:	6840      	ldr	r0, [r0, #4]
   b548a:	4611      	mov	r1, r2
   b548c:	f7ff bc6c 	b.w	b4d68 <network_connecting>

000b5490 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5490:	6840      	ldr	r0, [r0, #4]
   b5492:	2200      	movs	r2, #0
   b5494:	2102      	movs	r1, #2
   b5496:	f7ff bc6f 	b.w	b4d78 <network_disconnect>

000b549a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b549a:	2300      	movs	r3, #0
   b549c:	6840      	ldr	r0, [r0, #4]
   b549e:	461a      	mov	r2, r3
   b54a0:	f7ff bc5a 	b.w	b4d58 <network_connect>

000b54a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b54a4:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b54a6:	2203      	movs	r2, #3
   b54a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b54aa:	4a02      	ldr	r2, [pc, #8]	; (b54b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b54ac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b54ae:	4770      	bx	lr
   b54b0:	2003e6c0 	.word	0x2003e6c0
   b54b4:	000b6f58 	.word	0x000b6f58

000b54b8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b54b8:	4770      	bx	lr

000b54ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b54ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54bc:	4606      	mov	r6, r0
   b54be:	4615      	mov	r5, r2
   b54c0:	460c      	mov	r4, r1
   b54c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b54c4:	42bc      	cmp	r4, r7
   b54c6:	d006      	beq.n	b54d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b54c8:	6833      	ldr	r3, [r6, #0]
   b54ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   b54ce:	689b      	ldr	r3, [r3, #8]
   b54d0:	4630      	mov	r0, r6
   b54d2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b54d4:	e7f6      	b.n	b54c4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b54d6:	4628      	mov	r0, r5
   b54d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54da <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b54da:	7c00      	ldrb	r0, [r0, #16]
   b54dc:	2200      	movs	r2, #0
   b54de:	f7ff bacf 	b.w	b4a80 <hal_i2c_write>

000b54e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b54e2:	7c00      	ldrb	r0, [r0, #16]
   b54e4:	2100      	movs	r1, #0
   b54e6:	f7ff bad3 	b.w	b4a90 <hal_i2c_available>

000b54ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b54ea:	7c00      	ldrb	r0, [r0, #16]
   b54ec:	2100      	movs	r1, #0
   b54ee:	f7ff bad7 	b.w	b4aa0 <hal_i2c_read>

000b54f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b54f2:	7c00      	ldrb	r0, [r0, #16]
   b54f4:	2100      	movs	r1, #0
   b54f6:	f7ff badb 	b.w	b4ab0 <hal_i2c_peek>

000b54fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b54fa:	7c00      	ldrb	r0, [r0, #16]
   b54fc:	2100      	movs	r1, #0
   b54fe:	f7ff badf 	b.w	b4ac0 <hal_i2c_flush>

000b5502 <_ZN7TwoWireD0Ev>:
   b5502:	b510      	push	{r4, lr}
   b5504:	2114      	movs	r1, #20
   b5506:	4604      	mov	r4, r0
   b5508:	f7fe fdc9 	bl	b409e <_ZdlPvj>
   b550c:	4620      	mov	r0, r4
   b550e:	bd10      	pop	{r4, pc}

000b5510 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5510:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5516:	4604      	mov	r4, r0
   b5518:	4608      	mov	r0, r1
   b551a:	2100      	movs	r1, #0
   b551c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5520:	4b03      	ldr	r3, [pc, #12]	; (b5530 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5522:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5524:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5526:	4611      	mov	r1, r2
   b5528:	f7ff fada 	bl	b4ae0 <hal_i2c_init>
}
   b552c:	4620      	mov	r0, r4
   b552e:	bd10      	pop	{r4, pc}
   b5530:	000b6f94 	.word	0x000b6f94

000b5534 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5534:	4770      	bx	lr

000b5536 <_ZN9IPAddressD0Ev>:
   b5536:	b510      	push	{r4, lr}
   b5538:	2118      	movs	r1, #24
   b553a:	4604      	mov	r4, r0
   b553c:	f7fe fdaf 	bl	b409e <_ZdlPvj>
   b5540:	4620      	mov	r0, r4
   b5542:	bd10      	pop	{r4, pc}

000b5544 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5544:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5546:	7d03      	ldrb	r3, [r0, #20]
   b5548:	2b06      	cmp	r3, #6
{
   b554a:	b08d      	sub	sp, #52	; 0x34
   b554c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b554e:	f100 0704 	add.w	r7, r0, #4
   b5552:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5556:	d012      	beq.n	b557e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5558:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b555c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5560:	220a      	movs	r2, #10
   b5562:	4630      	mov	r0, r6
   b5564:	f000 f959 	bl	b581a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5568:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b556a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b556c:	d019      	beq.n	b55a2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b556e:	2c00      	cmp	r4, #0
   b5570:	d0f4      	beq.n	b555c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5572:	212e      	movs	r1, #46	; 0x2e
   b5574:	4630      	mov	r0, r6
   b5576:	f000 f94d 	bl	b5814 <_ZN5Print5printEc>
   b557a:	4404      	add	r4, r0
   b557c:	e7ee      	b.n	b555c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b557e:	232f      	movs	r3, #47	; 0x2f
   b5580:	466a      	mov	r2, sp
   b5582:	4639      	mov	r1, r7
   b5584:	200a      	movs	r0, #10
		buf[0] = 0;
   b5586:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b558a:	f7ff fab9 	bl	b4b00 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b558e:	4668      	mov	r0, sp
   b5590:	f001 fbef 	bl	b6d72 <strlen>
   b5594:	6833      	ldr	r3, [r6, #0]
   b5596:	4602      	mov	r2, r0
   b5598:	68db      	ldr	r3, [r3, #12]
   b559a:	4669      	mov	r1, sp
   b559c:	4630      	mov	r0, r6
   b559e:	4798      	blx	r3
   b55a0:	4604      	mov	r4, r0
    }
    return n;
}
   b55a2:	4620      	mov	r0, r4
   b55a4:	b00d      	add	sp, #52	; 0x34
   b55a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b55a8:	b510      	push	{r4, lr}
   b55aa:	4b05      	ldr	r3, [pc, #20]	; (b55c0 <_ZN9IPAddressC1Ev+0x18>)
   b55ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b55ae:	2211      	movs	r2, #17
   b55b0:	f840 3b04 	str.w	r3, [r0], #4
   b55b4:	2100      	movs	r1, #0
   b55b6:	f001 fb77 	bl	b6ca8 <memset>
}
   b55ba:	4620      	mov	r0, r4
   b55bc:	bd10      	pop	{r4, pc}
   b55be:	bf00      	nop
   b55c0:	000b6fbc 	.word	0x000b6fbc

000b55c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b55c4:	4603      	mov	r3, r0
   b55c6:	4a07      	ldr	r2, [pc, #28]	; (b55e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b55c8:	b510      	push	{r4, lr}
   b55ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b55ce:	f101 0210 	add.w	r2, r1, #16
   b55d2:	f851 4b04 	ldr.w	r4, [r1], #4
   b55d6:	f843 4b04 	str.w	r4, [r3], #4
   b55da:	4291      	cmp	r1, r2
   b55dc:	d1f9      	bne.n	b55d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b55de:	780a      	ldrb	r2, [r1, #0]
   b55e0:	701a      	strb	r2, [r3, #0]
}
   b55e2:	bd10      	pop	{r4, pc}
   b55e4:	000b6fbc 	.word	0x000b6fbc

000b55e8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b55e8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b55ea:	2b04      	cmp	r3, #4
   b55ec:	d104      	bne.n	b55f8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b55ee:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b55f0:	3800      	subs	r0, #0
   b55f2:	bf18      	it	ne
   b55f4:	2001      	movne	r0, #1
   b55f6:	4770      	bx	lr
    } else if (version() == 6) {
   b55f8:	2b06      	cmp	r3, #6
   b55fa:	d107      	bne.n	b560c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b55fc:	6843      	ldr	r3, [r0, #4]
   b55fe:	b93b      	cbnz	r3, b5610 <_ZNK9IPAddresscvbEv+0x28>
   b5600:	6883      	ldr	r3, [r0, #8]
   b5602:	b92b      	cbnz	r3, b5610 <_ZNK9IPAddresscvbEv+0x28>
   b5604:	68c3      	ldr	r3, [r0, #12]
   b5606:	b91b      	cbnz	r3, b5610 <_ZNK9IPAddresscvbEv+0x28>
   b5608:	6900      	ldr	r0, [r0, #16]
   b560a:	e7f1      	b.n	b55f0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b560c:	2000      	movs	r0, #0
   b560e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5610:	2001      	movs	r0, #1
}
   b5612:	4770      	bx	lr

000b5614 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5614:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5616:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b561a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b561e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5622:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5626:	2304      	movs	r3, #4
   b5628:	6041      	str	r1, [r0, #4]
   b562a:	7503      	strb	r3, [r0, #20]
}
   b562c:	bd10      	pop	{r4, pc}
	...

000b5630 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5630:	b507      	push	{r0, r1, r2, lr}
   b5632:	4b06      	ldr	r3, [pc, #24]	; (b564c <_ZN9IPAddressC1EPKh+0x1c>)
   b5634:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5636:	78cb      	ldrb	r3, [r1, #3]
   b5638:	9300      	str	r3, [sp, #0]
   b563a:	788b      	ldrb	r3, [r1, #2]
   b563c:	784a      	ldrb	r2, [r1, #1]
   b563e:	7809      	ldrb	r1, [r1, #0]
   b5640:	f7ff ffe8 	bl	b5614 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5644:	b003      	add	sp, #12
   b5646:	f85d fb04 	ldr.w	pc, [sp], #4
   b564a:	bf00      	nop
   b564c:	000b6fbc 	.word	0x000b6fbc

000b5650 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5650:	4b01      	ldr	r3, [pc, #4]	; (b5658 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5652:	4a02      	ldr	r2, [pc, #8]	; (b565c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5654:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5656:	4770      	bx	lr
   b5658:	2003e6c8 	.word	0x2003e6c8
   b565c:	000b6fc8 	.word	0x000b6fc8

000b5660 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5660:	2300      	movs	r3, #0
   b5662:	6840      	ldr	r0, [r0, #4]
   b5664:	461a      	mov	r2, r3
   b5666:	f7ff bb77 	b.w	b4d58 <network_connect>

000b566a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b566a:	6840      	ldr	r0, [r0, #4]
   b566c:	2200      	movs	r2, #0
   b566e:	2102      	movs	r1, #2
   b5670:	f7ff bb82 	b.w	b4d78 <network_disconnect>

000b5674 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5674:	2200      	movs	r2, #0
   b5676:	6840      	ldr	r0, [r0, #4]
   b5678:	4611      	mov	r1, r2
   b567a:	f7ff bb75 	b.w	b4d68 <network_connecting>

000b567e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b567e:	2200      	movs	r2, #0
   b5680:	6840      	ldr	r0, [r0, #4]
   b5682:	4611      	mov	r1, r2
   b5684:	f7ff bb80 	b.w	b4d88 <network_ready>

000b5688 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5688:	2300      	movs	r3, #0
   b568a:	6840      	ldr	r0, [r0, #4]
   b568c:	461a      	mov	r2, r3
   b568e:	4619      	mov	r1, r3
   b5690:	f7ff bb82 	b.w	b4d98 <network_on>

000b5694 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5694:	2300      	movs	r3, #0
   b5696:	6840      	ldr	r0, [r0, #4]
   b5698:	461a      	mov	r2, r3
   b569a:	4619      	mov	r1, r3
   b569c:	f7ff bb84 	b.w	b4da8 <network_off>

000b56a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b56a0:	6840      	ldr	r0, [r0, #4]
   b56a2:	2100      	movs	r1, #0
   b56a4:	f7ff bba8 	b.w	b4df8 <network_is_on>

000b56a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b56a8:	6840      	ldr	r0, [r0, #4]
   b56aa:	2100      	movs	r1, #0
   b56ac:	f7ff bbac 	b.w	b4e08 <network_is_off>

000b56b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b56b0:	6840      	ldr	r0, [r0, #4]
   b56b2:	2200      	movs	r2, #0
   b56b4:	f081 0101 	eor.w	r1, r1, #1
   b56b8:	f7ff bb7e 	b.w	b4db8 <network_listen>

000b56bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b56bc:	6840      	ldr	r0, [r0, #4]
   b56be:	2200      	movs	r2, #0
   b56c0:	f7ff bb8a 	b.w	b4dd8 <network_set_listen_timeout>

000b56c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b56c4:	2200      	movs	r2, #0
   b56c6:	6840      	ldr	r0, [r0, #4]
   b56c8:	4611      	mov	r1, r2
   b56ca:	f7ff bb8d 	b.w	b4de8 <network_get_listen_timeout>

000b56ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b56ce:	2200      	movs	r2, #0
   b56d0:	6840      	ldr	r0, [r0, #4]
   b56d2:	4611      	mov	r1, r2
   b56d4:	f7ff bb78 	b.w	b4dc8 <network_listening>

000b56d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b56d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b56dc:	b095      	sub	sp, #84	; 0x54
   b56de:	4614      	mov	r4, r2
   b56e0:	460d      	mov	r5, r1
   b56e2:	4607      	mov	r7, r0
    IPAddress addr;
   b56e4:	f7ff ff60 	bl	b55a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b56e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b56ea:	221c      	movs	r2, #28
   b56ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b56ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b56f0:	f001 fada 	bl	b6ca8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b56f4:	2340      	movs	r3, #64	; 0x40
   b56f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b56f8:	4620      	mov	r0, r4
   b56fa:	466b      	mov	r3, sp
   b56fc:	aa0c      	add	r2, sp, #48	; 0x30
   b56fe:	2100      	movs	r1, #0
   b5700:	f7ff fa1e 	bl	b4b40 <netdb_getaddrinfo>
    if (!r) {
   b5704:	4604      	mov	r4, r0
   b5706:	2800      	cmp	r0, #0
   b5708:	d14b      	bne.n	b57a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b570a:	4602      	mov	r2, r0
   b570c:	2101      	movs	r1, #1
   b570e:	6868      	ldr	r0, [r5, #4]
   b5710:	f7ff fb3a 	bl	b4d88 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5714:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5716:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5718:	4622      	mov	r2, r4
   b571a:	6868      	ldr	r0, [r5, #4]
   b571c:	f7ff fb34 	bl	b4d88 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5720:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5722:	4681      	mov	r9, r0
        bool ok = false;
   b5724:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5726:	2e00      	cmp	r6, #0
   b5728:	d03b      	beq.n	b57a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b572a:	2900      	cmp	r1, #0
   b572c:	d139      	bne.n	b57a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b572e:	6873      	ldr	r3, [r6, #4]
   b5730:	2b02      	cmp	r3, #2
   b5732:	d003      	beq.n	b573c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5734:	2b0a      	cmp	r3, #10
   b5736:	d011      	beq.n	b575c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5738:	69f6      	ldr	r6, [r6, #28]
   b573a:	e7f4      	b.n	b5726 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b573c:	f1b8 0f00 	cmp.w	r8, #0
   b5740:	d0fa      	beq.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5742:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5744:	a806      	add	r0, sp, #24
   b5746:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5748:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b574a:	f7ff ff71 	bl	b5630 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b574e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5750:	1d3c      	adds	r4, r7, #4
   b5752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5754:	682b      	ldr	r3, [r5, #0]
   b5756:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5758:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b575a:	e7ed      	b.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b575c:	f1b9 0f00 	cmp.w	r9, #0
   b5760:	d0ea      	beq.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5762:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5764:	2210      	movs	r2, #16
   b5766:	a801      	add	r0, sp, #4
   b5768:	f001 fa9e 	bl	b6ca8 <memset>
                    a.v = 6;
   b576c:	2306      	movs	r3, #6
   b576e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5772:	ad01      	add	r5, sp, #4
   b5774:	f104 0308 	add.w	r3, r4, #8
   b5778:	3418      	adds	r4, #24
   b577a:	6818      	ldr	r0, [r3, #0]
   b577c:	6859      	ldr	r1, [r3, #4]
   b577e:	462a      	mov	r2, r5
   b5780:	c203      	stmia	r2!, {r0, r1}
   b5782:	3308      	adds	r3, #8
   b5784:	42a3      	cmp	r3, r4
   b5786:	4615      	mov	r5, r2
   b5788:	d1f7      	bne.n	b577a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b578a:	a901      	add	r1, sp, #4
   b578c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b578e:	ad07      	add	r5, sp, #28
   b5790:	f7ff ff18 	bl	b55c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5796:	1d3c      	adds	r4, r7, #4
   b5798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b579a:	682b      	ldr	r3, [r5, #0]
   b579c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b579e:	4649      	mov	r1, r9
   b57a0:	e7ca      	b.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b57a2:	9800      	ldr	r0, [sp, #0]
   b57a4:	f7ff f9c4 	bl	b4b30 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b57a8:	4638      	mov	r0, r7
   b57aa:	b015      	add	sp, #84	; 0x54
   b57ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b57b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b57b0:	4b02      	ldr	r3, [pc, #8]	; (b57bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b57b2:	4a03      	ldr	r2, [pc, #12]	; (b57c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b57b4:	601a      	str	r2, [r3, #0]
   b57b6:	2200      	movs	r2, #0
   b57b8:	605a      	str	r2, [r3, #4]

} // spark
   b57ba:	4770      	bx	lr
   b57bc:	2003e6cc 	.word	0x2003e6cc
   b57c0:	000b6fd4 	.word	0x000b6fd4

000b57c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b57c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57c6:	4606      	mov	r6, r0
   b57c8:	460d      	mov	r5, r1
  size_t n = 0;
   b57ca:	188f      	adds	r7, r1, r2
   b57cc:	2400      	movs	r4, #0
  while (size--) {
   b57ce:	42bd      	cmp	r5, r7
   b57d0:	d00c      	beq.n	b57ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b57d2:	6833      	ldr	r3, [r6, #0]
   b57d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b57d8:	689b      	ldr	r3, [r3, #8]
   b57da:	4630      	mov	r0, r6
   b57dc:	4798      	blx	r3
     if (chunk>=0)
   b57de:	1e03      	subs	r3, r0, #0
   b57e0:	db01      	blt.n	b57e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b57e2:	441c      	add	r4, r3
  while (size--) {
   b57e4:	e7f3      	b.n	b57ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b57e6:	2c00      	cmp	r4, #0
   b57e8:	bf08      	it	eq
   b57ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b57ec:	4620      	mov	r0, r4
   b57ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57f0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b57f0:	b513      	push	{r0, r1, r4, lr}
   b57f2:	4604      	mov	r4, r0
    }
   b57f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b57f6:	b159      	cbz	r1, b5810 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b57f8:	9101      	str	r1, [sp, #4]
   b57fa:	f001 faba 	bl	b6d72 <strlen>
   b57fe:	6823      	ldr	r3, [r4, #0]
   b5800:	9901      	ldr	r1, [sp, #4]
   b5802:	68db      	ldr	r3, [r3, #12]
   b5804:	4602      	mov	r2, r0
   b5806:	4620      	mov	r0, r4
    }
   b5808:	b002      	add	sp, #8
   b580a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b580e:	4718      	bx	r3
    }
   b5810:	b002      	add	sp, #8
   b5812:	bd10      	pop	{r4, pc}

000b5814 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5814:	6803      	ldr	r3, [r0, #0]
   b5816:	689b      	ldr	r3, [r3, #8]
   b5818:	4718      	bx	r3

000b581a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b581a:	b530      	push	{r4, r5, lr}
   b581c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b581e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5820:	2a01      	cmp	r2, #1
  *str = '\0';
   b5822:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5826:	bf98      	it	ls
   b5828:	220a      	movls	r2, #10
   b582a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b582c:	460d      	mov	r5, r1
   b582e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5832:	fb01 5312 	mls	r3, r1, r2, r5
   b5836:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b583a:	2b09      	cmp	r3, #9
   b583c:	bf94      	ite	ls
   b583e:	3330      	addls	r3, #48	; 0x30
   b5840:	3337      	addhi	r3, #55	; 0x37
   b5842:	b2db      	uxtb	r3, r3
  } while(n);
   b5844:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5846:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b584a:	d9ef      	bls.n	b582c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b584c:	4621      	mov	r1, r4
   b584e:	f7ff ffcf 	bl	b57f0 <_ZN5Print5writeEPKc>
}
   b5852:	b00b      	add	sp, #44	; 0x2c
   b5854:	bd30      	pop	{r4, r5, pc}
	...

000b5858 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5858:	4b01      	ldr	r3, [pc, #4]	; (b5860 <_GLOBAL__sub_I_RGB+0x8>)
   b585a:	2200      	movs	r2, #0
   b585c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b585e:	4770      	bx	lr
   b5860:	2003e6d4 	.word	0x2003e6d4

000b5864 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5864:	b510      	push	{r4, lr}
   b5866:	4604      	mov	r4, r0
   b5868:	4608      	mov	r0, r1
{
    _spi = spi;
   b586a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b586c:	f7ff f9a0 	bl	b4bb0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5870:	2300      	movs	r3, #0
   b5872:	6063      	str	r3, [r4, #4]
}
   b5874:	4620      	mov	r0, r4
   b5876:	bd10      	pop	{r4, pc}

000b5878 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5878:	b510      	push	{r4, lr}
   b587a:	4604      	mov	r4, r0
{
	free(buffer);
   b587c:	6800      	ldr	r0, [r0, #0]
   b587e:	f7ff fad3 	bl	b4e28 <free>
}
   b5882:	4620      	mov	r0, r4
   b5884:	bd10      	pop	{r4, pc}

000b5886 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5886:	b510      	push	{r4, lr}
   b5888:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b588a:	6800      	ldr	r0, [r0, #0]
   b588c:	b108      	cbz	r0, b5892 <_ZN6String10invalidateEv+0xc>
   b588e:	f7ff facb 	bl	b4e28 <free>
	buffer = NULL;
   b5892:	2300      	movs	r3, #0
	capacity = len = 0;
   b5894:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5898:	6023      	str	r3, [r4, #0]
}
   b589a:	bd10      	pop	{r4, pc}

000b589c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b589c:	b538      	push	{r3, r4, r5, lr}
   b589e:	4604      	mov	r4, r0
   b58a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b58a2:	6800      	ldr	r0, [r0, #0]
   b58a4:	3101      	adds	r1, #1
   b58a6:	f7ff fac7 	bl	b4e38 <realloc>
	if (newbuffer) {
   b58aa:	b110      	cbz	r0, b58b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b58ac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b58b0:	2001      	movs	r0, #1
	}
	return 0;
}
   b58b2:	bd38      	pop	{r3, r4, r5, pc}

000b58b4 <_ZN6String7reserveEj>:
{
   b58b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b58b6:	6803      	ldr	r3, [r0, #0]
{
   b58b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b58ba:	b123      	cbz	r3, b58c6 <_ZN6String7reserveEj+0x12>
   b58bc:	6843      	ldr	r3, [r0, #4]
   b58be:	428b      	cmp	r3, r1
   b58c0:	d301      	bcc.n	b58c6 <_ZN6String7reserveEj+0x12>
   b58c2:	2001      	movs	r0, #1
}
   b58c4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b58c6:	4620      	mov	r0, r4
   b58c8:	f7ff ffe8 	bl	b589c <_ZN6String12changeBufferEj>
   b58cc:	2800      	cmp	r0, #0
   b58ce:	d0f9      	beq.n	b58c4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b58d0:	68a3      	ldr	r3, [r4, #8]
   b58d2:	2b00      	cmp	r3, #0
   b58d4:	d1f5      	bne.n	b58c2 <_ZN6String7reserveEj+0xe>
   b58d6:	6822      	ldr	r2, [r4, #0]
   b58d8:	7013      	strb	r3, [r2, #0]
   b58da:	e7f2      	b.n	b58c2 <_ZN6String7reserveEj+0xe>

000b58dc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b58dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58de:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b58e0:	4611      	mov	r1, r2
   b58e2:	9201      	str	r2, [sp, #4]
{
   b58e4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b58e6:	f7ff ffe5 	bl	b58b4 <_ZN6String7reserveEj>
   b58ea:	9a01      	ldr	r2, [sp, #4]
   b58ec:	b928      	cbnz	r0, b58fa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b58ee:	4620      	mov	r0, r4
   b58f0:	f7ff ffc9 	bl	b5886 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b58f4:	4620      	mov	r0, r4
   b58f6:	b003      	add	sp, #12
   b58f8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b58fa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b58fc:	4629      	mov	r1, r5
   b58fe:	6820      	ldr	r0, [r4, #0]
   b5900:	f001 f9c4 	bl	b6c8c <memcpy>
	buffer[len] = 0;
   b5904:	6822      	ldr	r2, [r4, #0]
   b5906:	68a3      	ldr	r3, [r4, #8]
   b5908:	2100      	movs	r1, #0
   b590a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b590c:	e7f2      	b.n	b58f4 <_ZN6String4copyEPKcj+0x18>

000b590e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b590e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5910:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5912:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5916:	4604      	mov	r4, r0
	len = 0;
   b5918:	6083      	str	r3, [r0, #8]
	flags = 0;
   b591a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b591c:	b141      	cbz	r1, b5930 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b591e:	4608      	mov	r0, r1
   b5920:	9101      	str	r1, [sp, #4]
   b5922:	f001 fa26 	bl	b6d72 <strlen>
   b5926:	9901      	ldr	r1, [sp, #4]
   b5928:	4602      	mov	r2, r0
   b592a:	4620      	mov	r0, r4
   b592c:	f7ff ffd6 	bl	b58dc <_ZN6String4copyEPKcj>
}
   b5930:	4620      	mov	r0, r4
   b5932:	b002      	add	sp, #8
   b5934:	bd10      	pop	{r4, pc}

000b5936 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5936:	4288      	cmp	r0, r1
{
   b5938:	b510      	push	{r4, lr}
   b593a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b593c:	d005      	beq.n	b594a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b593e:	680b      	ldr	r3, [r1, #0]
   b5940:	b12b      	cbz	r3, b594e <_ZN6StringaSERKS_+0x18>
   b5942:	688a      	ldr	r2, [r1, #8]
   b5944:	4619      	mov	r1, r3
   b5946:	f7ff ffc9 	bl	b58dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b594a:	4620      	mov	r0, r4
   b594c:	bd10      	pop	{r4, pc}
	else invalidate();
   b594e:	f7ff ff9a 	bl	b5886 <_ZN6String10invalidateEv>
   b5952:	e7fa      	b.n	b594a <_ZN6StringaSERKS_+0x14>

000b5954 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5954:	b510      	push	{r4, lr}
	buffer = NULL;
   b5956:	2300      	movs	r3, #0
String::String(const String &value)
   b5958:	4604      	mov	r4, r0
	capacity = 0;
   b595a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b595e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5960:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5962:	f7ff ffe8 	bl	b5936 <_ZN6StringaSERKS_>
}
   b5966:	4620      	mov	r0, r4
   b5968:	bd10      	pop	{r4, pc}

000b596a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b596a:	b513      	push	{r0, r1, r4, lr}
   b596c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b596e:	b159      	cbz	r1, b5988 <_ZN6StringaSEPKc+0x1e>
   b5970:	4608      	mov	r0, r1
   b5972:	9101      	str	r1, [sp, #4]
   b5974:	f001 f9fd 	bl	b6d72 <strlen>
   b5978:	9901      	ldr	r1, [sp, #4]
   b597a:	4602      	mov	r2, r0
   b597c:	4620      	mov	r0, r4
   b597e:	f7ff ffad 	bl	b58dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5982:	4620      	mov	r0, r4
   b5984:	b002      	add	sp, #8
   b5986:	bd10      	pop	{r4, pc}
	else invalidate();
   b5988:	f7ff ff7d 	bl	b5886 <_ZN6String10invalidateEv>
   b598c:	e7f9      	b.n	b5982 <_ZN6StringaSEPKc+0x18>

000b598e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b598e:	b510      	push	{r4, lr}
   b5990:	4604      	mov	r4, r0
   b5992:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5994:	2300      	movs	r3, #0
	capacity = 0;
   b5996:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b599a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b599c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b599e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b59a0:	a901      	add	r1, sp, #4
   b59a2:	f000 fc81 	bl	b62a8 <itoa>
	*this = buf;
   b59a6:	a901      	add	r1, sp, #4
   b59a8:	4620      	mov	r0, r4
   b59aa:	f7ff ffde 	bl	b596a <_ZN6StringaSEPKc>
}
   b59ae:	4620      	mov	r0, r4
   b59b0:	b00a      	add	sp, #40	; 0x28
   b59b2:	bd10      	pop	{r4, pc}

000b59b4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b59b4:	b570      	push	{r4, r5, r6, lr}
   b59b6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b59b8:	460e      	mov	r6, r1
   b59ba:	b909      	cbnz	r1, b59c0 <_ZN6String6concatEPKcj+0xc>
   b59bc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b59be:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b59c0:	b16a      	cbz	r2, b59de <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b59c2:	6884      	ldr	r4, [r0, #8]
   b59c4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b59c6:	4621      	mov	r1, r4
   b59c8:	f7ff ff74 	bl	b58b4 <_ZN6String7reserveEj>
   b59cc:	2800      	cmp	r0, #0
   b59ce:	d0f5      	beq.n	b59bc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b59d0:	6828      	ldr	r0, [r5, #0]
   b59d2:	68ab      	ldr	r3, [r5, #8]
   b59d4:	4631      	mov	r1, r6
   b59d6:	4418      	add	r0, r3
   b59d8:	f001 f9a6 	bl	b6d28 <strcpy>
	len = newlen;
   b59dc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b59de:	2001      	movs	r0, #1
   b59e0:	e7ed      	b.n	b59be <_ZN6String6concatEPKcj+0xa>

000b59e2 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   b59e2:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   b59e4:	220a      	movs	r2, #10
{
   b59e6:	4604      	mov	r4, r0
   b59e8:	4608      	mov	r0, r1
	itoa(num, buf, 10);
   b59ea:	4669      	mov	r1, sp
   b59ec:	f000 fc5c 	bl	b62a8 <itoa>
	return concat(buf, strlen(buf));
   b59f0:	4668      	mov	r0, sp
   b59f2:	f001 f9be 	bl	b6d72 <strlen>
   b59f6:	4669      	mov	r1, sp
   b59f8:	4602      	mov	r2, r0
   b59fa:	4620      	mov	r0, r4
   b59fc:	f7ff ffda 	bl	b59b4 <_ZN6String6concatEPKcj>
}
   b5a00:	b002      	add	sp, #8
   b5a02:	bd10      	pop	{r4, pc}

000b5a04 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5a04:	4b05      	ldr	r3, [pc, #20]	; (b5a1c <_GLOBAL__sub_I_System+0x18>)
   b5a06:	2202      	movs	r2, #2
   b5a08:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5a0a:	4b05      	ldr	r3, [pc, #20]	; (b5a20 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5a0c:	4a05      	ldr	r2, [pc, #20]	; (b5a24 <_GLOBAL__sub_I_System+0x20>)
   b5a0e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5a10:	2000      	movs	r0, #0
   b5a12:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5a16:	f7ff b953 	b.w	b4cc0 <set_system_mode>
   b5a1a:	bf00      	nop
   b5a1c:	2003e6f0 	.word	0x2003e6f0
   b5a20:	2003e6e4 	.word	0x2003e6e4
   b5a24:	ffff0000 	.word	0xffff0000

000b5a28 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5a28:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5a2a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5a2c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5a30:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5a32:	2201      	movs	r2, #1
   b5a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5a38:	f10d 0107 	add.w	r1, sp, #7
   b5a3c:	47a0      	blx	r4
}
   b5a3e:	b002      	add	sp, #8
   b5a40:	bd10      	pop	{r4, pc}

000b5a42 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5a42:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5a44:	6803      	ldr	r3, [r0, #0]
   b5a46:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5a4c:	46a4      	mov	ip, r4
}
   b5a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5a52:	4760      	bx	ip

000b5a54 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5a54:	b513      	push	{r0, r1, r4, lr}
   b5a56:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5a58:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5a5a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5a5e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5a60:	f10d 0107 	add.w	r1, sp, #7
   b5a64:	2201      	movs	r2, #1
   b5a66:	47a0      	blx	r4
}
   b5a68:	b002      	add	sp, #8
   b5a6a:	bd10      	pop	{r4, pc}

000b5a6c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5a6c:	b510      	push	{r4, lr}
   b5a6e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5a70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5a74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5a78:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5a7a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5a7c:	d008      	beq.n	b5a90 <_ZN9TCPClient4readEv+0x24>
   b5a7e:	6963      	ldr	r3, [r4, #20]
   b5a80:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5a84:	1c51      	adds	r1, r2, #1
   b5a86:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5a8a:	4413      	add	r3, r2
   b5a8c:	7918      	ldrb	r0, [r3, #4]
}
   b5a8e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5a90:	6803      	ldr	r3, [r0, #0]
   b5a92:	691b      	ldr	r3, [r3, #16]
   b5a94:	4798      	blx	r3
   b5a96:	2800      	cmp	r0, #0
   b5a98:	d1f1      	bne.n	b5a7e <_ZN9TCPClient4readEv+0x12>
   b5a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5a9e:	e7f6      	b.n	b5a8e <_ZN9TCPClient4readEv+0x22>

000b5aa0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5aa0:	4770      	bx	lr

000b5aa2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5aa2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5aa4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5aa6:	43c0      	mvns	r0, r0
   b5aa8:	0fc0      	lsrs	r0, r0, #31
   b5aaa:	4770      	bx	lr

000b5aac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5aac:	4770      	bx	lr
	...

000b5ab0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5ab0:	4b06      	ldr	r3, [pc, #24]	; (b5acc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5ab2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5ab4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5ab6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5aba:	d005      	beq.n	b5ac8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5abc:	4608      	mov	r0, r1
   b5abe:	f000 fd89 	bl	b65d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5ac2:	2800      	cmp	r0, #0
   b5ac4:	bf08      	it	eq
   b5ac6:	2400      	moveq	r4, #0
      }
   b5ac8:	4620      	mov	r0, r4
   b5aca:	bd10      	pop	{r4, pc}
   b5acc:	000b6f2c 	.word	0x000b6f2c

000b5ad0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5ad0:	b510      	push	{r4, lr}
   b5ad2:	21ac      	movs	r1, #172	; 0xac
   b5ad4:	4604      	mov	r4, r0
   b5ad6:	f7fe fae2 	bl	b409e <_ZdlPvj>
   b5ada:	4620      	mov	r0, r4
   b5adc:	bd10      	pop	{r4, pc}

000b5ade <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5ade:	21ac      	movs	r1, #172	; 0xac
   b5ae0:	f7fe badd 	b.w	b409e <_ZdlPvj>

000b5ae4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5ae8:	f04f 0800 	mov.w	r8, #0
   b5aec:	b086      	sub	sp, #24
   b5aee:	461c      	mov	r4, r3
   b5af0:	f8c0 8004 	str.w	r8, [r0, #4]
   b5af4:	4605      	mov	r5, r0
   b5af6:	460e      	mov	r6, r1
   b5af8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5afa:	4641      	mov	r1, r8
   b5afc:	2210      	movs	r2, #16
   b5afe:	a802      	add	r0, sp, #8
   b5b00:	f001 f8d2 	bl	b6ca8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5b04:	1c63      	adds	r3, r4, #1
   b5b06:	d009      	beq.n	b5b1c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b0c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5b10:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5b14:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5b18:	435c      	muls	r4, r3
   b5b1a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5b1c:	6968      	ldr	r0, [r5, #20]
   b5b1e:	2310      	movs	r3, #16
   b5b20:	9300      	str	r3, [sp, #0]
   b5b22:	6800      	ldr	r0, [r0, #0]
   b5b24:	ab02      	add	r3, sp, #8
   b5b26:	f241 0205 	movw	r2, #4101	; 0x1005
   b5b2a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5b2e:	f7ff f80f 	bl	b4b50 <sock_setsockopt>
    if (ret < 0) {
   b5b32:	2800      	cmp	r0, #0
   b5b34:	da07      	bge.n	b5b46 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5b36:	f7ff f997 	bl	b4e68 <__errno>
   b5b3a:	6803      	ldr	r3, [r0, #0]
   b5b3c:	606b      	str	r3, [r5, #4]
        return 0;
   b5b3e:	2000      	movs	r0, #0
}
   b5b40:	b006      	add	sp, #24
   b5b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b5b46:	6968      	ldr	r0, [r5, #20]
   b5b48:	2300      	movs	r3, #0
   b5b4a:	6800      	ldr	r0, [r0, #0]
   b5b4c:	463a      	mov	r2, r7
   b5b4e:	4631      	mov	r1, r6
   b5b50:	f7ff f81e 	bl	b4b90 <sock_send>
    if (ret < 0) {
   b5b54:	1e03      	subs	r3, r0, #0
   b5b56:	dbee      	blt.n	b5b36 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5b58:	4618      	mov	r0, r3
   b5b5a:	e7f1      	b.n	b5b40 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5b5c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5b5c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b5b5e:	6984      	ldr	r4, [r0, #24]
   b5b60:	4b0a      	ldr	r3, [pc, #40]	; (b5b8c <_ZN9TCPClientD1Ev+0x30>)
   b5b62:	6003      	str	r3, [r0, #0]
   b5b64:	4605      	mov	r5, r0
   b5b66:	b17c      	cbz	r4, b5b88 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5b68:	6863      	ldr	r3, [r4, #4]
   b5b6a:	3b01      	subs	r3, #1
   b5b6c:	6063      	str	r3, [r4, #4]
   b5b6e:	b95b      	cbnz	r3, b5b88 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5b70:	6823      	ldr	r3, [r4, #0]
   b5b72:	4620      	mov	r0, r4
   b5b74:	689b      	ldr	r3, [r3, #8]
   b5b76:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5b78:	68a3      	ldr	r3, [r4, #8]
   b5b7a:	3b01      	subs	r3, #1
   b5b7c:	60a3      	str	r3, [r4, #8]
   b5b7e:	b91b      	cbnz	r3, b5b88 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b5b80:	6823      	ldr	r3, [r4, #0]
   b5b82:	4620      	mov	r0, r4
   b5b84:	68db      	ldr	r3, [r3, #12]
   b5b86:	4798      	blx	r3
   b5b88:	4628      	mov	r0, r5
   b5b8a:	bd38      	pop	{r3, r4, r5, pc}
   b5b8c:	000b7044 	.word	0x000b7044

000b5b90 <_ZN9TCPClientD0Ev>:
   b5b90:	b510      	push	{r4, lr}
   b5b92:	4604      	mov	r4, r0
   b5b94:	f7ff ffe2 	bl	b5b5c <_ZN9TCPClientD1Ev>
   b5b98:	4620      	mov	r0, r4
   b5b9a:	211c      	movs	r1, #28
   b5b9c:	f7fe fa7f 	bl	b409e <_ZdlPvj>
   b5ba0:	4620      	mov	r0, r4
   b5ba2:	bd10      	pop	{r4, pc}

000b5ba4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5ba4:	b530      	push	{r4, r5, lr}
   b5ba6:	b087      	sub	sp, #28
   b5ba8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5baa:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5bac:	4668      	mov	r0, sp
   b5bae:	f7ff fd3f 	bl	b5630 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bb4:	3404      	adds	r4, #4
   b5bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bb8:	682b      	ldr	r3, [r5, #0]
   b5bba:	7023      	strb	r3, [r4, #0]
    }
   b5bbc:	b007      	add	sp, #28
   b5bbe:	bd30      	pop	{r4, r5, pc}

000b5bc0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5bc0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b5bc2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5bc4:	4b05      	ldr	r3, [pc, #20]	; (b5bdc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5bc6:	4604      	mov	r4, r0
   b5bc8:	358c      	adds	r5, #140	; 0x8c
   b5bca:	f844 3b04 	str.w	r3, [r4], #4
   b5bce:	4606      	mov	r6, r0
   b5bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bd4:	682b      	ldr	r3, [r5, #0]
   b5bd6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5bd8:	4630      	mov	r0, r6
   b5bda:	bd70      	pop	{r4, r5, r6, pc}
   b5bdc:	000b6fbc 	.word	0x000b6fbc

000b5be0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5be4:	4698      	mov	r8, r3
    stop();
   b5be6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5be8:	b093      	sub	sp, #76	; 0x4c
   b5bea:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5bec:	2400      	movs	r4, #0
    stop();
   b5bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5bf0:	4606      	mov	r6, r0
   b5bf2:	4617      	mov	r7, r2
    stop();
   b5bf4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5bf6:	4628      	mov	r0, r5
   b5bf8:	466b      	mov	r3, sp
   b5bfa:	4622      	mov	r2, r4
   b5bfc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5bfe:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5c00:	f7fe ff9e 	bl	b4b40 <netdb_getaddrinfo>
   b5c04:	4605      	mov	r5, r0
   b5c06:	2800      	cmp	r0, #0
   b5c08:	d163      	bne.n	b5cd2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b5c0a:	9b00      	ldr	r3, [sp, #0]
   b5c0c:	2b00      	cmp	r3, #0
   b5c0e:	d04b      	beq.n	b5ca8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5c10:	695b      	ldr	r3, [r3, #20]
   b5c12:	2b00      	cmp	r3, #0
   b5c14:	d048      	beq.n	b5ca8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5c16:	a806      	add	r0, sp, #24
   b5c18:	f7ff fcc6 	bl	b55a8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5c1c:	9b00      	ldr	r3, [sp, #0]
   b5c1e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5c20:	7863      	ldrb	r3, [r4, #1]
   b5c22:	2b02      	cmp	r3, #2
   b5c24:	d104      	bne.n	b5c30 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5c26:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5c28:	a806      	add	r0, sp, #24
   b5c2a:	f7ff ffbb 	bl	b5ba4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5c2e:	e026      	b.n	b5c7e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5c30:	2b0a      	cmp	r3, #10
   b5c32:	d124      	bne.n	b5c7e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5c34:	2211      	movs	r2, #17
   b5c36:	4629      	mov	r1, r5
   b5c38:	a801      	add	r0, sp, #4
   b5c3a:	f001 f835 	bl	b6ca8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5c3e:	68a3      	ldr	r3, [r4, #8]
   b5c40:	2b00      	cmp	r3, #0
   b5c42:	d038      	beq.n	b5cb6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5c44:	f104 0308 	add.w	r3, r4, #8
   b5c48:	f10d 0c04 	add.w	ip, sp, #4
   b5c4c:	3418      	adds	r4, #24
   b5c4e:	6818      	ldr	r0, [r3, #0]
   b5c50:	6859      	ldr	r1, [r3, #4]
   b5c52:	4662      	mov	r2, ip
   b5c54:	c203      	stmia	r2!, {r0, r1}
   b5c56:	3308      	adds	r3, #8
   b5c58:	42a3      	cmp	r3, r4
   b5c5a:	4694      	mov	ip, r2
   b5c5c:	d1f7      	bne.n	b5c4e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5c5e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5c60:	a901      	add	r1, sp, #4
   b5c62:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5c64:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5c68:	f7ff fcac 	bl	b55c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5c6c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5c70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c74:	ac07      	add	r4, sp, #28
   b5c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c78:	f8dc 3000 	ldr.w	r3, [ip]
   b5c7c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5c7e:	a806      	add	r0, sp, #24
   b5c80:	f7ff fcb2 	bl	b55e8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5c84:	b180      	cbz	r0, b5ca8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5c86:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5c88:	ad07      	add	r5, sp, #28
   b5c8a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5c8e:	4b12      	ldr	r3, [pc, #72]	; (b5cd8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5c90:	930c      	str	r3, [sp, #48]	; 0x30
   b5c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c94:	ac0d      	add	r4, sp, #52	; 0x34
   b5c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c98:	682b      	ldr	r3, [r5, #0]
   b5c9a:	7023      	strb	r3, [r4, #0]
   b5c9c:	463a      	mov	r2, r7
   b5c9e:	4643      	mov	r3, r8
   b5ca0:	a90c      	add	r1, sp, #48	; 0x30
   b5ca2:	4630      	mov	r0, r6
   b5ca4:	47c8      	blx	r9
   b5ca6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5ca8:	9800      	ldr	r0, [sp, #0]
   b5caa:	f7fe ff41 	bl	b4b30 <netdb_freeaddrinfo>
}
   b5cae:	4628      	mov	r0, r5
   b5cb0:	b013      	add	sp, #76	; 0x4c
   b5cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5cb6:	68e3      	ldr	r3, [r4, #12]
   b5cb8:	2b00      	cmp	r3, #0
   b5cba:	d1c3      	bne.n	b5c44 <_ZN9TCPClient7connectEPKctm+0x64>
   b5cbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5cc0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5cc4:	f7fe ff24 	bl	b4b10 <inet_htonl>
   b5cc8:	4581      	cmp	r9, r0
   b5cca:	d1bb      	bne.n	b5c44 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5ccc:	f104 0114 	add.w	r1, r4, #20
   b5cd0:	e7aa      	b.n	b5c28 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5cd2:	4625      	mov	r5, r4
   b5cd4:	e7e8      	b.n	b5ca8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5cd6:	bf00      	nop
   b5cd8:	000b6fbc 	.word	0x000b6fbc

000b5cdc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5cdc:	b538      	push	{r3, r4, r5, lr}
   b5cde:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5ce0:	681a      	ldr	r2, [r3, #0]
   b5ce2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5ce4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5ce6:	da10      	bge.n	b5d0a <_ZN9TCPClient9connectedEv+0x2e>
   b5ce8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5cec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5cf0:	429a      	cmp	r2, r3
   b5cf2:	d10a      	bne.n	b5d0a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5cf4:	6803      	ldr	r3, [r0, #0]
   b5cf6:	691b      	ldr	r3, [r3, #16]
   b5cf8:	4798      	blx	r3
        if (!rv) {
   b5cfa:	4604      	mov	r4, r0
   b5cfc:	b928      	cbnz	r0, b5d0a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5cfe:	682b      	ldr	r3, [r5, #0]
   b5d00:	4628      	mov	r0, r5
   b5d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d04:	4798      	blx	r3
        rv = available();
   b5d06:	4620      	mov	r0, r4
}
   b5d08:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b5d0a:	2001      	movs	r0, #1
   b5d0c:	e7fc      	b.n	b5d08 <_ZN9TCPClient9connectedEv+0x2c>

000b5d0e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5d0e:	b510      	push	{r4, lr}
   b5d10:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5d16:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5d1a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5d1c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d1e:	d005      	beq.n	b5d2c <_ZN9TCPClient4peekEv+0x1e>
   b5d20:	6963      	ldr	r3, [r4, #20]
   b5d22:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5d26:	4413      	add	r3, r2
   b5d28:	7918      	ldrb	r0, [r3, #4]
}
   b5d2a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5d2c:	6803      	ldr	r3, [r0, #0]
   b5d2e:	691b      	ldr	r3, [r3, #16]
   b5d30:	4798      	blx	r3
   b5d32:	2800      	cmp	r0, #0
   b5d34:	d1f4      	bne.n	b5d20 <_ZN9TCPClient4peekEv+0x12>
   b5d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5d3a:	e7f6      	b.n	b5d2a <_ZN9TCPClient4peekEv+0x1c>

000b5d3c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d3e:	6943      	ldr	r3, [r0, #20]
   b5d40:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5d42:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5d46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5d4a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5d4c:	4605      	mov	r5, r0
   b5d4e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5d50:	d016      	beq.n	b5d80 <_ZN9TCPClient4readEPhj+0x44>
   b5d52:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5d54:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5d58:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5d5c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5d5e:	42bc      	cmp	r4, r7
   b5d60:	bf28      	it	cs
   b5d62:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5d64:	3304      	adds	r3, #4
   b5d66:	4622      	mov	r2, r4
   b5d68:	4419      	add	r1, r3
   b5d6a:	4630      	mov	r0, r6
   b5d6c:	f000 ff8e 	bl	b6c8c <memcpy>
   b5d70:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5d72:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5d76:	4423      	add	r3, r4
   b5d78:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5d80:	6803      	ldr	r3, [r0, #0]
   b5d82:	691b      	ldr	r3, [r3, #16]
   b5d84:	4798      	blx	r3
   b5d86:	2800      	cmp	r0, #0
   b5d88:	d1e3      	bne.n	b5d52 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5d8a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5d8e:	e7f5      	b.n	b5d7c <_ZN9TCPClient4readEPhj+0x40>

000b5d90 <_ZN9TCPClient12flush_bufferEv>:
   b5d90:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5d92:	2300      	movs	r3, #0
   b5d94:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5d98:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5d9a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5d9e:	4770      	bx	lr

000b5da0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5da4:	461f      	mov	r7, r3
    stop();
   b5da6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5da8:	460c      	mov	r4, r1
    stop();
   b5daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5dac:	b08a      	sub	sp, #40	; 0x28
   b5dae:	4605      	mov	r5, r0
   b5db0:	4616      	mov	r6, r2
    stop();
   b5db2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5db4:	7d23      	ldrb	r3, [r4, #20]
   b5db6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5dba:	2b04      	cmp	r3, #4
   b5dbc:	bf0c      	ite	eq
   b5dbe:	2002      	moveq	r0, #2
   b5dc0:	200a      	movne	r0, #10
   b5dc2:	2206      	movs	r2, #6
   b5dc4:	2101      	movs	r1, #1
   b5dc6:	f7fe feeb 	bl	b4ba0 <sock_socket>
   b5dca:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5dce:	696b      	ldr	r3, [r5, #20]
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	2b00      	cmp	r3, #0
   b5dd4:	da08      	bge.n	b5de8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5dd6:	682b      	ldr	r3, [r5, #0]
   b5dd8:	4628      	mov	r0, r5
   b5dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5ddc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5dde:	4798      	blx	r3
}
   b5de0:	4620      	mov	r0, r4
   b5de2:	b00a      	add	sp, #40	; 0x28
   b5de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5de8:	4628      	mov	r0, r5
   b5dea:	f7ff ffd1 	bl	b5d90 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5dee:	b1b7      	cbz	r7, b5e1e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5df0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5df2:	a903      	add	r1, sp, #12
   b5df4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5df6:	9303      	str	r3, [sp, #12]
   b5df8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5dfc:	f7fe fe78 	bl	b4af0 <if_index_to_name>
   b5e00:	2800      	cmp	r0, #0
   b5e02:	d1e8      	bne.n	b5dd6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5e04:	6968      	ldr	r0, [r5, #20]
   b5e06:	2306      	movs	r3, #6
   b5e08:	9300      	str	r3, [sp, #0]
   b5e0a:	6800      	ldr	r0, [r0, #0]
   b5e0c:	ab03      	add	r3, sp, #12
   b5e0e:	f241 020b 	movw	r2, #4107	; 0x100b
   b5e12:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5e16:	f7fe fe9b 	bl	b4b50 <sock_setsockopt>
   b5e1a:	2800      	cmp	r0, #0
   b5e1c:	d1db      	bne.n	b5dd6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5e1e:	221c      	movs	r2, #28
   b5e20:	2100      	movs	r1, #0
   b5e22:	a803      	add	r0, sp, #12
   b5e24:	f000 ff40 	bl	b6ca8 <memset>
    if (ip.version() == 4) {
   b5e28:	7d23      	ldrb	r3, [r4, #20]
   b5e2a:	2b04      	cmp	r3, #4
   b5e2c:	d11d      	bne.n	b5e6a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5e2e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5e32:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5e34:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5e38:	f7fe fe72 	bl	b4b20 <inet_htons>
   b5e3c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5e40:	6860      	ldr	r0, [r4, #4]
   b5e42:	f7fe fe65 	bl	b4b10 <inet_htonl>
   b5e46:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5e48:	696b      	ldr	r3, [r5, #20]
   b5e4a:	221c      	movs	r2, #28
   b5e4c:	6818      	ldr	r0, [r3, #0]
   b5e4e:	a903      	add	r1, sp, #12
   b5e50:	f7fe fe8e 	bl	b4b70 <sock_connect>
   b5e54:	2800      	cmp	r0, #0
   b5e56:	d1be      	bne.n	b5dd6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5e58:	3404      	adds	r4, #4
   b5e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5e5c:	696d      	ldr	r5, [r5, #20]
   b5e5e:	358c      	adds	r5, #140	; 0x8c
   b5e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5e62:	6823      	ldr	r3, [r4, #0]
   b5e64:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5e66:	2401      	movs	r4, #1
   b5e68:	e7ba      	b.n	b5de0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5e6a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5e6e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5e70:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5e74:	f7fe fe54 	bl	b4b20 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e78:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5e7a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5e7e:	1d23      	adds	r3, r4, #4
   b5e80:	f104 0714 	add.w	r7, r4, #20
   b5e84:	6818      	ldr	r0, [r3, #0]
   b5e86:	6859      	ldr	r1, [r3, #4]
   b5e88:	4632      	mov	r2, r6
   b5e8a:	c203      	stmia	r2!, {r0, r1}
   b5e8c:	3308      	adds	r3, #8
   b5e8e:	42bb      	cmp	r3, r7
   b5e90:	4616      	mov	r6, r2
   b5e92:	d1f7      	bne.n	b5e84 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5e94:	e7d8      	b.n	b5e48 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5e98 <_ZN9TCPClient9availableEv>:
{
   b5e98:	b530      	push	{r4, r5, lr}
   b5e9a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5e9c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5ea0:	b08b      	sub	sp, #44	; 0x2c
   b5ea2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5ea4:	b12b      	cbz	r3, b5eb2 <_ZN9TCPClient9availableEv+0x1a>
   b5ea6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5eaa:	429a      	cmp	r2, r3
   b5eac:	d101      	bne.n	b5eb2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5eae:	f7ff ff6f 	bl	b5d90 <_ZN9TCPClient12flush_bufferEv>
   b5eb2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5eb4:	6808      	ldr	r0, [r1, #0]
   b5eb6:	2800      	cmp	r0, #0
   b5eb8:	db18      	blt.n	b5eec <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5eba:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5ebe:	2d7f      	cmp	r5, #127	; 0x7f
   b5ec0:	d814      	bhi.n	b5eec <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5ec2:	3104      	adds	r1, #4
   b5ec4:	2308      	movs	r3, #8
   b5ec6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5eca:	4429      	add	r1, r5
   b5ecc:	f7fe fe58 	bl	b4b80 <sock_recv>
            if (ret > 0) {
   b5ed0:	2800      	cmp	r0, #0
   b5ed2:	dd13      	ble.n	b5efc <_ZN9TCPClient9availableEv+0x64>
   b5ed4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5ed6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5eda:	b90a      	cbnz	r2, b5ee0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5edc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5ee0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5ee2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5ee6:	4410      	add	r0, r2
   b5ee8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5eec:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5eee:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5ef2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5ef6:	1ac0      	subs	r0, r0, r3
   b5ef8:	b00b      	add	sp, #44	; 0x2c
   b5efa:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5efc:	f7fe ffb4 	bl	b4e68 <__errno>
   b5f00:	6803      	ldr	r3, [r0, #0]
   b5f02:	2b0b      	cmp	r3, #11
   b5f04:	d0f2      	beq.n	b5eec <_ZN9TCPClient9availableEv+0x54>
   b5f06:	f7fe ffaf 	bl	b4e68 <__errno>
   b5f0a:	6803      	ldr	r3, [r0, #0]
   b5f0c:	2b0b      	cmp	r3, #11
   b5f0e:	d0ed      	beq.n	b5eec <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5f10:	2320      	movs	r3, #32
   b5f12:	2500      	movs	r5, #0
   b5f14:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5f18:	f7fe ffa6 	bl	b4e68 <__errno>
   b5f1c:	6803      	ldr	r3, [r0, #0]
   b5f1e:	9301      	str	r3, [sp, #4]
   b5f20:	4b08      	ldr	r3, [pc, #32]	; (b5f44 <_ZN9TCPClient9availableEv+0xac>)
   b5f22:	4909      	ldr	r1, [pc, #36]	; (b5f48 <_ZN9TCPClient9availableEv+0xb0>)
   b5f24:	9300      	str	r3, [sp, #0]
   b5f26:	aa02      	add	r2, sp, #8
   b5f28:	462b      	mov	r3, r5
   b5f2a:	2032      	movs	r0, #50	; 0x32
   b5f2c:	f7fe fec0 	bl	b4cb0 <log_message>
                    sock_close(d_->sock);
   b5f30:	6963      	ldr	r3, [r4, #20]
   b5f32:	6818      	ldr	r0, [r3, #0]
   b5f34:	f7fe fe14 	bl	b4b60 <sock_close>
   b5f38:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5f3e:	601a      	str	r2, [r3, #0]
   b5f40:	e7d4      	b.n	b5eec <_ZN9TCPClient9availableEv+0x54>
   b5f42:	bf00      	nop
   b5f44:	000b700f 	.word	0x000b700f
   b5f48:	000b7008 	.word	0x000b7008

000b5f4c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5f4c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5f4e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5f50:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5f52:	6818      	ldr	r0, [r3, #0]
   b5f54:	2800      	cmp	r0, #0
   b5f56:	db01      	blt.n	b5f5c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5f58:	f7fe fe02 	bl	b4b60 <sock_close>
   b5f5c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5f62:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5f64:	6960      	ldr	r0, [r4, #20]
   b5f66:	2211      	movs	r2, #17
   b5f68:	2100      	movs	r1, #0
   b5f6a:	308c      	adds	r0, #140	; 0x8c
   b5f6c:	f000 fe9c 	bl	b6ca8 <memset>
    flush_buffer();
   b5f70:	4620      	mov	r0, r4
}
   b5f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5f76:	f7ff bf0b 	b.w	b5d90 <_ZN9TCPClient12flush_bufferEv>

000b5f7a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5f7a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5f7c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5f7e:	4604      	mov	r4, r0
          total(0) {
   b5f80:	6001      	str	r1, [r0, #0]
   b5f82:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5f86:	3088      	adds	r0, #136	; 0x88
   b5f88:	f7ff fb0e 	bl	b55a8 <_ZN9IPAddressC1Ev>
}
   b5f8c:	4620      	mov	r0, r4
   b5f8e:	bd10      	pop	{r4, pc}

000b5f90 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5f92:	2300      	movs	r3, #0
   b5f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5f98:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5f9c:	4a0e      	ldr	r2, [pc, #56]	; (b5fd8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5f9e:	6103      	str	r3, [r0, #16]
   b5fa0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5fa2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5fa4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5fa6:	20ac      	movs	r0, #172	; 0xac
   b5fa8:	9101      	str	r1, [sp, #4]
   b5faa:	f7fe f872 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5fae:	1e05      	subs	r5, r0, #0
   b5fb0:	f105 060c 	add.w	r6, r5, #12
   b5fb4:	d008      	beq.n	b5fc8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5fb6:	2301      	movs	r3, #1
   b5fb8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5fbc:	4b07      	ldr	r3, [pc, #28]	; (b5fdc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5fbe:	9901      	ldr	r1, [sp, #4]
   b5fc0:	602b      	str	r3, [r5, #0]
   b5fc2:	4630      	mov	r0, r6
   b5fc4:	f7ff ffd9 	bl	b5f7a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5fc8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5fca:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5fce:	f7ff fedf 	bl	b5d90 <_ZN9TCPClient12flush_bufferEv>
}
   b5fd2:	b002      	add	sp, #8
   b5fd4:	bd70      	pop	{r4, r5, r6, pc}
   b5fd6:	bf00      	nop
   b5fd8:	000b7044 	.word	0x000b7044
   b5fdc:	000b7028 	.word	0x000b7028

000b5fe0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5fe0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5fe6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5fe8:	f7ff ffd2 	bl	b5f90 <_ZN9TCPClientC1Ei>
}
   b5fec:	4620      	mov	r0, r4
   b5fee:	bd10      	pop	{r4, pc}

000b5ff0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5ff0:	b510      	push	{r4, lr}
   b5ff2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5ff4:	6800      	ldr	r0, [r0, #0]
   b5ff6:	2800      	cmp	r0, #0
   b5ff8:	db01      	blt.n	b5ffe <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5ffa:	f7fe fdb1 	bl	b4b60 <sock_close>
    }
}
   b5ffe:	4620      	mov	r0, r4
   b6000:	bd10      	pop	{r4, pc}

000b6002 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6002:	300c      	adds	r0, #12
   b6004:	f7ff bff4 	b.w	b5ff0 <_ZN9TCPClient4DataD1Ev>

000b6008 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6008:	4b02      	ldr	r3, [pc, #8]	; (b6014 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b600a:	681a      	ldr	r2, [r3, #0]
   b600c:	4b02      	ldr	r3, [pc, #8]	; (b6018 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b600e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6010:	4770      	bx	lr
   b6012:	bf00      	nop
   b6014:	2003e590 	.word	0x2003e590
   b6018:	2003e6f4 	.word	0x2003e6f4

000b601c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b601c:	4770      	bx	lr

000b601e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b601e:	7441      	strb	r1, [r0, #17]
}
   b6020:	4770      	bx	lr

000b6022 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6022:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6024:	7c00      	ldrb	r0, [r0, #16]
   b6026:	f7fe fe03 	bl	b4c30 <hal_usart_available_data_for_write>
}
   b602a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b602e:	bd08      	pop	{r3, pc}

000b6030 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6030:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6032:	7c00      	ldrb	r0, [r0, #16]
   b6034:	f7fe fdd4 	bl	b4be0 <hal_usart_available>
}
   b6038:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b603c:	bd08      	pop	{r3, pc}

000b603e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b603e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6040:	7c00      	ldrb	r0, [r0, #16]
   b6042:	f7fe fddd 	bl	b4c00 <hal_usart_peek>
}
   b6046:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b604a:	bd08      	pop	{r3, pc}

000b604c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b604c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b604e:	7c00      	ldrb	r0, [r0, #16]
   b6050:	f7fe fdce 	bl	b4bf0 <hal_usart_read>
}
   b6054:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6058:	bd08      	pop	{r3, pc}

000b605a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b605a:	7c00      	ldrb	r0, [r0, #16]
   b605c:	f7fe bdd8 	b.w	b4c10 <hal_usart_flush>

000b6060 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6060:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6062:	7c45      	ldrb	r5, [r0, #17]
{
   b6064:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6066:	b12d      	cbz	r5, b6074 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6068:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b606a:	b003      	add	sp, #12
   b606c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6070:	f7fe bdae 	b.w	b4bd0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6074:	7c00      	ldrb	r0, [r0, #16]
   b6076:	9101      	str	r1, [sp, #4]
   b6078:	f7fe fdda 	bl	b4c30 <hal_usart_available_data_for_write>
   b607c:	2800      	cmp	r0, #0
   b607e:	9901      	ldr	r1, [sp, #4]
   b6080:	dcf2      	bgt.n	b6068 <_ZN11USARTSerial5writeEh+0x8>
}
   b6082:	4628      	mov	r0, r5
   b6084:	b003      	add	sp, #12
   b6086:	bd30      	pop	{r4, r5, pc}

000b6088 <_ZN11USARTSerialD0Ev>:
   b6088:	b510      	push	{r4, lr}
   b608a:	2114      	movs	r1, #20
   b608c:	4604      	mov	r4, r0
   b608e:	f7fe f806 	bl	b409e <_ZdlPvj>
   b6092:	4620      	mov	r0, r4
   b6094:	bd10      	pop	{r4, pc}
	...

000b6098 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6098:	b510      	push	{r4, lr}
   b609a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b609e:	4604      	mov	r4, r0
   b60a0:	4608      	mov	r0, r1
   b60a2:	4611      	mov	r1, r2
   b60a4:	2200      	movs	r2, #0
   b60a6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b60aa:	4b04      	ldr	r3, [pc, #16]	; (b60bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b60ac:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b60ae:	2301      	movs	r3, #1
  _serial = serial;
   b60b0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b60b2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b60b4:	f7fe fdc4 	bl	b4c40 <hal_usart_init_ex>
}
   b60b8:	4620      	mov	r0, r4
   b60ba:	bd10      	pop	{r4, pc}
   b60bc:	000b70ac 	.word	0x000b70ac

000b60c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b60c0:	7441      	strb	r1, [r0, #17]
}
   b60c2:	4770      	bx	lr

000b60c4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b60c4:	4770      	bx	lr

000b60c6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b60c6:	4770      	bx	lr

000b60c8 <_ZN9USBSerial4readEv>:
{
   b60c8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b60ca:	2100      	movs	r1, #0
   b60cc:	7c00      	ldrb	r0, [r0, #16]
   b60ce:	f7fe fdd7 	bl	b4c80 <HAL_USB_USART_Receive_Data>
}
   b60d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b60d6:	bd08      	pop	{r3, pc}

000b60d8 <_ZN9USBSerial4peekEv>:
{
   b60d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b60da:	2101      	movs	r1, #1
   b60dc:	7c00      	ldrb	r0, [r0, #16]
   b60de:	f7fe fdcf 	bl	b4c80 <HAL_USB_USART_Receive_Data>
}
   b60e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b60e6:	bd08      	pop	{r3, pc}

000b60e8 <_ZN9USBSerial17availableForWriteEv>:
{
   b60e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b60ea:	7c00      	ldrb	r0, [r0, #16]
   b60ec:	f7fe fdc0 	bl	b4c70 <HAL_USB_USART_Available_Data_For_Write>
}
   b60f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b60f4:	bd08      	pop	{r3, pc}

000b60f6 <_ZN9USBSerial9availableEv>:
{
   b60f6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b60f8:	7c00      	ldrb	r0, [r0, #16]
   b60fa:	f7fe fdb1 	bl	b4c60 <HAL_USB_USART_Available_Data>
}
   b60fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6102:	bd08      	pop	{r3, pc}

000b6104 <_ZN9USBSerial5writeEh>:
{
   b6104:	b513      	push	{r0, r1, r4, lr}
   b6106:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6108:	7c00      	ldrb	r0, [r0, #16]
{
   b610a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b610c:	f7fe fdb0 	bl	b4c70 <HAL_USB_USART_Available_Data_For_Write>
   b6110:	2800      	cmp	r0, #0
   b6112:	9901      	ldr	r1, [sp, #4]
   b6114:	dc01      	bgt.n	b611a <_ZN9USBSerial5writeEh+0x16>
   b6116:	7c60      	ldrb	r0, [r4, #17]
   b6118:	b120      	cbz	r0, b6124 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b611a:	7c20      	ldrb	r0, [r4, #16]
   b611c:	f7fe fdb8 	bl	b4c90 <HAL_USB_USART_Send_Data>
   b6120:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6124:	b002      	add	sp, #8
   b6126:	bd10      	pop	{r4, pc}

000b6128 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6128:	7c00      	ldrb	r0, [r0, #16]
   b612a:	f7fe bdb9 	b.w	b4ca0 <HAL_USB_USART_Flush_Data>

000b612e <_ZN9USBSerialD0Ev>:
   b612e:	b510      	push	{r4, lr}
   b6130:	2114      	movs	r1, #20
   b6132:	4604      	mov	r4, r0
   b6134:	f7fd ffb3 	bl	b409e <_ZdlPvj>
   b6138:	4620      	mov	r0, r4
   b613a:	bd10      	pop	{r4, pc}

000b613c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b613c:	b510      	push	{r4, lr}
   b613e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6142:	4604      	mov	r4, r0
   b6144:	4608      	mov	r0, r1
   b6146:	2100      	movs	r1, #0
   b6148:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b614c:	4b04      	ldr	r3, [pc, #16]	; (b6160 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b614e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6150:	2301      	movs	r3, #1
  _serial = serial;
   b6152:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6154:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6156:	4611      	mov	r1, r2
   b6158:	f7fe fd7a 	bl	b4c50 <HAL_USB_USART_Init>
}
   b615c:	4620      	mov	r0, r4
   b615e:	bd10      	pop	{r4, pc}
   b6160:	000b70dc 	.word	0x000b70dc

000b6164 <_Z19acquireSerialBufferv>:
{
   b6164:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6166:	2214      	movs	r2, #20
{
   b6168:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b616a:	2100      	movs	r1, #0
   b616c:	f000 fd9c 	bl	b6ca8 <memset>
}
   b6170:	4620      	mov	r0, r4
   b6172:	bd10      	pop	{r4, pc}

000b6174 <_Z16_fetch_usbserialv>:
{
   b6174:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6176:	4c0f      	ldr	r4, [pc, #60]	; (b61b4 <_Z16_fetch_usbserialv+0x40>)
{
   b6178:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b617a:	a803      	add	r0, sp, #12
   b617c:	f7ff fff2 	bl	b6164 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6180:	7821      	ldrb	r1, [r4, #0]
   b6182:	f3bf 8f5b 	dmb	ish
   b6186:	f011 0101 	ands.w	r1, r1, #1
   b618a:	d10f      	bne.n	b61ac <_Z16_fetch_usbserialv+0x38>
   b618c:	4620      	mov	r0, r4
   b618e:	9101      	str	r1, [sp, #4]
   b6190:	f7fd ff87 	bl	b40a2 <__cxa_guard_acquire>
   b6194:	9901      	ldr	r1, [sp, #4]
   b6196:	b148      	cbz	r0, b61ac <_Z16_fetch_usbserialv+0x38>
   b6198:	aa03      	add	r2, sp, #12
   b619a:	4807      	ldr	r0, [pc, #28]	; (b61b8 <_Z16_fetch_usbserialv+0x44>)
   b619c:	f7ff ffce 	bl	b613c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b61a0:	4620      	mov	r0, r4
   b61a2:	f7fd ff83 	bl	b40ac <__cxa_guard_release>
   b61a6:	4805      	ldr	r0, [pc, #20]	; (b61bc <_Z16_fetch_usbserialv+0x48>)
   b61a8:	f000 fd6a 	bl	b6c80 <atexit>
	return _usbserial;
}
   b61ac:	4802      	ldr	r0, [pc, #8]	; (b61b8 <_Z16_fetch_usbserialv+0x44>)
   b61ae:	b008      	add	sp, #32
   b61b0:	bd10      	pop	{r4, pc}
   b61b2:	bf00      	nop
   b61b4:	2003e6f8 	.word	0x2003e6f8
   b61b8:	2003e6fc 	.word	0x2003e6fc
   b61bc:	000b60c5 	.word	0x000b60c5

000b61c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b61c0:	2200      	movs	r2, #0
   b61c2:	6840      	ldr	r0, [r0, #4]
   b61c4:	4611      	mov	r1, r2
   b61c6:	f7fe bddf 	b.w	b4d88 <network_ready>

000b61ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b61ca:	2200      	movs	r2, #0
   b61cc:	6840      	ldr	r0, [r0, #4]
   b61ce:	4611      	mov	r1, r2
   b61d0:	f7fe bdfa 	b.w	b4dc8 <network_listening>

000b61d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b61d4:	2200      	movs	r2, #0
   b61d6:	6840      	ldr	r0, [r0, #4]
   b61d8:	4611      	mov	r1, r2
   b61da:	f7fe be05 	b.w	b4de8 <network_get_listen_timeout>

000b61de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b61de:	6840      	ldr	r0, [r0, #4]
   b61e0:	2200      	movs	r2, #0
   b61e2:	f7fe bdf9 	b.w	b4dd8 <network_set_listen_timeout>

000b61e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b61e6:	6840      	ldr	r0, [r0, #4]
   b61e8:	2200      	movs	r2, #0
   b61ea:	f081 0101 	eor.w	r1, r1, #1
   b61ee:	f7fe bde3 	b.w	b4db8 <network_listen>

000b61f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b61f2:	2300      	movs	r3, #0
   b61f4:	6840      	ldr	r0, [r0, #4]
   b61f6:	461a      	mov	r2, r3
   b61f8:	4619      	mov	r1, r3
   b61fa:	f7fe bdd5 	b.w	b4da8 <network_off>

000b61fe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b61fe:	2300      	movs	r3, #0
   b6200:	6840      	ldr	r0, [r0, #4]
   b6202:	461a      	mov	r2, r3
   b6204:	4619      	mov	r1, r3
   b6206:	f7fe bdc7 	b.w	b4d98 <network_on>

000b620a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b620a:	2200      	movs	r2, #0
   b620c:	6840      	ldr	r0, [r0, #4]
   b620e:	4611      	mov	r1, r2
   b6210:	f7fe bdaa 	b.w	b4d68 <network_connecting>

000b6214 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6214:	6840      	ldr	r0, [r0, #4]
   b6216:	2200      	movs	r2, #0
   b6218:	2102      	movs	r1, #2
   b621a:	f7fe bdad 	b.w	b4d78 <network_disconnect>

000b621e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b621e:	2300      	movs	r3, #0
   b6220:	6840      	ldr	r0, [r0, #4]
   b6222:	461a      	mov	r2, r3
   b6224:	f7fe bd98 	b.w	b4d58 <network_connect>

000b6228 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6228:	4b02      	ldr	r3, [pc, #8]	; (b6234 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b622a:	2204      	movs	r2, #4
   b622c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b622e:	4a02      	ldr	r2, [pc, #8]	; (b6238 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6230:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6232:	4770      	bx	lr
   b6234:	2003e710 	.word	0x2003e710
   b6238:	000b710c 	.word	0x000b710c

000b623c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b623c:	b510      	push	{r4, lr}
   b623e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6240:	f000 fd97 	bl	b6d72 <strlen>
   b6244:	3801      	subs	r0, #1
   b6246:	1823      	adds	r3, r4, r0
   b6248:	4620      	mov	r0, r4
	while(i<j){
   b624a:	4283      	cmp	r3, r0
   b624c:	d906      	bls.n	b625c <_Z11str_reversePc+0x20>
		c = *i;
   b624e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6250:	7819      	ldrb	r1, [r3, #0]
   b6252:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6256:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b625a:	e7f6      	b.n	b624a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b625c:	bd10      	pop	{r4, pc}

000b625e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b625e:	b570      	push	{r4, r5, r6, lr}
   b6260:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b6262:	1e91      	subs	r1, r2, #2
   b6264:	2922      	cmp	r1, #34	; 0x22
   b6266:	d81d      	bhi.n	b62a4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6268:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b626a:	b930      	cbnz	r0, b627a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b626c:	4423      	add	r3, r4
            *ptr++ = '0';
   b626e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6270:	429d      	cmp	r5, r3
   b6272:	d210      	bcs.n	b6296 <ultoa+0x38>
            *ptr++ = '0';
   b6274:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6278:	e7fa      	b.n	b6270 <ultoa+0x12>
            result.quot = a/radix;
   b627a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b627e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6282:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6284:	2809      	cmp	r0, #9
                *ptr += '0';
   b6286:	bf94      	ite	ls
   b6288:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b628a:	3157      	addhi	r1, #87	; 0x57
   b628c:	b2c9      	uxtb	r1, r1
   b628e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6292:	4630      	mov	r0, r6
	while(a){
   b6294:	e7e9      	b.n	b626a <ultoa+0xc>

	*ptr = '\0';
   b6296:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6298:	4620      	mov	r0, r4
	*ptr = '\0';
   b629a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b629c:	f7ff ffce 	bl	b623c <_Z11str_reversePc>
	return buffer;
   b62a0:	4620      	mov	r0, r4
}
   b62a2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b62a4:	2000      	movs	r0, #0
   b62a6:	e7fc      	b.n	b62a2 <ultoa+0x44>

000b62a8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b62a8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b62aa:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b62ac:	460c      	mov	r4, r1
   b62ae:	4615      	mov	r5, r2
	if(a<0){
   b62b0:	da0e      	bge.n	b62d0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b62b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b62b6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b62ba:	bf14      	ite	ne
   b62bc:	4258      	negne	r0, r3
   b62be:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b62c0:	2301      	movs	r3, #1
		*buffer = '-';
   b62c2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b62c4:	462a      	mov	r2, r5
   b62c6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b62c8:	f7ff ffc9 	bl	b625e <ultoa>
	}
	return buffer;
}
   b62cc:	4620      	mov	r0, r4
   b62ce:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b62d0:	2301      	movs	r3, #1
   b62d2:	e7f9      	b.n	b62c8 <itoa+0x20>

000b62d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b62d4:	4b01      	ldr	r3, [pc, #4]	; (b62dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b62d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b62d8:	4770      	bx	lr
   b62da:	bf00      	nop
   b62dc:	2003e594 	.word	0x2003e594

000b62e0 <serialEventRun>:
{
   b62e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b62e2:	4b0b      	ldr	r3, [pc, #44]	; (b6310 <serialEventRun+0x30>)
   b62e4:	b143      	cbz	r3, b62f8 <serialEventRun+0x18>
   b62e6:	f7ff ff45 	bl	b6174 <_Z16_fetch_usbserialv>
   b62ea:	6803      	ldr	r3, [r0, #0]
   b62ec:	691b      	ldr	r3, [r3, #16]
   b62ee:	4798      	blx	r3
   b62f0:	2800      	cmp	r0, #0
   b62f2:	dd01      	ble.n	b62f8 <serialEventRun+0x18>
        serialEvent();
   b62f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b62f8:	4b06      	ldr	r3, [pc, #24]	; (b6314 <serialEventRun+0x34>)
   b62fa:	b143      	cbz	r3, b630e <serialEventRun+0x2e>
   b62fc:	f000 f940 	bl	b6580 <_Z22__fetch_global_Serial1v>
   b6300:	6803      	ldr	r3, [r0, #0]
   b6302:	691b      	ldr	r3, [r3, #16]
   b6304:	4798      	blx	r3
   b6306:	2800      	cmp	r0, #0
   b6308:	dd01      	ble.n	b630e <serialEventRun+0x2e>
        serialEvent1();
   b630a:	f3af 8000 	nop.w
}
   b630e:	bd08      	pop	{r3, pc}
	...

000b6318 <_post_loop>:
{
   b6318:	b508      	push	{r3, lr}
	serialEventRun();
   b631a:	f7ff ffe1 	bl	b62e0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b631e:	f7fe fb8f 	bl	b4a40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6322:	4b01      	ldr	r3, [pc, #4]	; (b6328 <_post_loop+0x10>)
   b6324:	6018      	str	r0, [r3, #0]
}
   b6326:	bd08      	pop	{r3, pc}
   b6328:	2003e72c 	.word	0x2003e72c

000b632c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b632c:	4805      	ldr	r0, [pc, #20]	; (b6344 <_Z33system_initialize_user_backup_ramv+0x18>)
   b632e:	4a06      	ldr	r2, [pc, #24]	; (b6348 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6330:	4906      	ldr	r1, [pc, #24]	; (b634c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6332:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6334:	1a12      	subs	r2, r2, r0
   b6336:	f000 fca9 	bl	b6c8c <memcpy>
    __backup_sram_signature = signature;
   b633a:	4b05      	ldr	r3, [pc, #20]	; (b6350 <_Z33system_initialize_user_backup_ramv+0x24>)
   b633c:	4a05      	ldr	r2, [pc, #20]	; (b6354 <_Z33system_initialize_user_backup_ramv+0x28>)
   b633e:	601a      	str	r2, [r3, #0]
}
   b6340:	bd08      	pop	{r3, pc}
   b6342:	bf00      	nop
   b6344:	2003f400 	.word	0x2003f400
   b6348:	2003f404 	.word	0x2003f404
   b634c:	000b72f4 	.word	0x000b72f4
   b6350:	2003f400 	.word	0x2003f400
   b6354:	9a271c1e 	.word	0x9a271c1e

000b6358 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6358:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b635a:	2300      	movs	r3, #0
   b635c:	9300      	str	r3, [sp, #0]
   b635e:	461a      	mov	r2, r3
   b6360:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6364:	f7fe fcd6 	bl	b4d14 <system_ctrl_set_result>
}
   b6368:	b003      	add	sp, #12
   b636a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6370 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6370:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6372:	8843      	ldrh	r3, [r0, #2]
   b6374:	2b0a      	cmp	r3, #10
   b6376:	d008      	beq.n	b638a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6378:	2b50      	cmp	r3, #80	; 0x50
   b637a:	d10b      	bne.n	b6394 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b637c:	4b09      	ldr	r3, [pc, #36]	; (b63a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b637e:	681b      	ldr	r3, [r3, #0]
   b6380:	b14b      	cbz	r3, b6396 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6382:	b003      	add	sp, #12
   b6384:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6388:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b638a:	f7ff ffe5 	bl	b6358 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b638e:	b003      	add	sp, #12
   b6390:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6394:	2300      	movs	r3, #0
   b6396:	9300      	str	r3, [sp, #0]
   b6398:	461a      	mov	r2, r3
   b639a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b639e:	f7fe fcb9 	bl	b4d14 <system_ctrl_set_result>
}
   b63a2:	e7f4      	b.n	b638e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b63a4:	2003e71c 	.word	0x2003e71c

000b63a8 <module_user_init_hook>:
{
   b63a8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b63aa:	4812      	ldr	r0, [pc, #72]	; (b63f4 <module_user_init_hook+0x4c>)
   b63ac:	2100      	movs	r1, #0
   b63ae:	f7fe fd6b 	bl	b4e88 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b63b2:	4b11      	ldr	r3, [pc, #68]	; (b63f8 <module_user_init_hook+0x50>)
   b63b4:	681a      	ldr	r2, [r3, #0]
   b63b6:	4b11      	ldr	r3, [pc, #68]	; (b63fc <module_user_init_hook+0x54>)
   b63b8:	429a      	cmp	r2, r3
   b63ba:	4b11      	ldr	r3, [pc, #68]	; (b6400 <module_user_init_hook+0x58>)
   b63bc:	bf0c      	ite	eq
   b63be:	2201      	moveq	r2, #1
   b63c0:	2200      	movne	r2, #0
   b63c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b63c4:	d001      	beq.n	b63ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b63c6:	f7ff ffb1 	bl	b632c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b63ca:	f7fe fb31 	bl	b4a30 <HAL_RNG_GetRandomNumber>
   b63ce:	4604      	mov	r4, r0
    srand(seed);
   b63d0:	f000 fc72 	bl	b6cb8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b63d4:	4b0b      	ldr	r3, [pc, #44]	; (b6404 <module_user_init_hook+0x5c>)
   b63d6:	b113      	cbz	r3, b63de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b63d8:	4620      	mov	r0, r4
   b63da:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b63de:	2100      	movs	r1, #0
   b63e0:	4808      	ldr	r0, [pc, #32]	; (b6404 <module_user_init_hook+0x5c>)
   b63e2:	f7fe fcb1 	bl	b4d48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b63e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b63ea:	4807      	ldr	r0, [pc, #28]	; (b6408 <module_user_init_hook+0x60>)
   b63ec:	2100      	movs	r1, #0
   b63ee:	f7fe bc87 	b.w	b4d00 <system_ctrl_set_app_request_handler>
   b63f2:	bf00      	nop
   b63f4:	000b62d5 	.word	0x000b62d5
   b63f8:	2003f400 	.word	0x2003f400
   b63fc:	9a271c1e 	.word	0x9a271c1e
   b6400:	2003e718 	.word	0x2003e718
   b6404:	00000000 	.word	0x00000000
   b6408:	000b6371 	.word	0x000b6371

000b640c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b640c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b640e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6410:	d902      	bls.n	b6418 <pinAvailable+0xc>
    return false;
   b6412:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6414:	b002      	add	sp, #8
   b6416:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6418:	f1a0 030b 	sub.w	r3, r0, #11
   b641c:	2b02      	cmp	r3, #2
   b641e:	d81a      	bhi.n	b6456 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6420:	4c17      	ldr	r4, [pc, #92]	; (b6480 <pinAvailable+0x74>)
   b6422:	7821      	ldrb	r1, [r4, #0]
   b6424:	f3bf 8f5b 	dmb	ish
   b6428:	f011 0101 	ands.w	r1, r1, #1
   b642c:	d10b      	bne.n	b6446 <pinAvailable+0x3a>
   b642e:	4620      	mov	r0, r4
   b6430:	9101      	str	r1, [sp, #4]
   b6432:	f7fd fe36 	bl	b40a2 <__cxa_guard_acquire>
   b6436:	9901      	ldr	r1, [sp, #4]
   b6438:	b128      	cbz	r0, b6446 <pinAvailable+0x3a>
   b643a:	4812      	ldr	r0, [pc, #72]	; (b6484 <pinAvailable+0x78>)
   b643c:	f7ff fa12 	bl	b5864 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6440:	4620      	mov	r0, r4
   b6442:	f7fd fe33 	bl	b40ac <__cxa_guard_release>
   b6446:	4b0f      	ldr	r3, [pc, #60]	; (b6484 <pinAvailable+0x78>)
   b6448:	7818      	ldrb	r0, [r3, #0]
   b644a:	f7fe fbb9 	bl	b4bc0 <hal_spi_is_enabled>
   b644e:	2800      	cmp	r0, #0
   b6450:	d1df      	bne.n	b6412 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6452:	2001      	movs	r0, #1
   b6454:	e7de      	b.n	b6414 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6456:	2801      	cmp	r0, #1
   b6458:	d809      	bhi.n	b646e <pinAvailable+0x62>
   b645a:	f000 f851 	bl	b6500 <_Z19__fetch_global_Wirev>
   b645e:	2100      	movs	r1, #0
   b6460:	7c00      	ldrb	r0, [r0, #16]
   b6462:	f7fe fb35 	bl	b4ad0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6466:	f080 0001 	eor.w	r0, r0, #1
   b646a:	b2c0      	uxtb	r0, r0
   b646c:	e7d2      	b.n	b6414 <pinAvailable+0x8>
   b646e:	3809      	subs	r0, #9
   b6470:	2801      	cmp	r0, #1
   b6472:	d8ee      	bhi.n	b6452 <pinAvailable+0x46>
   b6474:	f000 f884 	bl	b6580 <_Z22__fetch_global_Serial1v>
   b6478:	7c00      	ldrb	r0, [r0, #16]
   b647a:	f7fe fbd1 	bl	b4c20 <hal_usart_is_enabled>
   b647e:	e7f2      	b.n	b6466 <pinAvailable+0x5a>
   b6480:	2003e720 	.word	0x2003e720
   b6484:	2003e724 	.word	0x2003e724

000b6488 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6488:	2823      	cmp	r0, #35	; 0x23
{
   b648a:	b538      	push	{r3, r4, r5, lr}
   b648c:	4604      	mov	r4, r0
   b648e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6490:	d80a      	bhi.n	b64a8 <pinMode+0x20>
   b6492:	29ff      	cmp	r1, #255	; 0xff
   b6494:	d008      	beq.n	b64a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6496:	f7ff ffb9 	bl	b640c <pinAvailable>
   b649a:	b128      	cbz	r0, b64a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b649c:	4629      	mov	r1, r5
   b649e:	4620      	mov	r0, r4
}
   b64a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b64a4:	f7fe bad4 	b.w	b4a50 <HAL_Pin_Mode>
}
   b64a8:	bd38      	pop	{r3, r4, r5, pc}

000b64aa <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b64aa:	b510      	push	{r4, lr}
   b64ac:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b64ae:	f7fe fad7 	bl	b4a60 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b64b2:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b64b4:	b2db      	uxtb	r3, r3
   b64b6:	2b01      	cmp	r3, #1
   b64b8:	d908      	bls.n	b64cc <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b64ba:	4620      	mov	r0, r4
   b64bc:	f7ff ffa6 	bl	b640c <pinAvailable>
   b64c0:	b120      	cbz	r0, b64cc <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b64c2:	4620      	mov	r0, r4
}
   b64c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b64c8:	f7fe bad2 	b.w	b4a70 <HAL_GPIO_Read>
}
   b64cc:	2000      	movs	r0, #0
   b64ce:	bd10      	pop	{r4, pc}

000b64d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b64d0:	4770      	bx	lr
	...

000b64d4 <_Z17acquireWireBufferv>:
{
   b64d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b64d6:	2520      	movs	r5, #32
   b64d8:	2314      	movs	r3, #20
{
   b64da:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b64dc:	6003      	str	r3, [r0, #0]
   b64de:	6085      	str	r5, [r0, #8]
   b64e0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b64e2:	4906      	ldr	r1, [pc, #24]	; (b64fc <_Z17acquireWireBufferv+0x28>)
   b64e4:	4628      	mov	r0, r5
   b64e6:	f000 f86f 	bl	b65c8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b64ea:	4904      	ldr	r1, [pc, #16]	; (b64fc <_Z17acquireWireBufferv+0x28>)
	};
   b64ec:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b64ee:	4628      	mov	r0, r5
   b64f0:	f000 f86a 	bl	b65c8 <_ZnajRKSt9nothrow_t>
	};
   b64f4:	60e0      	str	r0, [r4, #12]
}
   b64f6:	4620      	mov	r0, r4
   b64f8:	bd38      	pop	{r3, r4, r5, pc}
   b64fa:	bf00      	nop
   b64fc:	000b7140 	.word	0x000b7140

000b6500 <_Z19__fetch_global_Wirev>:
{
   b6500:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6502:	4d0e      	ldr	r5, [pc, #56]	; (b653c <_Z19__fetch_global_Wirev+0x3c>)
   b6504:	7829      	ldrb	r1, [r5, #0]
   b6506:	f3bf 8f5b 	dmb	ish
   b650a:	f011 0401 	ands.w	r4, r1, #1
{
   b650e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6510:	d111      	bne.n	b6536 <_Z19__fetch_global_Wirev+0x36>
   b6512:	4628      	mov	r0, r5
   b6514:	f7fd fdc5 	bl	b40a2 <__cxa_guard_acquire>
   b6518:	b168      	cbz	r0, b6536 <_Z19__fetch_global_Wirev+0x36>
   b651a:	a801      	add	r0, sp, #4
   b651c:	f7ff ffda 	bl	b64d4 <_Z17acquireWireBufferv>
   b6520:	aa01      	add	r2, sp, #4
   b6522:	4621      	mov	r1, r4
   b6524:	4806      	ldr	r0, [pc, #24]	; (b6540 <_Z19__fetch_global_Wirev+0x40>)
   b6526:	f7fe fff3 	bl	b5510 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b652a:	4628      	mov	r0, r5
   b652c:	f7fd fdbe 	bl	b40ac <__cxa_guard_release>
   b6530:	4804      	ldr	r0, [pc, #16]	; (b6544 <_Z19__fetch_global_Wirev+0x44>)
   b6532:	f000 fba5 	bl	b6c80 <atexit>
	return wire;
}
   b6536:	4802      	ldr	r0, [pc, #8]	; (b6540 <_Z19__fetch_global_Wirev+0x40>)
   b6538:	b007      	add	sp, #28
   b653a:	bd30      	pop	{r4, r5, pc}
   b653c:	2003e730 	.word	0x2003e730
   b6540:	2003e734 	.word	0x2003e734
   b6544:	000b64d1 	.word	0x000b64d1

000b6548 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6548:	4770      	bx	lr
	...

000b654c <_Z20acquireSerial1Bufferv>:
{
   b654c:	b538      	push	{r3, r4, r5, lr}
   b654e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6550:	2514      	movs	r5, #20
   b6552:	462a      	mov	r2, r5
   b6554:	2100      	movs	r1, #0
   b6556:	f000 fba7 	bl	b6ca8 <memset>
   b655a:	8025      	strh	r5, [r4, #0]
   b655c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b655e:	4907      	ldr	r1, [pc, #28]	; (b657c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6560:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6562:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6564:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6566:	f000 f82f 	bl	b65c8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b656a:	4904      	ldr	r1, [pc, #16]	; (b657c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b656c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b656e:	4628      	mov	r0, r5
   b6570:	f000 f82a 	bl	b65c8 <_ZnajRKSt9nothrow_t>
    };
   b6574:	60e0      	str	r0, [r4, #12]
}
   b6576:	4620      	mov	r0, r4
   b6578:	bd38      	pop	{r3, r4, r5, pc}
   b657a:	bf00      	nop
   b657c:	000b7140 	.word	0x000b7140

000b6580 <_Z22__fetch_global_Serial1v>:
{
   b6580:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6582:	4d0e      	ldr	r5, [pc, #56]	; (b65bc <_Z22__fetch_global_Serial1v+0x3c>)
   b6584:	7829      	ldrb	r1, [r5, #0]
   b6586:	f3bf 8f5b 	dmb	ish
   b658a:	f011 0401 	ands.w	r4, r1, #1
{
   b658e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6590:	d111      	bne.n	b65b6 <_Z22__fetch_global_Serial1v+0x36>
   b6592:	4628      	mov	r0, r5
   b6594:	f7fd fd85 	bl	b40a2 <__cxa_guard_acquire>
   b6598:	b168      	cbz	r0, b65b6 <_Z22__fetch_global_Serial1v+0x36>
   b659a:	a801      	add	r0, sp, #4
   b659c:	f7ff ffd6 	bl	b654c <_Z20acquireSerial1Bufferv>
   b65a0:	aa01      	add	r2, sp, #4
   b65a2:	4621      	mov	r1, r4
   b65a4:	4806      	ldr	r0, [pc, #24]	; (b65c0 <_Z22__fetch_global_Serial1v+0x40>)
   b65a6:	f7ff fd77 	bl	b6098 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b65aa:	4628      	mov	r0, r5
   b65ac:	f7fd fd7e 	bl	b40ac <__cxa_guard_release>
   b65b0:	4804      	ldr	r0, [pc, #16]	; (b65c4 <_Z22__fetch_global_Serial1v+0x44>)
   b65b2:	f000 fb65 	bl	b6c80 <atexit>
    return serial1;
}
   b65b6:	4802      	ldr	r0, [pc, #8]	; (b65c0 <_Z22__fetch_global_Serial1v+0x40>)
   b65b8:	b007      	add	sp, #28
   b65ba:	bd30      	pop	{r4, r5, pc}
   b65bc:	2003e748 	.word	0x2003e748
   b65c0:	2003e74c 	.word	0x2003e74c
   b65c4:	000b6549 	.word	0x000b6549

000b65c8 <_ZnajRKSt9nothrow_t>:
   b65c8:	f7fd bd65 	b.w	b4096 <_Znaj>

000b65cc <_ZSt25__throw_bad_function_callv>:
   b65cc:	b508      	push	{r3, lr}
   b65ce:	f7fe fc3b 	bl	b4e48 <abort>
	...

000b65d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b65d4:	4901      	ldr	r1, [pc, #4]	; (b65dc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b65d6:	f000 b8f9 	b.w	b67cc <_ZNKSt9type_infoeqERKS_>
   b65da:	bf00      	nop
   b65dc:	000b715c 	.word	0x000b715c

000b65e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b65e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b65e2:	2400      	movs	r4, #0
   b65e4:	2310      	movs	r3, #16
   b65e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b65ea:	6803      	ldr	r3, [r0, #0]
   b65ec:	4615      	mov	r5, r2
   b65ee:	699e      	ldr	r6, [r3, #24]
   b65f0:	6812      	ldr	r2, [r2, #0]
   b65f2:	466b      	mov	r3, sp
   b65f4:	e9cd 4400 	strd	r4, r4, [sp]
   b65f8:	47b0      	blx	r6
   b65fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b65fe:	f003 0306 	and.w	r3, r3, #6
   b6602:	2b06      	cmp	r3, #6
   b6604:	bf03      	ittte	eq
   b6606:	9b00      	ldreq	r3, [sp, #0]
   b6608:	602b      	streq	r3, [r5, #0]
   b660a:	2001      	moveq	r0, #1
   b660c:	4620      	movne	r0, r4
   b660e:	b004      	add	sp, #16
   b6610:	bd70      	pop	{r4, r5, r6, pc}

000b6612 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6612:	9800      	ldr	r0, [sp, #0]
   b6614:	4290      	cmp	r0, r2
   b6616:	bf14      	ite	ne
   b6618:	2001      	movne	r0, #1
   b661a:	2006      	moveq	r0, #6
   b661c:	4770      	bx	lr
	...

000b6620 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6620:	b510      	push	{r4, lr}
   b6622:	4b03      	ldr	r3, [pc, #12]	; (b6630 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6624:	6003      	str	r3, [r0, #0]
   b6626:	4604      	mov	r4, r0
   b6628:	f000 f8cd 	bl	b67c6 <_ZNSt9type_infoD1Ev>
   b662c:	4620      	mov	r0, r4
   b662e:	bd10      	pop	{r4, pc}
   b6630:	000b719c 	.word	0x000b719c

000b6634 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6634:	b510      	push	{r4, lr}
   b6636:	4604      	mov	r4, r0
   b6638:	f7ff fff2 	bl	b6620 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b663c:	4620      	mov	r0, r4
   b663e:	2108      	movs	r1, #8
   b6640:	f7fd fd2d 	bl	b409e <_ZdlPvj>
   b6644:	4620      	mov	r0, r4
   b6646:	bd10      	pop	{r4, pc}

000b6648 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b664c:	461f      	mov	r7, r3
   b664e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6652:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6656:	4598      	cmp	r8, r3
   b6658:	4606      	mov	r6, r0
   b665a:	4615      	mov	r5, r2
   b665c:	d107      	bne.n	b666e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b665e:	9907      	ldr	r1, [sp, #28]
   b6660:	f000 f8b4 	bl	b67cc <_ZNKSt9type_infoeqERKS_>
   b6664:	b118      	cbz	r0, b666e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6666:	7165      	strb	r5, [r4, #5]
   b6668:	2000      	movs	r0, #0
   b666a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b666e:	4639      	mov	r1, r7
   b6670:	4630      	mov	r0, r6
   b6672:	f000 f8ab 	bl	b67cc <_ZNKSt9type_infoeqERKS_>
   b6676:	2800      	cmp	r0, #0
   b6678:	d0f6      	beq.n	b6668 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b667a:	2301      	movs	r3, #1
   b667c:	f8c4 8000 	str.w	r8, [r4]
   b6680:	7125      	strb	r5, [r4, #4]
   b6682:	71a3      	strb	r3, [r4, #6]
   b6684:	e7f0      	b.n	b6668 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6686 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6686:	b538      	push	{r3, r4, r5, lr}
   b6688:	4615      	mov	r5, r2
   b668a:	461c      	mov	r4, r3
   b668c:	f000 f89e 	bl	b67cc <_ZNKSt9type_infoeqERKS_>
   b6690:	b120      	cbz	r0, b669c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6692:	2308      	movs	r3, #8
   b6694:	60e3      	str	r3, [r4, #12]
   b6696:	2306      	movs	r3, #6
   b6698:	6025      	str	r5, [r4, #0]
   b669a:	7123      	strb	r3, [r4, #4]
   b669c:	bd38      	pop	{r3, r4, r5, pc}

000b669e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b669e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b66a0:	4605      	mov	r5, r0
   b66a2:	460c      	mov	r4, r1
   b66a4:	9201      	str	r2, [sp, #4]
   b66a6:	461e      	mov	r6, r3
   b66a8:	f000 f890 	bl	b67cc <_ZNKSt9type_infoeqERKS_>
   b66ac:	b950      	cbnz	r0, b66c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b66ae:	2e03      	cmp	r6, #3
   b66b0:	d808      	bhi.n	b66c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b66b2:	6823      	ldr	r3, [r4, #0]
   b66b4:	9a01      	ldr	r2, [sp, #4]
   b66b6:	695b      	ldr	r3, [r3, #20]
   b66b8:	4629      	mov	r1, r5
   b66ba:	4620      	mov	r0, r4
   b66bc:	b002      	add	sp, #8
   b66be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b66c2:	4718      	bx	r3
   b66c4:	b002      	add	sp, #8
   b66c6:	bd70      	pop	{r4, r5, r6, pc}

000b66c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b66c8:	b510      	push	{r4, lr}
   b66ca:	4b03      	ldr	r3, [pc, #12]	; (b66d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b66cc:	6003      	str	r3, [r0, #0]
   b66ce:	4604      	mov	r4, r0
   b66d0:	f7ff ffa6 	bl	b6620 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b66d4:	4620      	mov	r0, r4
   b66d6:	bd10      	pop	{r4, pc}
   b66d8:	000b71fc 	.word	0x000b71fc

000b66dc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b66dc:	b510      	push	{r4, lr}
   b66de:	4604      	mov	r4, r0
   b66e0:	f7ff fff2 	bl	b66c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b66e4:	4620      	mov	r0, r4
   b66e6:	210c      	movs	r1, #12
   b66e8:	f7fd fcd9 	bl	b409e <_ZdlPvj>
   b66ec:	4620      	mov	r0, r4
   b66ee:	bd10      	pop	{r4, pc}

000b66f0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b66f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b66f2:	9f08      	ldr	r7, [sp, #32]
   b66f4:	4297      	cmp	r7, r2
   b66f6:	4605      	mov	r5, r0
   b66f8:	460e      	mov	r6, r1
   b66fa:	4614      	mov	r4, r2
   b66fc:	d00a      	beq.n	b6714 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b66fe:	68a8      	ldr	r0, [r5, #8]
   b6700:	6802      	ldr	r2, [r0, #0]
   b6702:	9708      	str	r7, [sp, #32]
   b6704:	6a15      	ldr	r5, [r2, #32]
   b6706:	4631      	mov	r1, r6
   b6708:	4622      	mov	r2, r4
   b670a:	46ac      	mov	ip, r5
   b670c:	b003      	add	sp, #12
   b670e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6712:	4760      	bx	ip
   b6714:	4619      	mov	r1, r3
   b6716:	9301      	str	r3, [sp, #4]
   b6718:	f000 f858 	bl	b67cc <_ZNKSt9type_infoeqERKS_>
   b671c:	9b01      	ldr	r3, [sp, #4]
   b671e:	2800      	cmp	r0, #0
   b6720:	d0ed      	beq.n	b66fe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6722:	2006      	movs	r0, #6
   b6724:	b003      	add	sp, #12
   b6726:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6728 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6728:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b672c:	460d      	mov	r5, r1
   b672e:	4619      	mov	r1, r3
   b6730:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6734:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6738:	4681      	mov	r9, r0
   b673a:	4617      	mov	r7, r2
   b673c:	4698      	mov	r8, r3
   b673e:	f000 f845 	bl	b67cc <_ZNKSt9type_infoeqERKS_>
   b6742:	b190      	cbz	r0, b676a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6744:	2d00      	cmp	r5, #0
   b6746:	6034      	str	r4, [r6, #0]
   b6748:	7137      	strb	r7, [r6, #4]
   b674a:	db09      	blt.n	b6760 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b674c:	1961      	adds	r1, r4, r5
   b674e:	458a      	cmp	sl, r1
   b6750:	bf0c      	ite	eq
   b6752:	2106      	moveq	r1, #6
   b6754:	2101      	movne	r1, #1
   b6756:	71b1      	strb	r1, [r6, #6]
   b6758:	2000      	movs	r0, #0
   b675a:	b001      	add	sp, #4
   b675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6760:	3502      	adds	r5, #2
   b6762:	d1f9      	bne.n	b6758 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6764:	2301      	movs	r3, #1
   b6766:	71b3      	strb	r3, [r6, #6]
   b6768:	e7f6      	b.n	b6758 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b676a:	4554      	cmp	r4, sl
   b676c:	d106      	bne.n	b677c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b676e:	4659      	mov	r1, fp
   b6770:	4648      	mov	r0, r9
   b6772:	f000 f82b 	bl	b67cc <_ZNKSt9type_infoeqERKS_>
   b6776:	b108      	cbz	r0, b677c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6778:	7177      	strb	r7, [r6, #5]
   b677a:	e7ed      	b.n	b6758 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b677c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6780:	6803      	ldr	r3, [r0, #0]
   b6782:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6786:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b678a:	69dc      	ldr	r4, [r3, #28]
   b678c:	463a      	mov	r2, r7
   b678e:	4643      	mov	r3, r8
   b6790:	4629      	mov	r1, r5
   b6792:	46a4      	mov	ip, r4
   b6794:	b001      	add	sp, #4
   b6796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b679a:	4760      	bx	ip

000b679c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67a0:	4607      	mov	r7, r0
   b67a2:	460c      	mov	r4, r1
   b67a4:	4615      	mov	r5, r2
   b67a6:	461e      	mov	r6, r3
   b67a8:	f7ff ff6d 	bl	b6686 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b67ac:	b948      	cbnz	r0, b67c2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b67ae:	68b8      	ldr	r0, [r7, #8]
   b67b0:	6803      	ldr	r3, [r0, #0]
   b67b2:	699f      	ldr	r7, [r3, #24]
   b67b4:	462a      	mov	r2, r5
   b67b6:	4633      	mov	r3, r6
   b67b8:	4621      	mov	r1, r4
   b67ba:	46bc      	mov	ip, r7
   b67bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b67c0:	4760      	bx	ip
   b67c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b67c6 <_ZNSt9type_infoD1Ev>:
   b67c6:	4770      	bx	lr

000b67c8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b67c8:	2000      	movs	r0, #0
   b67ca:	4770      	bx	lr

000b67cc <_ZNKSt9type_infoeqERKS_>:
   b67cc:	4281      	cmp	r1, r0
   b67ce:	b508      	push	{r3, lr}
   b67d0:	d00e      	beq.n	b67f0 <_ZNKSt9type_infoeqERKS_+0x24>
   b67d2:	6840      	ldr	r0, [r0, #4]
   b67d4:	7803      	ldrb	r3, [r0, #0]
   b67d6:	2b2a      	cmp	r3, #42	; 0x2a
   b67d8:	d00c      	beq.n	b67f4 <_ZNKSt9type_infoeqERKS_+0x28>
   b67da:	6849      	ldr	r1, [r1, #4]
   b67dc:	780b      	ldrb	r3, [r1, #0]
   b67de:	2b2a      	cmp	r3, #42	; 0x2a
   b67e0:	bf08      	it	eq
   b67e2:	3101      	addeq	r1, #1
   b67e4:	f000 fa96 	bl	b6d14 <strcmp>
   b67e8:	fab0 f080 	clz	r0, r0
   b67ec:	0940      	lsrs	r0, r0, #5
   b67ee:	bd08      	pop	{r3, pc}
   b67f0:	2001      	movs	r0, #1
   b67f2:	e7fc      	b.n	b67ee <_ZNKSt9type_infoeqERKS_+0x22>
   b67f4:	2000      	movs	r0, #0
   b67f6:	e7fa      	b.n	b67ee <_ZNKSt9type_infoeqERKS_+0x22>

000b67f8 <__aeabi_drsub>:
   b67f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b67fc:	e002      	b.n	b6804 <__adddf3>
   b67fe:	bf00      	nop

000b6800 <__aeabi_dsub>:
   b6800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6804 <__adddf3>:
   b6804:	b530      	push	{r4, r5, lr}
   b6806:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b680a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b680e:	ea94 0f05 	teq	r4, r5
   b6812:	bf08      	it	eq
   b6814:	ea90 0f02 	teqeq	r0, r2
   b6818:	bf1f      	itttt	ne
   b681a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b681e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b682a:	f000 80e2 	beq.w	b69f2 <__adddf3+0x1ee>
   b682e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6836:	bfb8      	it	lt
   b6838:	426d      	neglt	r5, r5
   b683a:	dd0c      	ble.n	b6856 <__adddf3+0x52>
   b683c:	442c      	add	r4, r5
   b683e:	ea80 0202 	eor.w	r2, r0, r2
   b6842:	ea81 0303 	eor.w	r3, r1, r3
   b6846:	ea82 0000 	eor.w	r0, r2, r0
   b684a:	ea83 0101 	eor.w	r1, r3, r1
   b684e:	ea80 0202 	eor.w	r2, r0, r2
   b6852:	ea81 0303 	eor.w	r3, r1, r3
   b6856:	2d36      	cmp	r5, #54	; 0x36
   b6858:	bf88      	it	hi
   b685a:	bd30      	pophi	{r4, r5, pc}
   b685c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6860:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b686c:	d002      	beq.n	b6874 <__adddf3+0x70>
   b686e:	4240      	negs	r0, r0
   b6870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6878:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b687c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6880:	d002      	beq.n	b6888 <__adddf3+0x84>
   b6882:	4252      	negs	r2, r2
   b6884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6888:	ea94 0f05 	teq	r4, r5
   b688c:	f000 80a7 	beq.w	b69de <__adddf3+0x1da>
   b6890:	f1a4 0401 	sub.w	r4, r4, #1
   b6894:	f1d5 0e20 	rsbs	lr, r5, #32
   b6898:	db0d      	blt.n	b68b6 <__adddf3+0xb2>
   b689a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b689e:	fa22 f205 	lsr.w	r2, r2, r5
   b68a2:	1880      	adds	r0, r0, r2
   b68a4:	f141 0100 	adc.w	r1, r1, #0
   b68a8:	fa03 f20e 	lsl.w	r2, r3, lr
   b68ac:	1880      	adds	r0, r0, r2
   b68ae:	fa43 f305 	asr.w	r3, r3, r5
   b68b2:	4159      	adcs	r1, r3
   b68b4:	e00e      	b.n	b68d4 <__adddf3+0xd0>
   b68b6:	f1a5 0520 	sub.w	r5, r5, #32
   b68ba:	f10e 0e20 	add.w	lr, lr, #32
   b68be:	2a01      	cmp	r2, #1
   b68c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b68c4:	bf28      	it	cs
   b68c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b68ca:	fa43 f305 	asr.w	r3, r3, r5
   b68ce:	18c0      	adds	r0, r0, r3
   b68d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b68d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b68d8:	d507      	bpl.n	b68ea <__adddf3+0xe6>
   b68da:	f04f 0e00 	mov.w	lr, #0
   b68de:	f1dc 0c00 	rsbs	ip, ip, #0
   b68e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b68e6:	eb6e 0101 	sbc.w	r1, lr, r1
   b68ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b68ee:	d31b      	bcc.n	b6928 <__adddf3+0x124>
   b68f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b68f4:	d30c      	bcc.n	b6910 <__adddf3+0x10c>
   b68f6:	0849      	lsrs	r1, r1, #1
   b68f8:	ea5f 0030 	movs.w	r0, r0, rrx
   b68fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6900:	f104 0401 	add.w	r4, r4, #1
   b6904:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b6908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b690c:	f080 809a 	bcs.w	b6a44 <__adddf3+0x240>
   b6910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6914:	bf08      	it	eq
   b6916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b691a:	f150 0000 	adcs.w	r0, r0, #0
   b691e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6922:	ea41 0105 	orr.w	r1, r1, r5
   b6926:	bd30      	pop	{r4, r5, pc}
   b6928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b692c:	4140      	adcs	r0, r0
   b692e:	eb41 0101 	adc.w	r1, r1, r1
   b6932:	3c01      	subs	r4, #1
   b6934:	bf28      	it	cs
   b6936:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b693a:	d2e9      	bcs.n	b6910 <__adddf3+0x10c>
   b693c:	f091 0f00 	teq	r1, #0
   b6940:	bf04      	itt	eq
   b6942:	4601      	moveq	r1, r0
   b6944:	2000      	moveq	r0, #0
   b6946:	fab1 f381 	clz	r3, r1
   b694a:	bf08      	it	eq
   b694c:	3320      	addeq	r3, #32
   b694e:	f1a3 030b 	sub.w	r3, r3, #11
   b6952:	f1b3 0220 	subs.w	r2, r3, #32
   b6956:	da0c      	bge.n	b6972 <__adddf3+0x16e>
   b6958:	320c      	adds	r2, #12
   b695a:	dd08      	ble.n	b696e <__adddf3+0x16a>
   b695c:	f102 0c14 	add.w	ip, r2, #20
   b6960:	f1c2 020c 	rsb	r2, r2, #12
   b6964:	fa01 f00c 	lsl.w	r0, r1, ip
   b6968:	fa21 f102 	lsr.w	r1, r1, r2
   b696c:	e00c      	b.n	b6988 <__adddf3+0x184>
   b696e:	f102 0214 	add.w	r2, r2, #20
   b6972:	bfd8      	it	le
   b6974:	f1c2 0c20 	rsble	ip, r2, #32
   b6978:	fa01 f102 	lsl.w	r1, r1, r2
   b697c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6980:	bfdc      	itt	le
   b6982:	ea41 010c 	orrle.w	r1, r1, ip
   b6986:	4090      	lslle	r0, r2
   b6988:	1ae4      	subs	r4, r4, r3
   b698a:	bfa2      	ittt	ge
   b698c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6990:	4329      	orrge	r1, r5
   b6992:	bd30      	popge	{r4, r5, pc}
   b6994:	ea6f 0404 	mvn.w	r4, r4
   b6998:	3c1f      	subs	r4, #31
   b699a:	da1c      	bge.n	b69d6 <__adddf3+0x1d2>
   b699c:	340c      	adds	r4, #12
   b699e:	dc0e      	bgt.n	b69be <__adddf3+0x1ba>
   b69a0:	f104 0414 	add.w	r4, r4, #20
   b69a4:	f1c4 0220 	rsb	r2, r4, #32
   b69a8:	fa20 f004 	lsr.w	r0, r0, r4
   b69ac:	fa01 f302 	lsl.w	r3, r1, r2
   b69b0:	ea40 0003 	orr.w	r0, r0, r3
   b69b4:	fa21 f304 	lsr.w	r3, r1, r4
   b69b8:	ea45 0103 	orr.w	r1, r5, r3
   b69bc:	bd30      	pop	{r4, r5, pc}
   b69be:	f1c4 040c 	rsb	r4, r4, #12
   b69c2:	f1c4 0220 	rsb	r2, r4, #32
   b69c6:	fa20 f002 	lsr.w	r0, r0, r2
   b69ca:	fa01 f304 	lsl.w	r3, r1, r4
   b69ce:	ea40 0003 	orr.w	r0, r0, r3
   b69d2:	4629      	mov	r1, r5
   b69d4:	bd30      	pop	{r4, r5, pc}
   b69d6:	fa21 f004 	lsr.w	r0, r1, r4
   b69da:	4629      	mov	r1, r5
   b69dc:	bd30      	pop	{r4, r5, pc}
   b69de:	f094 0f00 	teq	r4, #0
   b69e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b69e6:	bf06      	itte	eq
   b69e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b69ec:	3401      	addeq	r4, #1
   b69ee:	3d01      	subne	r5, #1
   b69f0:	e74e      	b.n	b6890 <__adddf3+0x8c>
   b69f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b69f6:	bf18      	it	ne
   b69f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b69fc:	d029      	beq.n	b6a52 <__adddf3+0x24e>
   b69fe:	ea94 0f05 	teq	r4, r5
   b6a02:	bf08      	it	eq
   b6a04:	ea90 0f02 	teqeq	r0, r2
   b6a08:	d005      	beq.n	b6a16 <__adddf3+0x212>
   b6a0a:	ea54 0c00 	orrs.w	ip, r4, r0
   b6a0e:	bf04      	itt	eq
   b6a10:	4619      	moveq	r1, r3
   b6a12:	4610      	moveq	r0, r2
   b6a14:	bd30      	pop	{r4, r5, pc}
   b6a16:	ea91 0f03 	teq	r1, r3
   b6a1a:	bf1e      	ittt	ne
   b6a1c:	2100      	movne	r1, #0
   b6a1e:	2000      	movne	r0, #0
   b6a20:	bd30      	popne	{r4, r5, pc}
   b6a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6a26:	d105      	bne.n	b6a34 <__adddf3+0x230>
   b6a28:	0040      	lsls	r0, r0, #1
   b6a2a:	4149      	adcs	r1, r1
   b6a2c:	bf28      	it	cs
   b6a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6a32:	bd30      	pop	{r4, r5, pc}
   b6a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6a38:	bf3c      	itt	cc
   b6a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6a3e:	bd30      	popcc	{r4, r5, pc}
   b6a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6a4c:	f04f 0000 	mov.w	r0, #0
   b6a50:	bd30      	pop	{r4, r5, pc}
   b6a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6a56:	bf1a      	itte	ne
   b6a58:	4619      	movne	r1, r3
   b6a5a:	4610      	movne	r0, r2
   b6a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6a60:	bf1c      	itt	ne
   b6a62:	460b      	movne	r3, r1
   b6a64:	4602      	movne	r2, r0
   b6a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6a6a:	bf06      	itte	eq
   b6a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6a70:	ea91 0f03 	teqeq	r1, r3
   b6a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6a78:	bd30      	pop	{r4, r5, pc}
   b6a7a:	bf00      	nop

000b6a7c <__aeabi_ui2d>:
   b6a7c:	f090 0f00 	teq	r0, #0
   b6a80:	bf04      	itt	eq
   b6a82:	2100      	moveq	r1, #0
   b6a84:	4770      	bxeq	lr
   b6a86:	b530      	push	{r4, r5, lr}
   b6a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6a90:	f04f 0500 	mov.w	r5, #0
   b6a94:	f04f 0100 	mov.w	r1, #0
   b6a98:	e750      	b.n	b693c <__adddf3+0x138>
   b6a9a:	bf00      	nop

000b6a9c <__aeabi_i2d>:
   b6a9c:	f090 0f00 	teq	r0, #0
   b6aa0:	bf04      	itt	eq
   b6aa2:	2100      	moveq	r1, #0
   b6aa4:	4770      	bxeq	lr
   b6aa6:	b530      	push	{r4, r5, lr}
   b6aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6ab4:	bf48      	it	mi
   b6ab6:	4240      	negmi	r0, r0
   b6ab8:	f04f 0100 	mov.w	r1, #0
   b6abc:	e73e      	b.n	b693c <__adddf3+0x138>
   b6abe:	bf00      	nop

000b6ac0 <__aeabi_f2d>:
   b6ac0:	0042      	lsls	r2, r0, #1
   b6ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6ac6:	ea4f 0131 	mov.w	r1, r1, rrx
   b6aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b6ace:	bf1f      	itttt	ne
   b6ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6adc:	4770      	bxne	lr
   b6ade:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6ae2:	bf08      	it	eq
   b6ae4:	4770      	bxeq	lr
   b6ae6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6aea:	bf04      	itt	eq
   b6aec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6af0:	4770      	bxeq	lr
   b6af2:	b530      	push	{r4, r5, lr}
   b6af4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6b00:	e71c      	b.n	b693c <__adddf3+0x138>
   b6b02:	bf00      	nop

000b6b04 <__aeabi_ul2d>:
   b6b04:	ea50 0201 	orrs.w	r2, r0, r1
   b6b08:	bf08      	it	eq
   b6b0a:	4770      	bxeq	lr
   b6b0c:	b530      	push	{r4, r5, lr}
   b6b0e:	f04f 0500 	mov.w	r5, #0
   b6b12:	e00a      	b.n	b6b2a <__aeabi_l2d+0x16>

000b6b14 <__aeabi_l2d>:
   b6b14:	ea50 0201 	orrs.w	r2, r0, r1
   b6b18:	bf08      	it	eq
   b6b1a:	4770      	bxeq	lr
   b6b1c:	b530      	push	{r4, r5, lr}
   b6b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6b22:	d502      	bpl.n	b6b2a <__aeabi_l2d+0x16>
   b6b24:	4240      	negs	r0, r0
   b6b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6b36:	f43f aed8 	beq.w	b68ea <__adddf3+0xe6>
   b6b3a:	f04f 0203 	mov.w	r2, #3
   b6b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6b42:	bf18      	it	ne
   b6b44:	3203      	addne	r2, #3
   b6b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6b4a:	bf18      	it	ne
   b6b4c:	3203      	addne	r2, #3
   b6b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6b52:	f1c2 0320 	rsb	r3, r2, #32
   b6b56:	fa00 fc03 	lsl.w	ip, r0, r3
   b6b5a:	fa20 f002 	lsr.w	r0, r0, r2
   b6b5e:	fa01 fe03 	lsl.w	lr, r1, r3
   b6b62:	ea40 000e 	orr.w	r0, r0, lr
   b6b66:	fa21 f102 	lsr.w	r1, r1, r2
   b6b6a:	4414      	add	r4, r2
   b6b6c:	e6bd      	b.n	b68ea <__adddf3+0xe6>
   b6b6e:	bf00      	nop

000b6b70 <__gedf2>:
   b6b70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6b74:	e006      	b.n	b6b84 <__cmpdf2+0x4>
   b6b76:	bf00      	nop

000b6b78 <__ledf2>:
   b6b78:	f04f 0c01 	mov.w	ip, #1
   b6b7c:	e002      	b.n	b6b84 <__cmpdf2+0x4>
   b6b7e:	bf00      	nop

000b6b80 <__cmpdf2>:
   b6b80:	f04f 0c01 	mov.w	ip, #1
   b6b84:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6b94:	bf18      	it	ne
   b6b96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6b9a:	d01b      	beq.n	b6bd4 <__cmpdf2+0x54>
   b6b9c:	b001      	add	sp, #4
   b6b9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6ba2:	bf0c      	ite	eq
   b6ba4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6ba8:	ea91 0f03 	teqne	r1, r3
   b6bac:	bf02      	ittt	eq
   b6bae:	ea90 0f02 	teqeq	r0, r2
   b6bb2:	2000      	moveq	r0, #0
   b6bb4:	4770      	bxeq	lr
   b6bb6:	f110 0f00 	cmn.w	r0, #0
   b6bba:	ea91 0f03 	teq	r1, r3
   b6bbe:	bf58      	it	pl
   b6bc0:	4299      	cmppl	r1, r3
   b6bc2:	bf08      	it	eq
   b6bc4:	4290      	cmpeq	r0, r2
   b6bc6:	bf2c      	ite	cs
   b6bc8:	17d8      	asrcs	r0, r3, #31
   b6bca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6bce:	f040 0001 	orr.w	r0, r0, #1
   b6bd2:	4770      	bx	lr
   b6bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6bdc:	d102      	bne.n	b6be4 <__cmpdf2+0x64>
   b6bde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6be2:	d107      	bne.n	b6bf4 <__cmpdf2+0x74>
   b6be4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6bec:	d1d6      	bne.n	b6b9c <__cmpdf2+0x1c>
   b6bee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6bf2:	d0d3      	beq.n	b6b9c <__cmpdf2+0x1c>
   b6bf4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6bf8:	4770      	bx	lr
   b6bfa:	bf00      	nop

000b6bfc <__aeabi_cdrcmple>:
   b6bfc:	4684      	mov	ip, r0
   b6bfe:	4610      	mov	r0, r2
   b6c00:	4662      	mov	r2, ip
   b6c02:	468c      	mov	ip, r1
   b6c04:	4619      	mov	r1, r3
   b6c06:	4663      	mov	r3, ip
   b6c08:	e000      	b.n	b6c0c <__aeabi_cdcmpeq>
   b6c0a:	bf00      	nop

000b6c0c <__aeabi_cdcmpeq>:
   b6c0c:	b501      	push	{r0, lr}
   b6c0e:	f7ff ffb7 	bl	b6b80 <__cmpdf2>
   b6c12:	2800      	cmp	r0, #0
   b6c14:	bf48      	it	mi
   b6c16:	f110 0f00 	cmnmi.w	r0, #0
   b6c1a:	bd01      	pop	{r0, pc}

000b6c1c <__aeabi_dcmpeq>:
   b6c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c20:	f7ff fff4 	bl	b6c0c <__aeabi_cdcmpeq>
   b6c24:	bf0c      	ite	eq
   b6c26:	2001      	moveq	r0, #1
   b6c28:	2000      	movne	r0, #0
   b6c2a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c2e:	bf00      	nop

000b6c30 <__aeabi_dcmplt>:
   b6c30:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c34:	f7ff ffea 	bl	b6c0c <__aeabi_cdcmpeq>
   b6c38:	bf34      	ite	cc
   b6c3a:	2001      	movcc	r0, #1
   b6c3c:	2000      	movcs	r0, #0
   b6c3e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c42:	bf00      	nop

000b6c44 <__aeabi_dcmple>:
   b6c44:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c48:	f7ff ffe0 	bl	b6c0c <__aeabi_cdcmpeq>
   b6c4c:	bf94      	ite	ls
   b6c4e:	2001      	movls	r0, #1
   b6c50:	2000      	movhi	r0, #0
   b6c52:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c56:	bf00      	nop

000b6c58 <__aeabi_dcmpge>:
   b6c58:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c5c:	f7ff ffce 	bl	b6bfc <__aeabi_cdrcmple>
   b6c60:	bf94      	ite	ls
   b6c62:	2001      	movls	r0, #1
   b6c64:	2000      	movhi	r0, #0
   b6c66:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c6a:	bf00      	nop

000b6c6c <__aeabi_dcmpgt>:
   b6c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6c70:	f7ff ffc4 	bl	b6bfc <__aeabi_cdrcmple>
   b6c74:	bf34      	ite	cc
   b6c76:	2001      	movcc	r0, #1
   b6c78:	2000      	movcs	r0, #0
   b6c7a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6c7e:	bf00      	nop

000b6c80 <atexit>:
   b6c80:	2300      	movs	r3, #0
   b6c82:	4601      	mov	r1, r0
   b6c84:	461a      	mov	r2, r3
   b6c86:	4618      	mov	r0, r3
   b6c88:	f000 b87c 	b.w	b6d84 <__register_exitproc>

000b6c8c <memcpy>:
   b6c8c:	440a      	add	r2, r1
   b6c8e:	4291      	cmp	r1, r2
   b6c90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6c94:	d100      	bne.n	b6c98 <memcpy+0xc>
   b6c96:	4770      	bx	lr
   b6c98:	b510      	push	{r4, lr}
   b6c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6ca2:	4291      	cmp	r1, r2
   b6ca4:	d1f9      	bne.n	b6c9a <memcpy+0xe>
   b6ca6:	bd10      	pop	{r4, pc}

000b6ca8 <memset>:
   b6ca8:	4402      	add	r2, r0
   b6caa:	4603      	mov	r3, r0
   b6cac:	4293      	cmp	r3, r2
   b6cae:	d100      	bne.n	b6cb2 <memset+0xa>
   b6cb0:	4770      	bx	lr
   b6cb2:	f803 1b01 	strb.w	r1, [r3], #1
   b6cb6:	e7f9      	b.n	b6cac <memset+0x4>

000b6cb8 <srand>:
   b6cb8:	b538      	push	{r3, r4, r5, lr}
   b6cba:	4b10      	ldr	r3, [pc, #64]	; (b6cfc <srand+0x44>)
   b6cbc:	681d      	ldr	r5, [r3, #0]
   b6cbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6cc0:	4604      	mov	r4, r0
   b6cc2:	b9b3      	cbnz	r3, b6cf2 <srand+0x3a>
   b6cc4:	2018      	movs	r0, #24
   b6cc6:	f7fe f8a7 	bl	b4e18 <malloc>
   b6cca:	4602      	mov	r2, r0
   b6ccc:	63a8      	str	r0, [r5, #56]	; 0x38
   b6cce:	b920      	cbnz	r0, b6cda <srand+0x22>
   b6cd0:	4b0b      	ldr	r3, [pc, #44]	; (b6d00 <srand+0x48>)
   b6cd2:	480c      	ldr	r0, [pc, #48]	; (b6d04 <srand+0x4c>)
   b6cd4:	2142      	movs	r1, #66	; 0x42
   b6cd6:	f7fe f8cf 	bl	b4e78 <__assert_func>
   b6cda:	490b      	ldr	r1, [pc, #44]	; (b6d08 <srand+0x50>)
   b6cdc:	4b0b      	ldr	r3, [pc, #44]	; (b6d0c <srand+0x54>)
   b6cde:	e9c0 1300 	strd	r1, r3, [r0]
   b6ce2:	4b0b      	ldr	r3, [pc, #44]	; (b6d10 <srand+0x58>)
   b6ce4:	6083      	str	r3, [r0, #8]
   b6ce6:	230b      	movs	r3, #11
   b6ce8:	8183      	strh	r3, [r0, #12]
   b6cea:	2100      	movs	r1, #0
   b6cec:	2001      	movs	r0, #1
   b6cee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6cf2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6cf4:	2200      	movs	r2, #0
   b6cf6:	611c      	str	r4, [r3, #16]
   b6cf8:	615a      	str	r2, [r3, #20]
   b6cfa:	bd38      	pop	{r3, r4, r5, pc}
   b6cfc:	2003e594 	.word	0x2003e594
   b6d00:	000b7235 	.word	0x000b7235
   b6d04:	000b724c 	.word	0x000b724c
   b6d08:	abcd330e 	.word	0xabcd330e
   b6d0c:	e66d1234 	.word	0xe66d1234
   b6d10:	0005deec 	.word	0x0005deec

000b6d14 <strcmp>:
   b6d14:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6d18:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6d1c:	2a01      	cmp	r2, #1
   b6d1e:	bf28      	it	cs
   b6d20:	429a      	cmpcs	r2, r3
   b6d22:	d0f7      	beq.n	b6d14 <strcmp>
   b6d24:	1ad0      	subs	r0, r2, r3
   b6d26:	4770      	bx	lr

000b6d28 <strcpy>:
   b6d28:	4603      	mov	r3, r0
   b6d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6d2e:	f803 2b01 	strb.w	r2, [r3], #1
   b6d32:	2a00      	cmp	r2, #0
   b6d34:	d1f9      	bne.n	b6d2a <strcpy+0x2>
   b6d36:	4770      	bx	lr

000b6d38 <strdup>:
   b6d38:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <strdup+0xc>)
   b6d3a:	4601      	mov	r1, r0
   b6d3c:	6818      	ldr	r0, [r3, #0]
   b6d3e:	f000 b803 	b.w	b6d48 <_strdup_r>
   b6d42:	bf00      	nop
   b6d44:	2003e594 	.word	0x2003e594

000b6d48 <_strdup_r>:
   b6d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d4a:	4604      	mov	r4, r0
   b6d4c:	4608      	mov	r0, r1
   b6d4e:	460d      	mov	r5, r1
   b6d50:	f000 f80f 	bl	b6d72 <strlen>
   b6d54:	1c42      	adds	r2, r0, #1
   b6d56:	4611      	mov	r1, r2
   b6d58:	4620      	mov	r0, r4
   b6d5a:	9201      	str	r2, [sp, #4]
   b6d5c:	f7fe f87c 	bl	b4e58 <_malloc_r>
   b6d60:	4604      	mov	r4, r0
   b6d62:	b118      	cbz	r0, b6d6c <_strdup_r+0x24>
   b6d64:	9a01      	ldr	r2, [sp, #4]
   b6d66:	4629      	mov	r1, r5
   b6d68:	f7ff ff90 	bl	b6c8c <memcpy>
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	b003      	add	sp, #12
   b6d70:	bd30      	pop	{r4, r5, pc}

000b6d72 <strlen>:
   b6d72:	4603      	mov	r3, r0
   b6d74:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6d78:	2a00      	cmp	r2, #0
   b6d7a:	d1fb      	bne.n	b6d74 <strlen+0x2>
   b6d7c:	1a18      	subs	r0, r3, r0
   b6d7e:	3801      	subs	r0, #1
   b6d80:	4770      	bx	lr
	...

000b6d84 <__register_exitproc>:
   b6d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6e44 <__register_exitproc+0xc0>
   b6d8c:	4606      	mov	r6, r0
   b6d8e:	f8d8 0000 	ldr.w	r0, [r8]
   b6d92:	461f      	mov	r7, r3
   b6d94:	460d      	mov	r5, r1
   b6d96:	4691      	mov	r9, r2
   b6d98:	f000 f856 	bl	b6e48 <__retarget_lock_acquire_recursive>
   b6d9c:	4b25      	ldr	r3, [pc, #148]	; (b6e34 <__register_exitproc+0xb0>)
   b6d9e:	681c      	ldr	r4, [r3, #0]
   b6da0:	b934      	cbnz	r4, b6db0 <__register_exitproc+0x2c>
   b6da2:	4c25      	ldr	r4, [pc, #148]	; (b6e38 <__register_exitproc+0xb4>)
   b6da4:	601c      	str	r4, [r3, #0]
   b6da6:	4b25      	ldr	r3, [pc, #148]	; (b6e3c <__register_exitproc+0xb8>)
   b6da8:	b113      	cbz	r3, b6db0 <__register_exitproc+0x2c>
   b6daa:	681b      	ldr	r3, [r3, #0]
   b6dac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6db0:	6863      	ldr	r3, [r4, #4]
   b6db2:	2b1f      	cmp	r3, #31
   b6db4:	dd07      	ble.n	b6dc6 <__register_exitproc+0x42>
   b6db6:	f8d8 0000 	ldr.w	r0, [r8]
   b6dba:	f000 f847 	bl	b6e4c <__retarget_lock_release_recursive>
   b6dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6dc6:	b34e      	cbz	r6, b6e1c <__register_exitproc+0x98>
   b6dc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6dcc:	b988      	cbnz	r0, b6df2 <__register_exitproc+0x6e>
   b6dce:	4b1c      	ldr	r3, [pc, #112]	; (b6e40 <__register_exitproc+0xbc>)
   b6dd0:	b923      	cbnz	r3, b6ddc <__register_exitproc+0x58>
   b6dd2:	f8d8 0000 	ldr.w	r0, [r8]
   b6dd6:	f000 f838 	bl	b6e4a <__retarget_lock_release>
   b6dda:	e7f0      	b.n	b6dbe <__register_exitproc+0x3a>
   b6ddc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6de0:	f7fe f81a 	bl	b4e18 <malloc>
   b6de4:	2800      	cmp	r0, #0
   b6de6:	d0f4      	beq.n	b6dd2 <__register_exitproc+0x4e>
   b6de8:	2300      	movs	r3, #0
   b6dea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6dee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6df2:	6863      	ldr	r3, [r4, #4]
   b6df4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6df8:	2201      	movs	r2, #1
   b6dfa:	409a      	lsls	r2, r3
   b6dfc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6e00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6e04:	4313      	orrs	r3, r2
   b6e06:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6e0a:	2e02      	cmp	r6, #2
   b6e0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6e10:	bf02      	ittt	eq
   b6e12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6e16:	4313      	orreq	r3, r2
   b6e18:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6e1c:	6863      	ldr	r3, [r4, #4]
   b6e1e:	f8d8 0000 	ldr.w	r0, [r8]
   b6e22:	1c5a      	adds	r2, r3, #1
   b6e24:	3302      	adds	r3, #2
   b6e26:	6062      	str	r2, [r4, #4]
   b6e28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6e2c:	f000 f80e 	bl	b6e4c <__retarget_lock_release_recursive>
   b6e30:	2000      	movs	r0, #0
   b6e32:	e7c6      	b.n	b6dc2 <__register_exitproc+0x3e>
   b6e34:	2003e7ec 	.word	0x2003e7ec
   b6e38:	2003e760 	.word	0x2003e760
   b6e3c:	00000000 	.word	0x00000000
   b6e40:	000b4e19 	.word	0x000b4e19
   b6e44:	2003e5f8 	.word	0x2003e5f8

000b6e48 <__retarget_lock_acquire_recursive>:
   b6e48:	4770      	bx	lr

000b6e4a <__retarget_lock_release>:
   b6e4a:	4770      	bx	lr

000b6e4c <__retarget_lock_release_recursive>:
   b6e4c:	4770      	bx	lr

000b6e4e <link_code_end>:
	...

000b6e50 <dynalib_user>:
   b6e50:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6e60:	0000 0000 716d 7474 7220 7465 7275 206e     ....mqtt return 
   b6e70:	6f63 6564 3d20 0020 6f43 6e6e 6365 6974     code = .Connecti
   b6e80:	6e6f 6420 6f72 7070 6465 4400 6169 656c     on dropped.Diale
   b6e90:	2064 5300 6174 7472 6d20 2065 7075 2e2e     d .Start me up..
   b6ea0:	002e 6264 6775 4300 6e6f 656e 7463 6465     ..dbug.Connected
   b6eb0:	7420 206f 4148 4d00 5451 0054 6146 6c69      to HA.MQTT.Fail
   b6ec0:	6465 6320 6e6f 656e 7463 4820 2041 202d     ed connect HA - 
   b6ed0:	6863 6365 206b 6573 7263 7465 2e73 0068     check secrets.h.
   b6ee0:	6168 722f 746f 7261 2f79 756e 626d 7265     ha/rotary/number
   b6ef0:	6800 2f61 6f72 6174 7972 642f 6769 7469     .ha/rotary/digit
   b6f00:	4400 4149 454c 0052 5755 3132 716d 7474     .DIALER.UW21mqtt
   b6f10:	7500 6974 736c 716d 7474 0000 4d04 5451     .utilsmqtt...MQT
   b6f20:	0454 0600 514d 7349 7064 0003               T...MQIsdp..

000b6f2c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6f34 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6f3c:	4f0d 000b 4f13 000b 4f51 000b 4f21 000b     .O...O..QO..!O..
   b6f4c:	4f0f 000b                                   .O..

000b6f50 <_ZTVN5spark13EthernetClassE>:
	...
   b6f58:	549b 000b 5491 000b 5487 000b 547d 000b     .T...T...T..}T..
   b6f68:	5471 000b 5465 000b 56a1 000b 56a9 000b     qT..eT...V...V..
   b6f78:	5459 000b 5451 000b 5447 000b 543d 000b     YT..QT..GT..=T..
   b6f88:	56d9 000b                                   .V..

000b6f8c <_ZTV7TwoWire>:
	...
   b6f94:	54b9 000b 5503 000b 54db 000b 54bb 000b     .T...U...T...T..
   b6fa4:	54e3 000b 54eb 000b 54f3 000b 54fb 000b     .T...T...T...T..

000b6fb4 <_ZTV9IPAddress>:
	...
   b6fbc:	5545 000b 5535 000b 5537 000b 7061 0070     EU..5U..7U..app.

000b6fcc <_ZTVN5spark12NetworkClassE>:
	...
   b6fd4:	5661 000b 566b 000b 5675 000b 567f 000b     aV..kV..uV...V..
   b6fe4:	5689 000b 5695 000b 56a1 000b 56a9 000b     .V...V...V...V..
   b6ff4:	56b1 000b 56bd 000b 56c5 000b 56cf 000b     .V...V...V...V..
   b7004:	56d9 000b 6977 6972 676e 7200 6365 2076     .V..wiring.recv 
   b7014:	7265 6f72 2072 203d 6425 0000               error = %d..

000b7020 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7028:	5aad 000b 5ad1 000b 6003 000b 5adf 000b     .Z...Z...`...Z..
   b7038:	5ab1 000b                                   .Z..

000b703c <_ZTV9TCPClient>:
	...
   b7044:	5b5d 000b 5b91 000b 5a29 000b 5a43 000b     ][...[..)Z..CZ..
   b7054:	5e99 000b 5a6d 000b 5d0f 000b 5aa1 000b     .^..mZ...]...Z..
   b7064:	5da1 000b 5be1 000b 5d3d 000b 5f4d 000b     .]...[..=]..M_..
   b7074:	5cdd 000b 5aa3 000b 5a55 000b 5ae5 000b     .\...Z..UZ...Z..
   b7084:	5bc1 000b 5925 252d 2d6d 6425 2554 3a48     .[..%Y-%m-%dT%H:
   b7094:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b70a4 <_ZTV11USARTSerial>:
	...
   b70ac:	601d 000b 6089 000b 6061 000b 57c5 000b     .`...`..a`...W..
   b70bc:	6031 000b 604d 000b 603f 000b 605b 000b     1`..M`..?`..[`..
   b70cc:	601f 000b 6023 000b                         .`..#`..

000b70d4 <_ZTV9USBSerial>:
	...
   b70dc:	60c7 000b 612f 000b 6105 000b 57c5 000b     .`../a...a...W..
   b70ec:	60f7 000b 60c9 000b 60d9 000b 6129 000b     .`...`...`..)a..
   b70fc:	60e9 000b 60c1 000b                         .`...`..

000b7104 <_ZTVN5spark9WiFiClassE>:
	...
   b710c:	621f 000b 6215 000b 620b 000b 61c1 000b     .b...b...b...a..
   b711c:	61ff 000b 61f3 000b 56a1 000b 56a9 000b     .a...a...V...V..
   b712c:	61e7 000b 61df 000b 61d5 000b 61cb 000b     .a...a...a...a..
   b713c:	56d9 000b                                   .V..

000b7140 <_ZSt7nothrow>:
	...

000b7141 <_ZTSSt19_Sp_make_shared_tag>:
   b7141:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7151:	6572 5f64 6174 0067 0000                     red_tag....

000b715c <_ZTISt19_Sp_make_shared_tag>:
   b715c:	719c 000b 7141 000b                         .q..Aq..

000b7164 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7164:	71fc 000b 7170 000b 7220 000b               .q..pq.. r..

000b7170 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7170:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7180:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7190:	0045 0000                                   E...

000b7194 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7194:	0000 0000 7164 000b 6621 000b 6635 000b     ....dq..!f..5f..
   b71a4:	67c9 000b 67c9 000b 669f 000b 65e1 000b     .g...g...f...e..
   b71b4:	6687 000b 6649 000b 6613 000b               .f..If...f..

000b71c0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b71c0:	71fc 000b 71cc 000b 7164 000b               .q...q..dq..

000b71cc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b71cc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b71dc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b71ec:	666e 456f 0000 0000                         nfoE....

000b71f4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b71f4:	0000 0000 71c0 000b 66c9 000b 66dd 000b     .....q...f...f..
   b7204:	67c9 000b 67c9 000b 669f 000b 65e1 000b     .g...g...f...e..
   b7214:	679d 000b 6729 000b 66f1 000b               .g..)g...f..

000b7220 <_ZTISt9type_info>:
   b7220:	719c 000b 7228 000b                         .q..(r..

000b7228 <_ZTSSt9type_info>:
   b7228:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7238:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7248:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b7258:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b7268:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b7278:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b7288:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b7298:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b72a5 <link_const_variable_data_end>:
   b72a5:	00          	.byte	0x00
	...

000b72a8 <link_constructors_location>:
   b72a8:	000b4409 	.word	0x000b4409
   b72ac:	000b4efd 	.word	0x000b4efd
   b72b0:	000b54a5 	.word	0x000b54a5
   b72b4:	000b5651 	.word	0x000b5651
   b72b8:	000b57b1 	.word	0x000b57b1
   b72bc:	000b5859 	.word	0x000b5859
   b72c0:	000b5a05 	.word	0x000b5a05
   b72c4:	000b6009 	.word	0x000b6009
   b72c8:	000b6229 	.word	0x000b6229

000b72cc <link_constructors_end>:
   b72cc:	00000000 	.word	0x00000000
